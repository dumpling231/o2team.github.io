{"title":"Aotu.io","description":"凹凸实验室(Aotu.io) 始建于2015年，是一个年轻基情的技术社区组织。<br/>O2面向多终端技术体系，致力于构建沉淀与分享包括但不限于交互、页面制作技巧、前端开发、原生APP开发等方面的专业知识及案例。","language":"zh-cn","link":"https://aotu.io","pubDate":"Mon, 03 Feb 2020 05:50:00 GMT","lastBuildDate":"Thu, 13 Feb 2020 06:27:43 GMT","generator":"hexo-generator-json-feed","webMaster":"凹凸实验室","items":[{"title":"Taro Next 发布预览版：同时支持 React / Vue / Nerv","link":"https://aotu.io/notes/2020/02/03/taro-next-alpha/","description":"自 Taro 2.0 起，我们将会启动对整个 Taro 系统架构的革新，这次革新我们将其称之为 Taro Next。Taro Next 革新完成之后，Taro 本身的拓展性、稳定性、可维护性都会大幅提高，相应地，使用 Taro 的开发者也会获得更好的开发体验，降低更多开发成本和学习成本。 我们目前已经完成了编译系统和小程序端的重构，通过 npm i -g @tarojs/cli@next 安装 Taro CLI 预览（alpha）版之后，使用 taro init 创建新项目即可体验 Taro Next 的新特性： 同时支持 React/Vue/Nerv 三种框架在旧版本的 Taro，我们以微信小程序的开发规范为基准，使用 React/JSX 的方式来进行开发。而在 Taro Next，我们把这一思路量化为一个编程模型： 设微信小程序生命周期为一个 interface，不同的框架实例的生命周期虽然不尽相同，但我们可以根据框架生命周期分别新建一个 class 去 implements 小程序生命周期的 interface。相应地，小程序的组件/API/路由规范可以使用同样的思路和模型让不同框架的代码，运行在不同的端上： 不限制语言、语法由于 Taro Next 的架构出现了变化，表面上来看 Taro 从一个编译型框架变成了一个运行时框架。但究其内核是整体的设计思路出现了变化：从前是「模拟（mock）」，现在是「实现（implements）」。在 Taro Next 我们实现了 React 在小程序中的完整支持，因此这类曾经的 Taro 无法运行的代码在 Taro Next 中完全没有压力： 12345import &#123; View &#125; from '@tarojs/components'function Page (props) &#123; const view = React.createElement(View, null, props.text) return [view, React.Children.only(this.prosps.children)]&#125; 在旧版本的 Taro 中我们对 JavaScript 和 TypeScript 进行了 First Class 的支持，Taro Next 我们更进一步，原理上最终可以编译到 JavaScript 的语言都可以用来构建 Taro 项目，以下是一个在 Vue 中使用 CoffeeScript 的例子： 12345678910111213// config.js&#123; webpackChain (chain) &#123; chain.merge(&#123; module: &#123; rule: &#123; test: /\\.coffee$/, use: [ 'coffee-loader' ] &#125; &#125; &#125;) &#125;&#125; 123456789101112131415&lt;template&gt; &lt;view&gt;&#123;&#123; title &#125;&#125;&lt;/view&gt; &lt;view&gt;&#123;&#123; text &#125;&#125;&lt;/view&gt; &lt;input v-model='text' /&gt;&lt;/template&gt;&lt;script lang=\"coffee\"&gt;export default props: title: type: String required: true data: -&gt; text: 'text'&lt;/script&gt; 更快的运行速度运行时性能主要分为两个部分，一是更新性能，二是初始化性能。 对于更新性能而言，旧版本的 Taro 会把开发者 setState 的数据进行一次全量的 diff，最终返回给小程序是按路径更新的 data。而在 Taro Next 中 diff 的工作交给了开发者使用的框架（React/Nerv/Vue），而框架 diff 之后的数据也会通过 Taro 按路径去最小化更新。因此开发者可以根据使用框架的特性进行更多更细微的性能优化。 初始化性能则是 Taro Next 的痛点。原生小程序或编译型框架的初始数据可以直接用于渲染，但 Taro Next 在初始化时会把框架的渲染数据转化为小程序的渲染数据，多了一次 setData 开销。 为了解决这个问题，Taro 从服务端渲染受到启发，在 Taro CLI 将页面初始化的状态直接渲染为无状态的 wxml，在框架和业务逻辑运行之前执行渲染流程。我们将这一技术称之为预渲染（Prerender），经过 Prerender 的页面初始渲染速度通常会和原生小程序一致甚至更快。 更快的构建速度和 source-map 支持作为一个编译型框架，旧版本的 Taro 会进行大量的 AST 操作，这类操作显著地拖慢了 Taro CLI 的编译速度。而在 Taro Next 中不会操作任何开发者代码的 AST，因此编译速度得到了大幅的提高。 正因为 AST 操作的取消，Taro Next 也轻松地实现了 source-map 的支持。这对于开发体验是一个巨大的提升： 不忘初心在做到以上各项特性的同时，我们也没有丢掉原来就已经支持的特性： 支持微信小程序、百度智能小程序、支付宝小程序、QQ 小程序、字节跳动小程序 使用原生小程序第三方组件/插件 多端条件编译 跨端 API 和样式处理 这些特性基本涉及到了小程序开发的方方面面，虽然是预览版，但 Taro Next 已经具备了开发生产级小程序的准备，在 Taro 团队内部和兄弟团队也有多款小程序正在使用 Taro Next 进行开发。而在 Taro Next 的 H5 端和移动端，我们还在进行紧张的开发。当 Taro Next 测试（beta）版发布时，使用 Taro Next 构建的一套代码，就可以同时运行在各种小程序、快应用、H5 和移动端当中。在未来，我们还会把 Taro Next 的能力开放出去，让开发者只要写少量的接入代码，就可以使用自己喜欢的任意框架（Angular, Flutter, svelte…）开发小程序或多端应用。 牢记使命正如我们在 Taro 2.0 发布时所言： 节物风光不相待，桑田碧海须臾改。 20 年代呼啸而来，下一个 10 年，很多框架都会死去，很多技术也会焕然而生，没有什么是不变的，唯一不变的只有变化，我们能做的也只能是拥抱变化。 前端技术一直在高速发展，流行的技术和框架每年都各不相同。但我们始终没有忘记开发 Taro 的初心和使命：降低开发成本，提高开发体验和开发效率。 「不忘初心，牢记使命。」 这就是 Taro 团队拥抱变化的方式。 参考资料[1] 小程序跨框架开发的探索与实践: https://www.infoq.cn/article/TMqBzVFTSiQTUbgxydPm [2] Taro Next 旧版本迁移指南：https://taro-docs.jd.com/taro/next/docs/migration.html [3] Prerender: https://taro-docs.jd.com/taro/next/docs/prerender.html [4] 性能测试：https://github.com/NervJS/taro-benchmark/tree/next [5] 与其它新型小程序的对比：https://taro-docs.jd.com/taro/next/docs/difference-to-others.html","pubDate":"Mon, 03 Feb 2020 05:50:00 GMT","guid":"https://aotu.io/notes/2020/02/03/taro-next-alpha/","category":"Web开发"},{"title":"Taro 2.0：拥抱社区，拥抱变化","link":"https://aotu.io/notes/2020/01/08/taro-2-0/","description":"缘起Taro 1.x 版本自去年 9 月份发布以来，已经陪伴大家度过了一年多的时间，在此期间 Taro 一直保持高速成长，发布了多个具有重大意义的版本，让 Taro 成为如今一个功能完善，拥有众多忠实拥趸的多端统一开发框架。 尽管 Taro 一直保持超高的迭代速度，Taro 的整体架构设计没有发生太大变化，这让 Taro 在这个时刻在变化的时代稍显佛系，且对于一个时刻想要突破自己的技术团队来说，常规性质的维护工作，显然无法安抚我们躁动的心，毕竟人的梦想，是永远不会停止的，所以我们决定启动一系列的颠覆式重构设计。 2.0我们首先从 CLI 开始入手进行改造，大家都知道，原来 Taro CLI 的编译构建系统是自研的，整个构建系统逻辑复杂，要考虑的边际条件众多，这就导致了以下问题： 维护困难，每次需要新增一个功能，例如支持解析 Markdown 文件，就需要直接改动 CLI，不够灵活 难以共建，CLI 的代码非常复杂，而且逻辑分支众多，让很多想要一起共建的人难以入手 可扩展性偏低，自研的构建系统，设计之初没有考虑到后续的扩展性，导致开发者想要添加自定义的功能无从下手 基于以上问题，我们决定使用 Webpack 来实现编译构建，于是诞生了 2.0。 Taro 2.0 的 CLI 将会变得非常轻量，只会做区分编译平台、处理不同平台编译入参等操作，随后再调用对应平台的 runner 编译器 做代码编译操作，而原来大量的 AST 语法操作将会改造成 Webpack Plugin 以及 Loader，交给 Webpack 来处理。 相较于旧的构建系统，新的小程序编译带来了以下优势： 利于维护，大量的逻辑交由 Webpack 来处理，我们只需要维护一些插件 更加稳定，相较于自研的构建系统，新的构建会更加稳定，降低一些奇怪错误的出现概率 可扩展性强，可以通过自行加入 Webpack Loader 与 Plugin 的方式做自己想要的扩展 各端编译统一，接入 Webpack 后，Taro 各端的编译配置可以实现非常大程度的统一 可以看到新的构建系统会有很大的进步。同时，更重要的是，基于 Webpack，我们可以在小程序中尝试更多的特性与技术，例如通过 tree shaking 来优化代码包大小等等，让小程序开发更加与业界发展同步，让 Taro 更加拥抱社区。 Migrate to 2.0编译配置调整2.0 整体上与 1.0 是完全兼容的，但是在基于 Webpack 重构后，我们对部分编译配置做了优化调整，所以如果想要将基于 1.x 的旧项目迁移至 2.0，首先需要对编译配置进行调整。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364const config = &#123; projectName: 'taro-framework', date: '2019-11-2', designWidth: 750, deviceRatio: &#123; 640: 2.34 / 2, 750: 1, 828: 1.81 / 2 &#125;, sourceRoot: 'src', outputRoot: 'dist', // babel、csso、uglify 等配置从 plugins 配置中移出来 babel: &#123; sourceMap: true, presets: [['env', &#123; modules: false &#125;]],, plugins: [ 'transform-decorators-legacy', 'transform-class-properties', 'transform-object-rest-spread' ] &#125;, // 小程序配置从 weapp 改为 mini，可以删掉很多小配置 mini: &#123; webpackChain (chain, webpack) &#123;&#125;, cssLoaderOption: &#123;&#125;, postcss: &#123; pxtransform: &#123; enable: true, config: &#123;&#125; &#125;, url: &#123; enable: true, config: &#123; limit: 10240 // 设定转换尺寸上限 &#125; &#125; &#125; &#125;, // 可以删掉很多小配置 h5: &#123; publicPath: '/', staticDirectory: 'static', webpackChain (chain, webpack) &#123;&#125;, postcss: &#123; autoprefixer: &#123; enable: true, config: &#123; browsers: [ 'last 3 versions', 'Android &gt;= 4.1', 'ios &gt;= 8' ] &#125; &#125; &#125; &#125;&#125;module.exports = function (merge) &#123; if (process.env.NODE_ENV === 'development') &#123; return merge(&#123;&#125;, config, require('./dev')) &#125; return merge(&#123;&#125;, config, require('./prod'))&#125; 具体编译配置请参考 编译配置文档。 异步编程调整Taro 2.0 中开启 async functions 支持不再需要安装 @tarojs/async-await，而是直接通过 babel 插件来获得支持。 在项目根目录下安装包 babel-plugin-transform-runtime 和 babel-runtime。 12$ yarn add babel-plugin-transform-runtime --dev$ yarn add babel-runtime 随后修改项目 babel 配置，配置插件 babel-plugin-transform-runtime。 123456789101112131415babel: &#123; sourceMap: true, presets: [['env', &#123; modules: false &#125;]], plugins: [ 'transform-decorators-legacy', 'transform-class-properties', 'transform-object-rest-spread', ['transform-runtime', &#123; \"helpers\": false, \"polyfill\": false, \"regenerator\": true, \"moduleName\": 'babel-runtime' &#125;] ]&#125; 新特性尝鲜在基于 Webpack 改造后带来全面提升的同时，2.0 也为我们带来了以下新的特性。 主编译流程钩子在 2.0 中，CLI 编译的主流程已经基于 Tapable 进行改造，并且对外暴露了 hooks 以供使用，在 Taro 编译配置中可以通过 plugins 来配置编译过程插件，调用这些 hooks 来实现自己的需求。 目前编译主流程暴露了两个钩子 beforeBuild 和 afterBuild，其中，beforeBuild 将在整体编译前触发，可以获取到编译的相关配置，同时也能进行修改；afterBuild 将在 Webpack 编译完后执行，可以获取到编译后的结果。具体使用方式如下。 首先定义一个插件 1234567891011class BuildPlugin &#123; apply (builder) &#123; builder.hooks.beforeBuild.tap('BuildPlugin', (config) =&gt; &#123; console.log(config) &#125;) builder.hooks.afterBuild.tap('BuildPlugin', (stats) =&gt; &#123; console.log(stats) &#125;) &#125;&#125; 接下来在 plugins 字段中进行配置 1234567const config = &#123; ... plugins: [ new BuildPlugin() ] ...&#125; 为小程序编译添加 Loader我们有时候可能会面临在小程序中展示 Markdown 语法文件的需求，在 WEB 开发的时候我们可以借助 Webpack 及其 Loader，实现直接引入 md 文件并读取其内容，而在小程序开发中，通过借助 Taro 2.0，我们也能很轻松地实现这一需求。 一般我们会以如下的方式，来引入一个 .md 文件。 1import mdTxt from '../../some_markdown.md' 而 .md 文件默认是不能直接被识别的，我们需要通过配置相应的 Loader 来实现对这类文件的加载解析，在 Taro 中可以通过 mini.webpackChain 来为小程序配置自定义 Webpack 配置，我们也可以通过它来配置 Loader。 12345678910111213141516171819const config = &#123; mini: &#123; webpackChain (chain) &#123; chain.merge(&#123; module: &#123; rule: &#123; myloader: &#123; test: /\\.md$/, use: [&#123; loader: 'raw-loader', options: &#123;&#125; &#125;] &#125; &#125; &#125; &#125;) &#125; &#125;&#125; 为小程序编译添加 Plugin当我们要把打包后的小程序进行发布的时候，可能会遇到小程序过大的问题，那么我们肯定迫切希望可以看到到底是哪些文件的大小造成了这个影响，我们可以通过使用 webpack-bundle-analyzer 插件对打包体积进行分析。 在 mini.webpackChain 中添加如下配置。 12345678const config = &#123; mini: &#123; webpackChain (chain, webpack) &#123; chain.plugin('analyzer') .use(require('webpack-bundle-analyzer').BundleAnalyzerPlugin, []) &#125; &#125;&#125; 在运行之后，我们就能在浏览器里看到如下分析效果。 Taro RN 依赖升级到 0.59.9在 2.0 中我们将 RN 端 React 依赖升级到 16.8.0，React Native 依赖升级到 0.59.9。主要原因： Google 要求所有 Google Play 应用支持 64 位 so 库，而现有 RN 0.55.4 依无法支持 64 位库，为配合 64 位升级，Taro RN 端的 React Native 依赖需要同步升级 React 16.8.0 是第一个支持 Hook 的版本，React Native 从 0.59 版本开始支持 Hook，此前社区一直在呼吁对 RN 0.55.4 进行升级以直接支持 Hook 的写法 本次 RN 端属于无缝升级，原有的写法和配置均不变，如果使用 taro-native-shell 的，选择 0.59.9 分支即可；在原生应用集成 RN 的，需要自行升级 React Native 依赖到 0.59.9。 未来与展望正如前文所提到的，Taro 2.0 只是一个开始。 在 10 年代最后一场 GMTC 全球大前端技术大会上，Taro 团队向大家展示了 小程序跨框架开发的探索与实践 的艰辛旅程，同时也提前曝光了正在紧密开发中的 Taro Next。 那是一个完全区别于以往的版本，一条与现在 Taro 截然不同的道路，预示着 Taro 正在革自己的命。 节物风光不相待，桑田碧海须臾改。 20 年代呼啸而来，下一个 10 年，很多框架都会死去，很多技术也会焕然而生，没有什么是不变的，唯一不变的只有变化，我们能做的也只能是拥抱变化。","pubDate":"Wed, 08 Jan 2020 12:05:00 GMT","guid":"https://aotu.io/notes/2020/01/08/taro-2-0/","category":"Web开发"},{"title":"GMTC |《小程序跨框架开发的探索与实践》演讲全文","link":"https://aotu.io/notes/2020/01/02/gmtc/","description":"前言：随着小程序开发的热度上升，小程序开发框架也层出不穷。但目前每个框架都会绑定一个专属 DSL，如类 React 或者类 Vue，在一个框架内，开发者无法根据团队技术栈自由选择 DSL，同时也无法共享框架本身的生态与工具。 本次分享将为大家介绍 Taro 如何将各种语法的前端框架运行在小程序上，讨论一个框架支持多 DSL 的实现探索，使得开发者可以使用任意热门框架/语法/DSL 来编写小程序应用，同时复用相关生态。 小程序开发的历程2017 年 1 月 9 日凌晨，万众期待的微信小程序正式上线。 在此之前，京东投入一个前端小团队，经过一个月的封闭式开发，以一周一个版本的速度进行迭代，终于在第一时间发布了自己的 「京东购物」 小程序，尽管功能和界面现在看起来有些简陋，但在当时是完全符合微信小程序「触手可及，用完即走」的理念。 当然，随着整个项目的不断迭代，现在的 「京东购物」小程序在设计、交互以及功能复杂度已经全面向 APP 端看齐，这里面的工程化实践已经由 刘慧敏 老师在 GMTC 全球大前端技术大会（北京站）2019 进行过分享，有兴趣的可以下载 PPT：京东购物小程序工程化之路。 当时的微信小程序的开发存在一些缺点，比如依赖管理混乱、工程化流程落后、ES Next 支持不完善、命名规范不统一等。这些问题在现在看来都已经有了各种官方或非官方的解决办法，但是在当时小程序开发的探索阶段，这些问题都是一些痛点问题。 有句话我个人特别喜欢，那就是「当一门语言的能力不足，而用户的运行环境又不支持其它选择的时候，这门语言就会沦为 “编译目标” 语言」。 纵观整个前端的历史，无论是 CSS 预处理器的大行其道、各种模版的流行，还是 CoffeeScript 乃至 TypeScript 的诞生，都印证了这个说法，微信小程序这里也不例外。因此，各种小程序开发框架如百花齐放，层出不穷。 这些小程序开发框架最主要的区别是 DSL，这点从 logo 颜色上就可以看出来，除了滴滴的 Chameleon 是自定义 DSL 外，其余的绿色的 logo 是遵循了 Vue 语法（如 mpvue ），蓝色的 logo 是遵循了 React 的语法（如 Taro）。 在微信小程序之后，各大厂商纷纷发布了自己的小程序平台，比如：支付宝、百度、头条、QQ等，再加上快应用、网易、360、京东等，小程序的赛道越来越拥挤，开发人员需要适配的小程序平台越来越多，因此，各大小程序开发框架也纷纷进行了多端适配。 因此，站在这个时间节点反过来回顾整个小程序开发框架的进程，你会发现整个 2018 年乃至 2019 年初，小程序的开发框架主要的区别和重心在于：DSL 以及 多端适配。 Taro 的起源与初心正所谓「业务孵化技术，技术服务业务」，Taro 的诞生源自于业务需求的增加，当时我们的团队需要同时负责：京东购物，TOPLIFE 等业。团队人力资源捉襟见肘，与此同时，以上的业务都或多或少存在多端的需求，比如 微信小程序、H5、React Native(京东的主流 APP基本都内置了 React Native 渲染引擎)，而且可以预见的是，以后很有可能需要适配更多的小程序平台，而每个端开发一套代码又不现实，会导致：研发成本上升，代码维护困难。 当时我们团队自研了一款 类React 框架：Nervjs, 整个团队的技术栈因此全部转向了 React ，而当时市面上又没有一款遵循 React 语法的小程序框架，因此，我们开发了 Taro，希望能够使用 React 语法写小程序的同时，通过「Write once Run anywhere」来实现跨端的。 整个 Taro 框架从 2018 年 6 月 7 日开源至今，一致保持着高速迭代，这些迭代主要集中在三个方面： 多端适配：从一个端到多个端 开发体验：如支持 React Hooks、CSS Modules、Mobx 等 社区共建：如 Taro 论坛、Taro物料市场 等平台，以及后面发布的 社区共建计划 经过团队 一年多的努力，Taro 得到了社区的广泛认可，截止 2019年 12 月 18日，Taro 已拥有 22254 Stars 和 250 名 Contributors，社区主动提交的开发案例 150+：taro-user-cases，其中不乏多端案例。 但是尽管如此，Taro 还是存在一些问题无法解决，或者说：没那么好解决。比如：和 React DSL 强绑定、JSX 适配工作量大、社区贡献复杂等。这些问题归根到底，很大一部分是 Taro 的架构问题。 因此我们团队也一直在等待一次合适的机会，对整个架构进行一次提升，同时修复一些项目快速迭代欠下的技术债。 最主要的是，单纯的项目维护迭代已经满足不了我们团队躁动的心，我们渴望借此机会进行一次技术突破。 小程序跨框架开发的探索在讲 Taro 架构之前，我们先来回顾一下小程序的架构。 微信小程序主要分为 逻辑层 和 视图层，以及在他们之下的原生部分。逻辑层主要负责 JS 运行，视图层主要负责页面的渲染，它们之间主要通过 Event 和 Data 进行通信，同时通过 JSBridge 调用原生的 API。这也是以微信小程序为首的大多数小程序的架构。 由于原生部分对于前端开发者来说就像是一个黑盒，因此，整个架构图的原生部分可以省略。同时，我们我们对 逻辑层 和 视图层 也做一下简化，最后可以得到小程序架构图的极简版： 也就是说，只需要在逻辑层调用对应的 App()/Page() 方法，且在方法里面处理 data、提供生命周期/事件函数等，同时在视图层提供对应的模版及样式供渲染就能运行小程序了。这也是大多数小程序开发框架重点考虑和处理的部分。 Taro 当前架构Taro 当前的架构主要分为：编译时 和 运行时。 其中编译时主要是将 Taro 代码通过 Babel 转换成 小程序的代码，如：JS、WXML、WXSS、JSON。 运行时主要是进行一些：生命周期、事件、data 等部分的处理和对接。 Taro 编译时有过 Babel 插件开发经验的应该对一下流程十分熟悉，Taro 的编译时也是遵循了此流程，使用 babel-parser 将 Taro 代码解析成抽象语法树，然后通过 babel-types 对抽象语法树进行一系列修改、转换操作，最后再通过 babel-generate 生成对应的目标代码。 详情可以参考：babel-handbook 整个编译时最复杂的部分在于 JSX 编译。 我们都知道 JSX 是一个 JavaScript 的语法扩展，它的写法千变万化，十分灵活。这里我们是采用 穷举 的方式对 JSX 可能的写法进行了一一适配，这一部分工作量很大，实际上 Taro 有大量的 Commit 都是为了更完善的支持 JSX 的各种写法。 但尽管如此，我们也不可能完全覆盖所有的情况，因此还是推荐大家按照官方规范书写 React 代码，同时，我们也提供了丰富的 ESlint 插件来辅助大家书写规范的代码。 这一块我们团队内部一直有个梗：如果你使用 Taro 开发感觉 Bug 少，那说明你的 React 代码写得很规范。 Taro 运行时接下来，我们可以对比一下编译后的代码，可以发现，编译后的代码中，React 的核心 render 方法 没有了。同时代码里增加了 BaseComponent 和 createComponent ,它们是 Taro 运行时的核心。 1234567891011121314151617181920212223242526272829303132333435// 编译前import Taro, &#123; Component &#125; from '@tarojs/taro'import &#123; View, Text &#125; from '@tarojs/components'import './index.scss'export default class Index extends Component &#123; config = &#123; navigationBarTitleText: '首页' &#125; componentDidMount () &#123; &#125; render () &#123; return ( &lt;View className=‘index' onClick=&#123;this.onClick&#125;&gt; &lt;Text&gt;Hello world!&lt;/Text&gt; &lt;/View&gt; ) &#125;&#125;// 编译后import &#123;BaseComponent, createComponent&#125; from '@tarojs/taro-weapp'class Index extends BaseComponent &#123;// ... _createDate()&#123; //process state and props &#125;&#125;export default createComponent(Index) BaseComponent 大概的 UML 图如下，主要是对 React 的一些核心方法：setState、forceUpdate 等进行了替换和重写，结合前面编译后 render 方法被替换，大家不难猜出：Taro 当前架构只是在开发时遵循了 React 的语法，在代码编译之后实际运行时，和 React 并没有关系。 而 createComponent 主要作用是调用 Component() 构建页面；对接事件、生命周期等；进行 Diff Data 并调用 setData 方法更新数据。 总结因此，整个 Taro 当前架构的特点是： 重编译时，轻运行时：这从两边代码行数的对比就可见一斑。 编译后代码与 React 无关：Taro 只是在开发时遵循了 React 的语法。 直接使用 Babel 进行编译：这也导致当前 Taro 在工程化和插件方面的羸弱。 其它解决方案的架构小程序开发框架百花齐放，我们也从社区里得到了不少启发。 接下来我们来看看 遵循 vue 语法的小程序开发框架的代表：mpvue 是怎样实现的。 看过 Vue 源码的同学对上面的文件夹和架构肯定熟悉，本质上，mpvue 就是 fork 了一份 `vuejs/vue@2.4.1` 的代码，保留了 Vue runtime 能力，同时添加了小程序平台的支持。 具体在源码中的表现就是：在 Vue 源码的 platforms 文件夹下面增加了 mp 目录，在里面实现了 complier（编译时） 和 runtime （运行时）支持。 mpvue 的实现同样分为：编译时和运行时。 mpvue 编译时其中编译时做的事情和 Taro 很类似：将 Vue SFC 写法的代码编译成 小程序代码文件（JS、WXML、WXSS、JSON）。 最大的区别是 Taro 将 JSX 编译成 小程序模版，而 mpvue 是将 Vue 模版编译成 小程序模版。但是由于 Vue 模版和 小程序模版的相似性，mpvue 在这一块的工作量比 Taro 少得多。 mpvue 运行时而 mpvue 的运行时和 Vue 的运行时是强关联的，首先我们来看看 Vue 的运行时。 一个 .vue 的单文件由三部分构成: template, script, style 。 橙色路径部分, template 会在编译的过程中，在 vue-loader 中通过 ast 进行分析，最终生成一段 render 函数，执行 render 函数会生成虚拟dom树，虚拟 DOM 树是对真实 DOM 树的抽象，树中的节点被称作 vnode 。 Vue 拿到 虚拟 DOM 树之后，就可以去和上次老的 虚拟 DOM 树 做 patch diff 对比。patch 阶段之后，vue 就会使用真实的操作DOM 的方法（比如说 insertBefore , appendChild 之类的），去操作DOM结点，更新视图。 同时，绿色路径的部分，在实例化 Vue 的时候，会对数据 data 做响应式的处理，在监测到 data 发生改变时，会调用 render 函数，生成最新的虚拟 DOM 树， 接着对比老的虚拟 DOM 树进行 patch, 找出最小修改代价的 vnode 节点进行修改。 而 mpvue 的运行时，会首先将 patch 阶段的 DOM 操作相关方法置空，也就是什么都不做。其次，在创建 Vue 实例的同时，还会偷偷的调用 Page() 用于生成了小程序的 page 实例。然后 运行时的 patch 阶段会直接调用 $updateDataToMp() 方法，这个方法会获取挂在在 page 实例上维护的数据 ，然后通过 setData 方法更新到视图层。 mpvue 整体原理图也就如下： 一些总结与思考因此，和 Taro 重编译时轻运行时不同，mpvue 算是：半编译时，半运行时。这点从代码量的对比也能大致反映出来。 mpvue 的 WXML 模版和 Taro 一样，也是通过代码编译得到的；不同于 Taro 运行时和 React 无关，mpvue 本质上还是将 Vue 运行在了小程序，且实现了 `Vue@2.4.1绝大部分特性（只有极少数特性由于小程序模版的限制未能实现，如 ：filter、slot、v-html`）；且整个框架基于 Webpack 实现了较为完善的工程化。 其他小程序框架的实现原理和效果上的差异性，也带来了我们的一些思考： 编译时 OR 运行时：当初 Taro 选择重编译时的主要原因是处于性能考虑，毕竟同等条件下，编译时做的工作越多，也就意味着运行时做的工作越少，性能会更好；另外，重编译时也保证了 Taro 的代码在编译之后的可读性。但是从长远来看，计算机硬件的性能越来越冗余，如果在牺牲一点可以容忍的性能的情况下换来整个框架更大的灵活性和更好的适配性，我们认为是值得的。 模版静态编译 OR 动态构建：尽管 Taro 和 mpvue 的模版都是通过静态编译生成的，但是社区也不乏动态构建的例子，比如：Remax。 DSL 限制：我们能否实现一个小程序开发框架，摆脱 DSL 的限制？ 新架构 Taro Next 的适配与实现这一次，我们站在浏览器的角度来思考前端的本质：无论开发这是用的是什么框架，React 也好，Vue 也罢，最终代码经过运行之后都是调用了浏览器的那几个 BOM/DOM 的 API ，如：createElement、appendChild、removeChild 等。 因此，我们创建了 taro-runtime 的包，然后在这个包中实现了 一套 高效、精简版的 DOM/BOM API（下面的 UML 图只是反映了几个主要的类的结构和关系）： 然后，我们通过 Webpack 的 ProvidePlugin 插件，注入到小程序的逻辑层。 这样，在小程序的运行时，就有了 一套高效、精简版的 DOM/BOM API。 React 实现在 DOM/BOM 注入之后，理论上来说，Nerv/Preact 就可以直接运行了。但是 React 有点特殊，因为 React-DOM 包含大量浏览器兼容类的代码，导致包太大，而这部分代码我们是不需要的，因此我们需要做一些定制和优化。 在 React 16+ ，React 的架构如下： 最上层是 React 的核心部分 react-core ，中间是 react-reconciler，其的职责是维护 VirtualDOM 树，内部实现了 Diff/Fiber 算法，决定什么时候更新、以及要更新什么。 而 Renderer 负责具体平台的渲染工作，它会提供宿主组件、处理事件等等。例如 React-DOM 就是一个渲染器，负责 DOM 节点的渲染和 DOM 事件处理。 因此，我们实现了 taro-react 包，用来连接 react-reconciler 和 taro-runtime 的 BOM/DOM API： 具体的实现主要分为两步： 实现 react-reconciler 的 hostConfig 配置，即在 hostConfig 的方法中调用对应的 Taro BOM/DOM 的 API。 实现 render 函数（类似于 ReactDOM.render）方法，可以看成是创建 Taro DOM Tree 的容器。 经过上面的步骤，React 代码实际上就可以在小程序的运行时正常运行了，并且会生成 Taro DOM Tree，那么偌大的 Taro DOM Tree 怎样更新到页面呢？ 首先，我们将小程序的所有组件挨个进行模版化处理，从而得到小程序组件对应的模版，如下图就是小程序的 view 组件经过模版化处理后的样子： 然后，我们会：基于组件的 template，动态 “递归” 渲染整棵树。 具体流程为先去遍历 Taro DOM Tree 根节点的子元素，再根据每个子元素的类型选择对应的模板来渲染子元素，然后在每个模板中我们又会去遍历当前元素的子元素，以此把整个节点树递归遍历出来。 整个 Taro Next 的 React 实现流程图如下： Vue 实现别看 React 和 Vue 在开发时区别那么大，其实在实现了 BOM/DOM API 之后，它们之间的区别就很小了。 Vue 和 React 最大的区别就在于运行时的 CreateVuePage 方法，这个方法里进行了一些运行时的处理，比如：生命周期的对齐。 其他的部分，如通过 BOM/DOM 方法构建、修改 DOM Tree 及渲染原理，都是和 React 一致的。 Flutter 实现提到 Flutter ，就不得不提 Flutter Web ，Flutter Web 是在标准浏览器 API 之上实现 Flutter 的核心绘图层，本质上也是最终调用了 BOM/DOM API。因此，理论来说，也是可以进行适配的，但这一块我们并不会投入太多的精力，最终会像快应用一样交给社区来实现和维护。 更多细节接下来和大家展开聊一下 Taro Next 更多的细节实现，比如：事件、更新、生命周期。 事件首先的 Taro Next 事件，具体的实现方式如下： 在 小程序组件的模版化过程中，将所有事件方法全部指定为 调用 ev 函数，如：bindtap、bindchange、bindsubmit 等。 在 运行时实现 eventHandler 函数，和 eh 方法绑定，收集所有的小程序事件 通过 document.getElementById() 方法获取触发事件对应的 TaroNode 通过 createEvent() 创建符合规范的 TaroEvent 调用 TaroNode.dispatchEvent 重新触发事件 可以看到，Taro Next 事件本质上是基于 Taro DOM 实现了一套自己的事件机制，这样做的好处之一是，无论小程序是否支持事件的冒泡与捕获，Taro 都能支持。 更新无论是 React 还是 Vue ，最终都会调用 Taro DOM 方法，如：appendChild、insertChild 等。 这些方法在修改 Taro DOM Tree 的同时，还会调用 enqueueUpdate 方法，这个方法能获取到每一个 DOM 方法最终修改的节点路径和值，如：{root.cn.[0].cn.[4].value: &quot;1&quot;}，并通过 setData 方法更新到视图层。 可以看到，这里更新的粒度是 DOM 级别，只有最终发生改变的 DOM 才会被更新过去，相对于之前 data 级别的更新会更加精准，性能更好。 生命周期相对与其他部分大刀阔斧的升级改造，生命周期可能是变动最小的部分之一。和之前类似，生命周期的实现是在运行时维护的 App 实例 / Page 实例进行了生命周期方法的一一对应。 123456789101112131415161718const config: PageInstance = &#123; onLoad (this: MpInstance, options) &#123; //... &#125;, onUnload () &#123; //... &#125;, onShow () &#123; safeExecute('onShow') &#125;, onHide () &#123; safeExecute('onHide') &#125;, onPullDownRefresh () &#123; safeExecute('onPullDownRefresh') &#125; //...&#125; 新架构特点和之前的架构不同，Taro Next 是 近乎全运行。 新的架构基本解决了之前的遗留问题： 无 DSL 限制：无论是你们团队是 React 还是 Vue 技术栈，都能够使用 Taro 开发 模版动态构建：和之前模版通过编译生成的不同，Taro Next 的模版是固定的，然后基于组件的 template，动态 “递归” 渲染整棵 Taro DOM 树。 新特性无缝支持：由于 Taro Next 本质上是将 React/Vue 运行在小程序上，因此，各种新特性也就无缝支持了。 社区贡献更简单：错误栈将和 React/Vue 一致，团队只需要维护核心的 taro-runtime。 基于 Webpack：Taro Next 基于 Webpack 实现了多端的工程化，提供了插件功能。 性能优化前面提到，同等条件下，编译时做的工作越多，也就意味着运行时做的工作越少，性能会更好。Taro Next 的新架构变成 近乎全运行 之后，花了很多精力在性能优化上面。 再这之前。可以先看一下 Taro Next 的流程和原生小程序的流程对比。 可以发现，相比原生小程序，Taro Next 多了红色部分的带来的性能隐患，如：引入React/Vue 带来的 包的 Size 增加，运行时的损耗、Taro DOM Tree 的构建和更新、DOM data 初始化和更新。 而我们真正能做的，只有绿色部分，也就是：Taro DOM Tree 的构建和更新、DOM data 初始化和更新。 Size首先我们来看包 Size，下面的表格是 TodoMVC 的例子，在原生、Taro Old、Taro Next 等情况下的包大小对比，可以看到，引入 React/Vue 后，包大小在 Gzip 情况下大概增加了 30k 左右。 不过我们在前面一再强调：和之前模版通过编译生成的不同，Taro Next 的模版是固定的，然后基于组件的 template，动态 “递归” 渲染整棵 Taro DOM 树。也就是说，Taro Next 的 WXML 大小是有上限的。 随着项目的增加，页面越来越多，原生的项目 WXML 体积会不断增加，而 Taro Next 不会。也就是说，当页面的数量超过一个临界点时，Taro Next 的包体积可能会更小。因此，包 Size 的问题不足为虑。 DOM Tree在 Taro DOM Tree 的构建和更新阶段，我们实现了一套仅实现了高效的、精简版 DOM/BOM API，而且仅仅实现了必要的。 Github上有一个仓库 jsdom，基本上是在 Node.js 上实现了一套 Web 标准的 DOM/BOM ，这个仓库的代码在压缩前大概有 2.1M，而 Taro Next 的核心的 DOM/BOM API 代码才 1000 行不到。 因此，我们最大限度的保证了 Taro DOM Tree 构建和更新阶段的性能。 Update Date在数据更新阶段，首先前面有提到过，Taro Next 的更新是 DOM 级别的，比 Data 级别的更新更加高效，因为 Data 粒度更新实际上是有冗余的，并不是所有的 Data 的改变最后都会引起 DOM 的更新。 其次，Taro 在更新的时候将 Taro DOM Tree 的 path 进行压缩，这点也极大的提升了性能。 最终的结果是：在某些业务场景写，add、select 数据，Taro Next 的性能比原生的还要好。 taro-benchmark当然，实验的数据总归会有缺陷，最终具体的性能表现，还要靠各种复杂业务场景的检验。大家如果对 Taro Next 的性能感兴趣的，可以自行跑一下 taro-benchmark 包，对比一下结果。 我们也在一直持续的全方位优化 Taro Next 的性能，具体可以关注 Taro Next 的最新的 Commit 。 总结及展望Taro 未来规划Taro Next 将会在不久之后的 3.0 版本正式发布，支持使用 React/Vue 开发跨端小程序，然后在会在后续的迭代中拓展至其他端，并完善对应的生态。 Taro 团队还是会将支持的重点放在 React/Vue，Flutter 和 Angular 会像快应用一样，交给社区来适配和维护，快应用就是华为的 Qiyu8 和 Issacpeng 在帮我们进行适配，非常感谢他们。 同时，我们还打造了 「Taro 移动端一站式研发平台」，将先前积累的多端开发工作流和工程化的方案进行了统一，并内置了数据监控、组件市场以及可视化搭建，当前正处于内测阶段。 一点思考 业务孵化技术，技术服务业务：这也是整个 Taro 项目从创建到迭代至今最重要的、感受最深的一点。 自上而下 OR 自下而上：从开发者的角度自上而下看，React/Vue 的代码书写方式差异挺大的；然而站在浏览器的角度自下而上的看，它们的差别其实没那么大，都是调用了 BOM/DOM 那几个常用的 API。如果我们再往底层一点，站在渲染层的角度，不同平台之间的差异会不会也没那么大？比如：Flutter。 Learn Once Write AnyWhere &amp; Write Once Run AnyWhere：很多开发者更喜欢 React 提出的Learn Once Write AnyWhere，而我们 Taro 的口号是 Write Once Run AnyWhere，这一点也导致我们经常被人喷，这里说一点我自己的想法：Learn Once Write AnyWhere其实本质上对开发者更友好，比如开发者只需要学习 React 技术栈，就可以开发 Web/移动端 应用，但是对项目就没那么友好了，每个项目都得维护一份代码；而 Write Once Run AnyWhere 是对开发者没那么友好（适配的端越多，适配的成本必然也会水涨船高，对开发者要求也很变高），但是根据我们的实践，对项目会更友好，「一套代码，多端适配」。当然，这里适配的粒度，并不一定是项目级别的，其实在我们的具体实践中，有相当一部分是：业务级甚至是页面级的。 写在最后正所谓「单丝不成线，独木不成林」，Taro 发展至今早已不在属于单一团队的项目了，而是整个 Taro 开发社区共同的项目。 最后，还是借此机会感谢一些社区所有帮助过 Taro 的成长的人，特别是 Taro 的贡献者们，非常感谢！ 同时也感谢受邀成为 TaroUI 核心维护人员的 Garfield550 (小姐姐)、梁音、ShaoQian Liu，他们将支撑起 TaroUI 的后续迭代与维护。 当然还有在社区中乐于助人、积极贡献的 zacksleo 、Jay Fong、loveonelong、lolipop99、波仔糕、原罪、lentoo 、白领夏公子 、YuanQuan、 tourze、 lingxiaoZhu 等等。 此外，还要感谢一直默默为 Taro 发展提供宝贵建议的研发团队：腾讯云、数字广东、腾讯CDC、网易严选、华为开源团队、招联消费金融等等。 长风破浪会有时，直挂云帆济沧海。 欢迎关注凹凸实验室博客：aotu.io 或者关注凹凸实验室公众号（AOTULabs），不定时推送文章：","pubDate":"Thu, 02 Jan 2020 10:00:00 GMT","guid":"https://aotu.io/notes/2020/01/02/gmtc/","category":"Web开发"},{"title":"羚珑项目自动化测试方案实践","link":"https://aotu.io/notes/2019/12/05/ling-testing-project/","description":"分享内容及技术栈本文将分享结合羚珑项目自身情况搭建的测试工作流的实践经验，针对于 Node.js 服务端应用的工具方法和接口的单元测试、集成测试等。实践经验能给你带来： 利用 Jest 搭建一套开发体验友好的测试工作流。 书写一个高效的单元测试用例，及集成测试用例。 利用封装技术实现模块间的分离，简化测试代码。 使用 SuperTest 完成应用进程与测试进程的合并。 创建高效的数据库内存服务，实现彼此隔离的测试套件运行机制。 了解模拟（Mock）、快照（snapshot）与测试覆盖率等功能的使用。 理解 TDD 与 BDD。 … 文中涉及的基础技术栈有（需要了解的知识）： TypeScript: JavaScript 语言的超集，提供类型系统和新 ES 语法支持。 SuperTest: HTTP 代理及断言工具。 MongoDB: NoSQL 分布式文件存储数据库。 Mongoose: MongoDB 对象关系映射操作库（ORM）。 Koa: 基础 Web 应用程序框架。 Jest: 功能丰富的 JavaScript 测试框架。 lodash: JavaScript 工具函数库。 关于羚珑 羚珑是京东旗下智能设计平台，提供在线设计服务，主要包括大类如： 图片设计：快速合成广告图，主图，公众号配图，海报，传单，物流面单等线上与线下设计服务。 视频设计：快速合成主图视频，抖音短视频，自定义视频等设计服务。 页面设计：快速搭建活动页，营销页，小游戏，小程序等设计服务。 实用工具：批量抠图、改尺寸、配色、加水印等。 基于行业领先技术，为商家、用户提供丰富的设计能力，实现快速产出。 羚珑架构及测试框架选型先介绍下羚珑项目的架构，方便后续的描述和理解。羚珑项目采用前后端分离的机制，前端采用 React Family 的基础架构，再加上 Next.js 服务端渲染以提供更好的用户体验及 SEO 排名。后端架构则如下图所示，流程大概是浏览器或第三方应用访问项目 Nginx 集群，Nginx 集群再通过负载均衡转发到羚珑应用服务器，应用服务器再通过对接外部服务或内部服务等，或读写缓存、数据库，逻辑处理后通过 HTTP 返回到前端正确的数据。 主流测试框架对比接下来，根据项目所需我们对比下当下 Node.js 端主流的测试框架。 Jest Mocha AVA Jasmine GitHub Stars 28.5K 18.7K 17.1K 14.6K GitHub Used by 1.5M 926K 46.6K 5.3K 文档友好 优秀 良好 良好 良好 模拟功能（Mock） 支持 外置 外置 外置 快照功能（Snapshot） 支持 外置 支持 外置 支持 TypeScript ts-jest ts-mocha ts-node jasmine-ts 详细的错误输出 支持 支持 支持 未知 支持并行与串行 支持 外置 支持 外置 每个测试进程隔离 支持 不支持 支持 未知 *文档友好：文档结构组织有序，API 阐述完整，以及示例丰富。 分析： 之所以 Mocha GitHub 使用率很高，很有可能是因为出现的最早（2011年），并由 Node.js 届顶级开发者 TJ 领导开发的（后转向Go语言），所以早期项目选择了 Mocha 做为测试框架，而 Jest、AVA 则是后起之秀（2014年），并且 Stars 数量都在攀升，预计新项目都会在这两个框架中挑选。 相比外置功能，内置支持可能会与框架融合的更好，理念更趋近，维护更频繁，使用更省心。 Jest 模拟功能可以实现方法模拟，定时器模拟，模块/文件依赖模拟，在实际编写测试用例中，模拟模块功能（mock modules）被常常用到，它可以确保测试用例快速响应并且不会变化无常。下文也会谈到如何使用它，为什么需要使用它。 综上，我们选择了 Jest 作为基础测试框架。 从0到1落地实践Jest 框架配置接下来，我们从 0 到 1 开始实践，首先是搭建测试流，虽然 Jest 可以达到开箱即用，然而项目架构不尽相同，大多时候需要根据实际情况做些基础配置工作。以下是根据羚珑项目提取出来的简化版项目目录结构，如下。 123456789101112├─ dist # TS 编译结果目录├─ src # TS 源码目录│ ├─ app.ts # 应用主文件，类似 Express 框架的 /app.js 文件│ └─ index.ts # 应用启动文件，类似 Express 框架的 /bin/www 文件├─ test # 测试文件目录│ ├─ @fixtures # 测试固定数据│ ├─ @helpers # 测试工具方法│ ├─ module1 # 模块1的测试套件集合│ │ └─ test-suite.ts # 测试套件，一类测试用例集合│ └─ module2 # 模块2的测试套件集合├─ package.json └─ yarn.lock 这里有两个小点： 以 @ 开头的目录，我们定义为特殊文件目录，用于提供些测试辅助工具方法、配置文件等，平级的其他目录则是测试用例所在的目录，按业务模块或功能划分。以 @ 开头可以清晰的显示在同级目录最上方，很容易开发定位，凑巧也方便了编写正则匹配。 test-suite.ts 是项目内最小测试文件单元，我们称之为测试套件，表示同一类测试用例的集合，可以是某个通用函数的多个测试用例集合，也可以是一个系列的单元测试用例集合。 首先安装测试框架。 1yarn add --dev jest ts-jest @types/jest 因为项目是用 TypeScript 编写，所以这里同时安装 ts-jest @types/jest。然后在根目录新建 jest.config.js 配置文件，并做如下小许配置。 123456789101112131415module.exports = &#123; // preset: 'ts-jest', globals: &#123; 'ts-jest': &#123; tsConfig: 'tsconfig.test.json', &#125;, &#125;, testEnvironment: 'node', roots: ['&lt;rootDir&gt;/src/', '&lt;rootDir&gt;/test/'], testMatch: ['&lt;rootDir&gt;/test/**/*.ts'], testPathIgnorePatterns: ['&lt;rootDir&gt;/test/@.+/'], moduleNameMapper: &#123; '^~/(.*)': '&lt;rootDir&gt;/src/$1', &#125;,&#125; preset: 预设测试运行环境，多数情况设置为 ts-jest 即可，如果需要为 ts-jest 指定些参数，如上面指定 TS 配置为 tsconfig.test.json，则需要像上面这样的写法，将 ts-jest 挂载到 globals 属性上，更多配置可以移步其官方文档，这里。 testEnvironment: 基于预设再设置测试环境，Node.js 需要设置为 node，因为默认值为浏览器环境 jsdom。 roots: 用于设定测试监听的目录，如果匹配到的目录的文件有所改动，就会自动运行测试用例。&lt;rootDir&gt; 表示项目根目录，即与 package.json 同级的目录。这里我们监听 src 和 test 两个目录。 testMatch: Glob 模式设置匹配的测试文件，当然也可以是正则模式，这里我们匹配 test 目录下的所有文件，匹配到的文件才会当做测试用例执行。 testPathIgnorePatterns: 设置已经匹配到的但需要被忽略的文件，这里我们设置以 @ 开头的目录及其所有文件都不当做测试用例。 moduleNameMapper: 这个与 TS paths 和 Webpack alias 雷同，用于设置目录别名，可以减少引用文件时的出错率并且提高开发效率。这里我们设置以 ~ 开头的模块名指向 src 目录。 第一个单元测试用例搭建好测试运行环境，于是便可着手编写测试用例了，下面我们编写一个接口单元测试用例，比方说测试首页轮播图接口的正确性。我们将测试用例放在 test/homepage/carousel.ts 文件内，代码如下。 1234567891011121314151617181920212223242526import &#123; forEach, isArray &#125; from 'lodash’import &#123; JFSRegex, URLRegex &#125; from '~/utils/regex'import request from 'request-promise'const baseUrl = 'http://ling-dev.jd.com/server/api'// 声明一个测试用例test('轮播图个数应该返回 5，并且数据正确', async () =&gt; &#123; // 对接口发送 HTTP 请求 const res = await request.get(baseUrl + '/carousel/pictures') // 校验返回状态码为 200 expect(res.statusCode).toBe(200) // 校验返回数据是数组并且长度为 5 expect(isArray(res.body)).toBe(true) expect(res.body.length).toBe(5) // 校验数据每一项都是包含正确的 url, href 属性的对象 forEach(res.body, picture =&gt; &#123; expect(picture).toMatchObject(&#123; url: expect.stringMatching(JFSRegex), href: expect.stringMatching(URLRegex), &#125;) &#125;)&#125;) 编写好测试用例后，第一步需要启动应用服务器： 第二步运行测试，在命令行窗口输入：npx jest，如下图可以看到用例测试通过。 当然最佳实践则是把命令封装到 package.json 里，如下： 123456&#123; \"scripts\": &#123; \"test\": \"jest\", \"test:watch\": \"jest --watch\", &#125;&#125; 之后便可使用 yarn test 来运行测试，通过 yarn test:watch 来启动监听式测试服务。 SuperTest 增强虽然上面已经完成基本的测试流程开发，但很明显的一个问题是每次运行测试，我们需要先启动应用服务，共启动两个进程，并且需要提前配置 ling-dev.jd.com 指向 127.0.0.1:3800，这是一个繁琐的过程。所以我们引入了 SuperTest，它可以把应用服务集成到测试服务一起启动，并且不需要指定 HTTP 请求的主机地址。 我们封装一个公共的 request 方法，将它放在 @helpers/agent.ts 文件内，如下。 12345import http from 'http'import supertest from 'supertest'import app from '~/app'export const request = supertest(http.createServer(app.callback())) 解释： 使用 app.callback() 而不是 app.listen()，是因为它可以将同一个 app 同时作为 HTTP 和 HTTPS 或多个地址。app.callback() 返回适用于 http.createServer() 方法的回调函数来处理请求。 之后，http.createServer() 创建一个未监听的 HTTP 对象给 SuperTest，当然 SuperTest 内部也会调用 listen(0) 这样的特殊端口，让操作系统提供可用的随机端口来启动应用服务器。 所以上面的测试用例我们可以改写成这样： 1234567891011import &#123; forEach, isArray &#125; from 'lodash’import &#123; JFSRegex, URLRegex &#125; from '~/utils/regex'// 引入公共的 request 方法import &#123; request &#125; from '../@helpers/agent'test('轮播图个数应该返回 5，并且数据正确', async () =&gt; &#123; const res = await request.get('/api/carousel/pictures') expect(res.status).toBe(200) // 同样的校验...&#125;) 因为 SuperTest 内部已经帮我们包装好了主机地址并自动启动应用服务，所以请求接口时只需书写具体的接口，如 /api/carousel/pictures，也只需运行一条命令 yarn test，就可以完成整个测试工作。 数据库内存服务项目架构中可以看到数据库使用的是 MongoDB，在测试时，几乎所有的接口都需要与数据库连接。此时可通过环境变量区分并新建 test 数据库，用于运行测试用例。有点不好的是测试套件执行完成后需要对 test 数据库进行清空，以避免脏数据影响下个测试套件，尤其是在并发运行时，需要保持数据隔离。 使用 MongoDB Memory Server 是更好的选择，它会启动独立的 MongoDB 实例（每个实例大约占用非常低的 7MB 内存），而测试套件将运行在这个独立的实例里。假如并发为 3，那就创建 3 个实例分别运行 3 个测试套件，这样可以很好的保持数据隔离，并且数据都保存在内存中，这使得运行速度会非常快，当测试套件完成后则自动销毁实例。 接下来我们把 MongoDB Memory Server 引入实际测试中，最佳方式是把它写进 Jest 环境配置里，这样只需要一次书写，自动运行在每个测试套件中。所以替换 jest.config.js 配置文件的 testEnvironment 为自定义环境 &lt;rootDir&gt;/test/@helpers/jest-env.js。 编写自定义环境 @helpers/jest-env.js： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const NodeEnvironment = require('jest-environment-node')const &#123; MongoMemoryServer &#125; = require('mongodb-memory-server')const child_process = require('child_process')// 继承 Node 环境class CustomEnvironment extends NodeEnvironment &#123; // 在测试套件启动前，获取本地开发 MongoDB Uri 并注入 global 对象 async setup() &#123; const uri = await getMongoUri() this.global.testConfig = &#123; mongo: &#123; uri &#125;, &#125; await super.setup() &#125;&#125;async function getMongoUri() &#123; // 通过 which mongod 命令拿到本地 MongoDB 二进制文件路径 const mongodPath = await new Promise((resolve, reject) =&gt; &#123; child_process.exec( 'which mongod', &#123; encoding: 'utf8' &#125;, (err, stdout, stderr) =&gt; &#123; if (err || stderr) &#123; return reject( new Error('找不到系统的 mongod，请确保 `which mongod` 可以指向 mongod') ) &#125; resolve(stdout.trim()) &#125; ) &#125;) // 使用本地 MongoDB 二进制文件创建内存服务实例 const mongod = new MongoMemoryServer(&#123; binary: &#123; systemBinary: mongodPath &#125;, &#125;) // 得到创建成功的实例 Uri 地址 const uri = await mongod.getConnectionString() return uri&#125;// 导出自定义环境类module.exports = CustomEnvironment Mongoose 中便可以这样连接： 1234await mongoose.connect((global as any).testConfig.mongo.uri, &#123; useNewUrlParser: true, useUnifiedTopology: true,&#125;) 当然在 package.json 里需要禁用 MongoDB Memory Server 去下载二进制包，因为上面已经使用了本地二进制包。 12345678\"config\": &#123; \"mongodbMemoryServer\": &#123; \"version\": \"4.0\", // 禁止在 yarn install 时下载二进制包 \"disablePostinstall\": \"1\", \"md5Check\": \"1\" &#125;&#125; 登录功能封装与使用大多时候接口是需要登录后才能访问的，所以我们需要把整块登录功能抽离出来，封装成通用方法，同时借此初始化一些测试专用数据。 为了使 API 易用，我希望登录 API 长这样： 1234567891011import &#123; login &#125; from '../@helpers/login'// 调用登录方法，根据传递的角色创建用户，并返回该用户登录的 request 对象。// 支持多参数，根据参数不同自动初始化测试数据。const request = await login(&#123; role: 'user',&#125;)// 使用已登录的 request 对象访问需要登录的用户接口，// 应当是登录态，并正确返回当前登录的用户信息。const res = await request.get('/api/user/info') 开发登录方法： 123456// @helpers/agent.ts // 新添加 makeAgent 方法export function makeAgent() &#123; // 使用 supertest.agent 支持 cookie 持久化 return supertest.agent(http.createServer(app.callback()))&#125; 123456789101112131415161718192021222324252627282930// @helpers/login.tsimport &#123; assign, cloneDeep, pick &#125; from 'lodash'import &#123; makeAgent &#125; from './agent'export async function login(userData: UserDataType): Promise&lt;RequestAgent&gt; &#123; userData = cloneDeep(userData) // 如果没有用户名，自动创建用户名 if (!userData.username) &#123; userData.username = chance.word(&#123; length: 8 &#125;) &#125; // 如果没有昵称，自动创建昵称 if (!userData.nickname) &#123; userData.nickname = chance.word(&#123; length: 8 &#125;) &#125; // 得到支持 cookie 持久化的 request 对象 const request: any = makeAgent() // 发送登录请求，这里为测试专门设计一个登录接口 // 包含正常登录功能，但还会根据传参不同初始化测试专用数据 const res = await request.post('/api/login-test').send(userData) // 将登录返回的数据赋值到 request 对象上 assign(request, pick(res.body, ['user', 'otherValidKey...'])) // 返回 request 对象 return request as RequestAgent&#125; 实际用例中就像上面示例方式使用。 模拟功能使用从项目架构中可以看到项目也会调用较多外部服务。比方说创建文件夹的接口，内部代码需要调用外部服务去鉴定文件夹名称是否包含敏感词，就像这样： 1234567import &#123; detectText &#125; from '~/utils/detect'// 调用外部服务检测文件夹名称是否包含敏感词const &#123; ok, sensitiveWords &#125; = await detectText(folderName)if (!ok) &#123; throw new Error(`检测到敏感词: $&#123;sensitiveWords&#125;`)&#125; 实际测试的时候并不需要所有测试用例运行时都调用外部服务，这样会拖慢测试用例的响应时间以及不稳定性。我们可以建立个更好的机制，新建一个测试套件专门用于验证 detectText 工具方法的正确性，而其他测试套件运行时 detectText 方法直接返回 OK 即可，这样既保证了 detectText 方法被验证到，也保证了其他测试套件得到快速响应。 模拟功能（Mock）就是为这样的情景而诞生的。我们只需要在 detectText 方法的路径 utils/detect.ts 同级新建__mocks__/detect.ts 模拟文件即可，内容如下，直接返回结果： 123456export async function detectText( text: string): Promise&lt;&#123; ok: boolean; sensitive: boolean; sensitiveWords?: string &#125;&gt; &#123; // 删除所有代码，直接返回 OK return &#123; ok: true, sensitive: false &#125;&#125; 之后每个需要模拟的测试套件顶部加上下面一句代码即可。 1jest.mock('~/utils/detect.ts') 在验证 detectText 工具方法的测试套件里，则只需 jest.unmock 即可恢复真实的方法。 1jest.unmock('~/utils/detect.ts') 当然应该把 jest.mock 写在 setupFiles 配置里，因为需要模拟的测试套件占绝大多数，写在配置里会让它们在运行前自动加载该文件，这样开发就不必每处测试套件都加上一段同样的代码，可以有效提高开发效率。 12// jest.config.jssetupFiles: ['&lt;rootDir&gt;/test/@helpers/jest-setup.ts'] 12// @helpers/jest-setup.tsjest.mock('~/utils/detect.ts') 模拟功能还有方法模拟，定时器模拟等，可以查阅其文档了解更多示例。 快照功能使用快照功能（Snapshot）可以帮我们测试大型对象，从而简化测试用例。 举个例子，项目的模板解析接口，该接口会将 PSD 模板文件进行解析，然后吐出一个较大的 JSON 数据，如果挨个校验对象的属性是否正确可能很不理想，所以可以使用快照功能，就是第一次运行测试用例时，会把 JSON 数据存储到本地文件，称之为快照文件，第二次运行时，就会将第二次返回的数据与快照文件进行比较，如果两个快照匹配，则表示测试成功，反之测试失败。 而使用方式很简单： 12345// 请求模板解析接口const res = await request.post('/api/secret/parser')// 断言快照是否匹配expect(res.body).toMatchSnapshot() 更新快照也是敏捷的，运行命令 jest --updateSnapshot 或在监听模式输入 u 来更新。 集成测试集成测试的概念是在单元测试的基础上，将所有模块按照一定要求或流程关系进行串联测试。比方说，一些模块虽然能够单独工作，但并不能保证连接起来也能正常工作，一些局部反映不出来的问题，在全局上很可能暴露出来。 因为测试框架 Jest 对于每个测试套件是并行运行的，而套件内的用例则是串行运行的，所以编写集成测试很方便，下面我们用文件夹的使用流程示例如何完成集成测试的编写。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import &#123; request &#125; from '../@helpers/agent'import &#123; login &#125; from '../@helpers/login'const urlCreateFolder = '/api/secret/folder' // POSTconst urlFolderDetails = '/api/secret/folder' // GETconst urlFetchFolders = '/api/secret/folders' // GETconst urlDeleteFolder = '/api/secret/folder' // DELETEconst urlRenameFolder = '/api/secret/folder/rename' // PUTconst folders: ObjectAny[] = []let globalReq: ObjectAnytest('没有权限创建文件夹应该返回 403 错误', async () =&gt; &#123; const res = await request.post(urlCreateFolder).send(&#123; name: '我的文件夹', &#125;) expect(res.status).toBe(403)&#125;)test('确保创建 3 个文件夹', async () =&gt; &#123; // 登录有权限创建文件夹的用户，比如设计师 globalReq = await login(&#123; role: 'designer' &#125;) for (let i = 0; i &lt; 3; i++) &#123; const res = await globalReq.post(urlCreateFolder).send(&#123; name: '我的文件夹' + i, &#125;) // 将创建成功的文件夹置入 folders 常量里 folders.push(res.body) expect(res.status).toBe(200) // 更多验证规则... &#125;&#125;)test('重命名第 2 个文件夹', async () =&gt; &#123; const res = await globalReq.put(urlRenameFolder).send(&#123; id: folders[1].id, name: '新文件夹名称', &#125;) expect(res.status).toBe(200)&#125;)test('第 2 个文件夹的名称应该是【新文件夹名称】', async () =&gt; &#123; const res = await globalReq.get(urlFolderDetails).query(&#123; id: folders[1].id, &#125;) expect(res.status).toBe(200) expect(res.body.name).toBe('新文件夹名称') // 更多验证规则...&#125;)test('获取文件夹列表应该返回 3 条数据', async () =&gt; &#123; // 与上雷同，鉴于代码过多，先行省略...&#125;)test('删除最后一个文件夹', async () =&gt; &#123; // 与上雷同，鉴于代码过多，先行省略...&#125;)test('再次获取文件夹列表应该返回 2 条数据', async () =&gt; &#123; // 与上雷同，鉴于代码过多，先行省略...&#125;) 测试覆盖率测试覆盖率是对测试完成程度的评测，基于文件被测试的情况来反馈测试的质量。 运行命令 jest --coverage 即可生成测试覆盖率报告，打开生成的 coverage/lcov-report/index.html 文件，各项指标一览无余。因为 Jest 内部使用 Istanbul 生成覆盖率报告，所以各项指标依然参考 Istanbul。 持续集成写完这么多测试用例之后，或者是开发完功能代码后，我们是不是希望每次将代码推送到托管平台，如 GitLab，托管平台能自动帮我们运行所有测试用例，如果测试失败就邮件通知我们修复，如果测试通过则把开发分支合并到主分支？ 答案是必须的。这就与持续集成（Continuous Integration）不谋而合，通俗的讲就是经常性地将代码合并到主干分支，每次合并前都需要运行自动化测试以验证代码的正确性。 所以我们配置一些自动化测试任务，按顺序执行安装、编译、测试等命令，测试命令则是运行编写好的测试用例。一个 GitLab 的配置任务（.gitlab-ci.yml）可能像下面这样，仅作参考。 123456789101112131415161718192021222324252627# 每个 job 之前执行的命令before_script: - echo \"`whoami` ($0 $SHELL)\" - echo \"`which node` (`node -v`)\" - echo $CI_PROJECT_DIR# 定义 job 所属 test 阶段及执行的命令等test: stage: test except: - test cache: paths: - node_modules/ script: - yarn - yarn lint - yarn test# 定义 job 所属 deploy 阶段及执行的命令等deploy-stage: stage: deploy only: - test script: - cd /app - make BRANCH=origin/$&#123;CI_COMMIT_REF_NAME&#125; deploy-stage 持续集成的好处： 快速发现错误。 防止分支大幅偏离主干分支。 让产品可以快速迭代，同时还能保持高质量。 TDD与BDD引入TDD 全称测试驱动开发（Test-driven development），是敏捷开发中的一种设计方法论，强调先将需求转换为具体的测试用例，然后再开发代码以使测试通过。 BDD 全称行为驱动开发（Behavior-driven development），也是一种敏捷开发设计方法论，它没有强调具体的形式如何，而是强调【作为什么角色，想要什么功能，以便收益什么】这样的用户故事指定行为的论点。 两者都是很好的开发模式，结合实际情况，我们的测试更像是 BDD，不过并没有完全摒弃 TDD，我们的建议是如果觉得先写测试可以帮助更快的写好代码，那就先写测试，如果觉得先写代码再写测试，或一边开发一边测试更好，则采用自己的方式，而结果是编码功能和测试用例都需要完成，并且运行通过，最后通过 Code Review 对代码质量做进一步审查与把控。 笔者称之为【师夷长技，聚于自身】：结合项目自身的实际情况，灵活变通，形成一套适合自身项目发展的模式驱动开发。 结论自动化测试提供了一种有保障的机制检测整个系统，可以频繁地进行回归测试，有效提高系统稳定性。当然编写与维护测试用例需要耗费一定的成本，需要考虑投入与产出效益之间的平衡。","pubDate":"Thu, 05 Dec 2019 02:00:00 GMT","guid":"https://aotu.io/notes/2019/12/05/ling-testing-project/","category":"Web开发"},{"title":"前端也要懂一点 MongoDB Schema 设计","link":"https://aotu.io/notes/2019/12/04/6-Rules-of-Thumb-for-MongoDB-Schema-Design/","description":"翻译自 MongoDB 官方博客： 6 Rules of Thumb for MongoDB Schema Design: Part 1 6 Rules of Thumb for MongoDB Schema Design: Part 2 6 Rules of Thumb for MongoDB Schema Design: Part 3 时间仓促，水平有限，难免有遗漏和不足，还请不吝指正。 “我有很多 SQL 的开发经验，但是对于 MongoDB 来说，我只是个初学者。 我该如何在数据库里实现 One-to-N 的关系? ” 这是我从参加 MongoDB office hours 的用户那里得到的最常见的问题之一。 对于这个问题，我无法提供一个简单明了的答案，因为在 MongoDB 里，有很多种方法可以实现 One-to-N 关系。 Mongodb 拥有丰富且细致入微的词汇表，用来表达在 SQL 中精简的术语 One-to-N 所包含的内容。接下来让我带你遍历一下 使用 Mongodb 实现 One-to-N 关系的各种方式。 这一块涉及到的内容很多，因此我把它分成三部分。 在第一部分中，我将讨论建立 One-to-N 关系模型的三种基本方法。 在第二部分中，我将介绍更复杂的模式设计（schema designs），包括 反规范化（denormalization）和 双向引用（two-way referencing）。 在最后一部分，我将回顾一系列的选型，并给出一些建议和原则，保证你在创建 One-to-N 关系时，从成千上万的选择中做出正确的选择。 Part 1许多初学者认为，在 MongoDB 中建立 One-to-N 模型的唯一方法是在父文档中嵌入一组 子文档（sub-documents），但事实并非如此。 你可以嵌入一个文档，并不意味着你应该嵌入一个文档。（PS：这也是我们写代码的原则之一：You can doesn’t mean you should ） 在设计 MongoDB 模式时，您需要先考虑在使用 SQL 时从未考虑过的问题：关系（relationship）的基数（cardinality）是什么？ 简而言之: 你需要用更细微的差别来描述你的 One-to-N 关系: 是 one-to-few、one-to-many 还是 one-to-squillions ？ 根据它是哪一个，你可以使用不同的方式来进行关系建模。 Basics: Modeling One-to-Fewone-to-few 的一个例子通常是一个人的地址。 这是一个典型的使用 嵌入（embedding）的例子 – 你可以把地址放在 Person 对象的数组中： 123456789&gt; db.person.findOne()&#123; name: 'Kate Monster', ssn: '123-456-7890', addresses : [ &#123; street: '123 Sesame St', city: 'Anytown', cc: 'USA' &#125;, &#123; street: '123 Avenue Q', city: 'New York', cc: 'USA' &#125; ]&#125; 这种设计具有嵌入的所有优点和缺点：主要优点是不必执行单独的查询来获取嵌入的详细信息；主要缺点是无法将嵌入的详细信息作为 独立实体（stand-alone entities）来访问。 例如，如果您为一个任务跟踪系统建模，每个 Person 都会有一些分配给他们的任务。 在 Person 文档中嵌入任务会使 “显示明天到期的所有任务” 这样的查询比实际需要的要困难得多。 Basics: One-to-Many“one-to-many” 的一个例子可能是替换零件（parts）订购系统中的产品（products）的零部件。 每个产品可能有多达几百个替换零件，但从来没有超过几千（所有不同尺寸的螺栓、垫圈和垫圈加起来）。 这是一个很好的使用 引用（referencing）的例子 —— 您可以将零件的 ObjectIDs 放在产品文档的数组中。 (示例使用 2 字节的 ObjectIDs，以方便阅读) 每个零件都有自己的 document: 123456789&gt; db.parts.findOne()&#123; _id : ObjectID('AAAA'), partno : '123-aff-456', name : '#4 grommet', qty: 94, cost: 0.94, price: 3.99&#125; 每个产品也有自己的 document，其中包含对组成产品的各个零件的一系列 ObjectID 引用： 123456789101112&gt; db.products.findOne()&#123; name : 'left-handed smoke shifter', manufacturer : 'Acme Corp', catalog_number: 1234, parts : [ // array of references to Part documents ObjectID('AAAA'), // reference to the #4 grommet above ObjectID('F17C'), // reference to a different Part ObjectID('D2AA'), // etc ] ... 然后，您可以使用 应用程序级别的联接（application-level join）来检索特定产品的零件： 1234 // Fetch the Product document identified by this catalog number&gt; product = db.products.findOne(&#123;catalog_number: 1234&#125;); // Fetch all the Parts that are linked to this Product&gt; product_parts = db.parts.find(&#123;_id: &#123; $in : product.parts &#125; &#125; ).toArray() ; 为了高效运行，您需要在 products.catalog_number 上添加索引。 注意，零件上总是有一个索引 parts._id，这样查询通常效率很高。 这种类型的 引用（referencing）和 嵌入（embedding）相比有一系列的优点和缺点：每个零件都是一个独立的文档，因此很容易对它们进行搜索和单独更新。 使用这个模式的一个弊端是必须执行两次查询来获取有关产品零件的详细信息。 (但是在我们进入第二部分的 反规范化（denormalizing）之前，请保持这种想法。) 作为一个额外的好处，这个模式允许一个单独的零件被多个产品 使用，因此您的 One-to-N 模式就变成了 N-to-N 模式，而不需要任何 联接表（join table）！ Basics: One-to-Squillionsone-to-squillions 的一个典型例子是为不同机器收集日志消息的事件日志系统。 任何给定的 主机（hosts）都可以生成足够的日志信息（logmsg），从而超过溢出 document 16 MB 的限制，即使数组中存储的所有内容都是 ObjectID。这就是 父引用(parent-referencing) 的经典案例 —— 你有一个 host document，然后将主机的 ObjectID 存储在日志信息的 document 中。 12345678910111213&gt; db.hosts.findOne()&#123; _id : ObjectID('AAAB'), name : 'goofy.example.com', ipaddr : '127.66.66.66'&#125;&gt;db.logmsg.findOne()&#123; time : ISODate(\"2014-03-28T09:42:41.382Z\"), message : 'cpu is on fire!', host: ObjectID('AAAB') // Reference to the Host document&#125; 您可以使用（略有不同的） 应用程序级别的联接（application-level join）来查找主机最近的 5,000 条消息： 1234 // find the parent ‘host’ document&gt; host = db.hosts.findOne(&#123;ipaddr : '127.66.66.66'&#125;); // assumes unique index // find the most recent 5000 log message documents linked to that host&gt; last_5k_msg = db.logmsg.find(&#123;host: host._id&#125;).sort(&#123;time : -1&#125;).limit(5000).toArray() 回顾因此，即使在这个基本层次上，在设计 MongoDB Schema 时也需要比在设计类似的 关系模式（ Relational Schema）时考虑更多的问题。 你需要考虑两个因素： One-to-N 中 N-side 的实体是否需要独立存在？ 这种关系的基数性是什么：one-to-few 、 one-to-many、 还是 one-to-squillions ？ 基于这些因素，您可以从三种基本的 One-to-N 模式设计中选择一种： 如果基数是 one-to-few，并且不需要访问父对象上下文之外的 嵌入对象（embedded object），则将 N-side 嵌入父对象 如果基数是 one-to-many ，或者如果 N-side 对象因为任何原因应该单独存在，则使用 N-side 对象的引用数组 如果基数是 one-to-squillions，则使用 N-side 对象中对 One-side 的引用 Part 2这是我们在 MongoDB 中构建 One-to-N 关系的第二站。 上次我介绍了三种基本的模式设计: 嵌入（embedding）、子引用（child-referencing）和父引用（parent-referencing）。 我还提到了在选择这些设计时要考虑的两个因素： One-to-N 中 N-side 的实体是否需要独立存在？ 这种关系的基数性是什么: 是 one-to-few、one-to-many 还是 one-to-squillions？ 有了这些基本技术，我可以继续讨论更复杂的模式设计，包括 双向引用（two-way referencing）和 反规范化（denormalization）。 Intermediate: Two-Way Referencing如果您希望获得一些更好的引用，那么可以结合两种技术，并在 Schema 中包含两种引用样式，既有从 “one” side 到 “one” side 的引用，也有从 “many”side 到 “one” side 的引用。 例如，让我们回到任务跟踪系统。 有一个 “people” 的 collection 用于保存 Person documents，一个 “tasks” collection 用于保存 Task documents，以及来自 Person -&gt; Task 的 One-to-N 关系。 应用程序需要跟踪 Person 拥有的所有任务，因此我们需要引用 Person -&gt; Task。 使用对 Task documents 的引用数组，单个 Person document 可能看起来像这样: 1234567891011db.person.findOne()&#123; _id: ObjectID(\"AAF1\"), name: \"Kate Monster\", tasks [ // array of references to Task documents ObjectID(\"ADF9\"), ObjectID(\"AE02\"), ObjectID(\"AE73\") // etc ]&#125; 另一方面，在其他一些上下文中，这个应用程序将显示一个 Tasks 列表（例如，一个多人项目中的所有 Tasks） ，它将需要快速查找哪个人负责哪个任务。 您可以通过在 Task document 中添加对 Person 的附加引用来优化此操作。 1234567db.tasks.findOne()&#123; _id: ObjectID(\"ADF9\"), description: \"Write lesson plan\", due_date: ISODate(\"2014-04-01\"), owner: ObjectID(\"AAF1\") // Reference to Person document&#125; 这种设计具有 One-to-Many 模式的所有优点和缺点，但添加了一些内容。 在 Task document 中添加额外的 owner 引用意味着可以快速简单地找到任务的所有者，但是这也意味着如果你需要将任务重新分配给其他人，你需要执行两个更新而不是一个。 具体来说，您必须同时更新从 Person 到 Task 文档的引用，以及从 Task 到 Person 的引用。 (对于正在阅读这篇文章的关系专家来说，您是对的: 使用这种模式设计意味着不再可能通过单个 原子更新（atomic update）将一个任务重新分配给一个新的 Person。 这对于我们的任务跟踪系统来说是可行的: 您需要考虑这是否适用于您的特定场景。) Intermediate: Denormalizing With “One-To-Many” Relationships除了对关系的各种类型进行建模之外，您还可以在模式中添加 反规范化（denormalization）。 这可以消除在某些情况下执行 应用程序级联接（application-level join）的需要，但代价是在执行更新时会增加一些复杂性。 举个例子就可以说明这一点。 Denormalizing from Many -&gt; One对于产品-零件示例，您可以将零件的名称非规范化为“parts[]”数组。 作为比较，下面是未采用 反规范化（denormalization）的 Product document 版本。 123456789101112&gt; db.products.findOne()&#123; name : 'left-handed smoke shifter', manufacturer : 'Acme Corp', catalog_number: 1234, parts : [ // array of references to Part documents ObjectID('AAAA'), // reference to the #4 grommet above ObjectID('F17C'), // reference to a different Part ObjectID('D2AA'), // etc ]&#125; 而 反规范化（Denormalizing）意味着在显示 Product 的所有 Part 名称时不必执行应用程序级联接（application-level join），但是如果需要关于某个部件的任何其他信息，则必须执行该联接。 123456789101112&gt; db.products.findOne()&#123; name : 'left-handed smoke shifter', manufacturer : 'Acme Corp', catalog_number: 1234, parts : [ &#123; id : ObjectID('AAAA'), name : '#4 grommet' &#125;, // Part name is denormalized &#123; id: ObjectID('F17C'), name : 'fan blade assembly' &#125;, &#123; id: ObjectID('D2AA'), name : 'power switch' &#125;, // etc ]&#125; 虽然这样可以更容易地获得零件名称，但只需要在 应用程序级别的联接（application-level join）中增加一点 客户端（client-side）工作: 123456// Fetch the product document&gt; product = db.products.findOne(&#123;catalog_number: 1234&#125;); // Create an array of ObjectID()s containing *just* the part numbers&gt; part_ids = product.parts.map( function(doc) &#123; return doc.id &#125; ); // Fetch all the Parts that are linked to this Product&gt; product_parts = db.parts.find(&#123;_id: &#123; $in : part_ids &#125; &#125; ).toArray() ; 只有当读取和更新的比例很高时，反规范化（Denormalizing）才有意义。 如果你经常阅读非标准化（denormalized）的数据，但是很少更新，那么为了得到更有效的查询，付出更慢的更新和更复杂的更新的代价是有意义的。 随着相对于查询的更新变得越来越频繁，非规范化节省的开销会越来越少。 例如: 假设零件名称不经常更改，但手头的数量经常更改。 这意味着，尽管在 Product document 中对零件名称进行 反规范化（Denormalizing）是有意义的，但是对数量进行 反规范化（Denormalizing） 是没有意义的。 还要注意，如果对 字段（field）进行 反规范化（Denormalizing），将失去对该 字段（field）执行原子（atomic）更新和 独立（isolated）更新的能力。 就像上面的 双向引用（two-way referencing）示例一样，如果你先在 Part document 中更新零件名称，然后在 Product 文档中更新零件名称，那么将会有一个 sub-second 的时间间隔，在这个间隔中，Product document 中 反规范化（Denormalizing）的 “name”将不会是 Part document 中新的更新值。 Denormalizing from One -&gt; Many你还可以将字段从 “One” 到 “Many” 进行 反规范化（denormalize）: 1234567891011&gt; db.parts.findOne()&#123; _id : ObjectID('AAAA'), partno : '123-aff-456', name : '#4 grommet', product_name : 'left-handed smoke shifter', // Denormalized from the ‘Product’ document product_catalog_number: 1234, // Ditto qty: 94, cost: 0.94, price: 3.99&#125; 但是，如果您已经将 Product 名称 反规范化（denormalize）到 Part document 中，那么在更新 Product 名称时，您还必须更新 ‘parts’ collection 中出现的所有位置。 这可能是一个更昂贵的更新，因为您正在更新多个零件，而不是单个产品。 因此，在这种方式去规范化时，考虑 读写比（ read-to-write ratio ） 显得更为重要。 Intermediate: Denormalizing With “One-To-Squillions” Relationships你还可以对“one-to-squillions”示例进行 反规范化（denormalize）。 这可以通过两种方式之一来实现: 您可以将关于 “one” side 的信息(‘hosts’ document)放入“squillions” side(log entries) ，或者将来自 “squillions” side 的摘要信息放入 “one” side。 下面是一个将 反规范化（denormalize）转化为“squillions”的例子。 我将把主机的 IP 地址(from the ‘one’ side)添加到单独的日志消息中: 1234567&gt; db.logmsg.findOne()&#123; time : ISODate(\"2014-03-28T09:42:41.382Z\"), message : 'cpu is on fire!', ipaddr : '127.66.66.66', host: ObjectID('AAAB')&#125; 你现在查询来自某个特定 IP 地址的最新消息变得更容易了: 现在只有一个查询，而不是两个。 1&gt; last_5k_msg = db.logmsg.find(&#123;ipaddr : '127.66.66.66'&#125;).sort(&#123;time : -1&#125;).limit(5000).toArray() 事实上，如果你只想在 “one” side 存储有限数量的信息，你可以把它们全部 反规范化（denormalize）为 “squillions” side ，从而完全摆脱 “one” collection： 1234567&gt; db.logmsg.findOne()&#123; time : ISODate(\"2014-03-28T09:42:41.382Z\"), message : 'cpu is on fire!', ipaddr : '127.66.66.66', hostname : 'goofy.example.com',&#125; 另一方面，你也可以 反规范化（denormalize）到 “one” side。 让我们假设你希望在 ‘hosts’ document 中保留来自主机的最后 1000 条消息。 你可以使用 MongoDB 2.4中引入的 $each / $slice 功能来保持列表排序，并且只保留最后的1000条消息： 日志消息保存在 ‘logmsg’ collection 中以及 ‘hosts’ document 中的反规范化列表中: 这样，当消息超出 ‘hosts.logmsgs’ 数组时，它就不会丢失。 1234567891011121314151617 // Get log message from monitoring systemlogmsg = get_log_msg();log_message_here = logmsg.msg;log_ip = logmsg.ipaddr; // Get current timestampnow = new Date() // Find the _id for the host I’m updatinghost_doc = db.hosts.findOne(&#123;ipaddr : log_ip &#125;,&#123;_id:1&#125;); // Don’t return the whole documenthost_id = host_doc._id; // Insert the log message, the parent reference, and the denormalized data into the ‘many’ sidedb.logmsg.save(&#123;time : now, message : log_message_here, ipaddr : log_ip, host : host_id ) &#125;); // Push the denormalized log message onto the ‘one’ sidedb.hosts.update( &#123;_id: host_id &#125;, &#123;$push : &#123;logmsgs : &#123; $each: [ &#123; time : now, message : log_message_here &#125; ], $sort: &#123; time : 1 &#125;, // Only keep the latest ones $slice: -1000 &#125; // Only keep the latest 1000 &#125;&#125; ); 请注意，使用 projection specification ({ _id: 1}) 可以防止 MongoDB 通过网络发布整个 ‘hosts’ document。 通过告诉 MongoDB 只返回 _id 字段，我将网络开销减少到仅存储该字段所需的几个字节（再加上一点 wire protocol 开销）。 正如在 “One-to-Many” 的情况下的反规范化一样，你需要考虑读取与更新的比率。 只有当日志消息的频率与应用程序查看单个主机的所有消息的次数相关时，将日志消息反规范化到 Host 文档才有意义。 如果您希望查看数据的频率低于更新数据的频率，那么这种特殊的反规范化是一个坏主意。 回顾在这篇文章中，我已经介绍了嵌入（embed）、子引用（child-reference）和父引用（ parent-reference）的基础知识之外的其他选择。 如果使用双向引用优化了 Schema，并且愿意为不进行 原子更新（atomic updates）付出代价，那么可以使用双向引用 如果正在引用，可以将数据从 “One” side 到 “N” side，或者从 “N” side 到 “One” side 进行反规范化（denormalize） 在决定是否否否定标准时，应考虑以下因素： 无法对 反规范化（denormalization）的数据执行原子更新（atomic update） 只有当读写比例很高时，反规范化（denormalization）才有意义 下一次，我会给你一些指导方针，让你在所有这些选项中做出选择。 Part 3这是我们在 MongoDB 中建模 One-to-N 关系的最后一站。 在第一篇文章中，我介绍了建立 One-to-N 关系模型的三种基本方法。 上篇文章中，我介绍了这些基础知识的一些扩展: 双向引用（two-way referencing）和反规范化（denormalization）。 反规范化（denormalization）允许你避免某些 应用程序级别的连接（ application-level joins），但代价是要进行更复杂和昂贵的更新。 如果这些字段的读取频率远高于更新频率，则对一个或多个字段进行 反规范化（denormalization）是有意义的。 那么，我们来回顾一下: 你可以嵌入（embed）、引用（reference）“one” side，或 “N” side，或混合使用这些技术 你可以将任意多的字段反规范化（denormalize）到 “one” side 或 “N” side 特别是反规范化，给了你很多选择: 如果一段关系中有 8 个 反规范化（denormalization）的候选字段，那么有 2 的 8 次方（1024）种不同的方法去反规范化（包括根本不去进行反规范化）。 再乘以三种不同的引用方式，你就有了 3000 多种不同的方式来建立关系模型。 你猜怎么着？ 你现在陷入了 “选择悖论” —— 因为你有很多潜在的方法来建立 one-to-N 的关系模型，你选择如何建立模型只是变得更难了。。。 Rules of Thumb: Your Guide Through the Rainbow这里有一些“经验法则”来指导你进行选择： One：首选嵌入（embedding），除非有足够的的理由不这样做 Two：需要独立访问对象是不嵌入对象的一个令人信服的理由 Three：数组不应该无限制地增长。 如果在 “many” side 有几百个以上的 documents，不要嵌入它们; 如果在 “many” side 有几千个以上的文档，不要使用一个 ObjectID 引用数组。 高基数数组是不嵌入的一个令人信服的理由 Four：不要害怕 应用程序级别的连接（application-level joins）： 如果正确地使用索引并使用 projection specifier(如第2部分所示) ，那么 应用程序级别的连接（application-level joins）几乎不会比关系数据库 的 服务器端连接（server-side joins ）更昂贵 Five：考虑反规范化时的 读/写比率。 一个大多数时候会被读取但很少更新的字段是反规范化的好候选者: 如果你对一个频繁更新的字段进行反规范化，那么查找和更新所有实例的额外工作很可能会超过你从非规范化中节省的开销 Six：如何对数据建模完全取决于特定应用程序的数据访问模式。 您希望根据应用程序查询和更新数据的方式对数据进行结构化 Your Guide To The Rainbow在 MongoDB 中建模 “One-to-N” 关系时，你有各种各样的选择，因此必须仔细考虑数据的结构。 你需要考虑的主要标准是: 这种关系的基数是什么: 是 one-to-few, one-to-many 还是 one-to-squillions？ 你需要单独访问 “N” side 的对象，还是仅在父对象的上下文中访问？ 特定字段的更新与读取的比率是多少？ 你的数据结构的主要选择是： 对于 one-to-few，可以使用嵌入文档的数组 对于 one-to-many ，或者在 “N” side 必须单独存在的情况下，应该使用一个引用数组。 如果优化了数据访问模式，还可以在 “N” side 使用 父引用（parent-reference） 对于 one-to-squillions，你应该在存储 “N” side 的文档中使用 父引用（parent-reference） 一旦你确定了数据的总体结构，那么你可以通过将数据从 “One” side 反规范化到 “N” side，或者从 “N” side 反规范化到 “One” side 来反规范化跨多个文档的数据。 只有那些经常被阅读、被阅读的频率远高于被更新的频率的字段，以及那些不需要 强一致性（strong consistency）的字段，才需要这样做，因为更新非标准化的值更慢、更昂贵，而且不是原子的。 Productivity and Flexibility因此，MongoDB 使你能设计满足应用程序的需求的数据库 Schema。 你可以在 MongoDB 中构造你的数据，让它就可以很容易地适应更改，并支持你需要的查询和更新，以便最大限度地方便你的开发应用程序。 更多资料 Schema Design Consulting Services Thinking in Documents (recorded webinar) Schema Design for Time-Series Data (recorded webinar) Socialite, the Open Source Status Feed - Storing a Social Graph (recorded webinar)","pubDate":"Wed, 04 Dec 2019 08:35:59 GMT","guid":"https://aotu.io/notes/2019/12/04/6-Rules-of-Thumb-for-MongoDB-Schema-Design/","category":"全栈开发"},{"title":"京喜首页（微信购物入口）跨端开发与优化实践","link":"https://aotu.io/notes/2019/12/03/jingxi-index/","description":"背景介绍随着今年的双十一落下帷幕，京喜（原京东拼购）也迎来了首捷。双十一前夕微信购物一级入口切换为京喜小程序，项目顺利通过近亿级的流量考验，在此与大家分享一点自己参与的工作。","pubDate":"Tue, 03 Dec 2019 11:25:00 GMT","guid":"https://aotu.io/notes/2019/12/03/jingxi-index/","category":"Web开发"},{"title":"Sketch 插件开发实践","link":"https://aotu.io/notes/2019/10/31/sketch-plugin/","description":"Sketch 是非常流行的 UI 设计工具，2014年随着 Sketch V43 版本增加 Symbols 功能、开放开发者权限，吸引了大批开发者的关注。 目前 Sketch 开发有两大热门课题：① React 组件渲染成 sketch 由 airbnb 团队发起，② 使用 skpm 构建开发 Sketch 插件。 Sketch 插件开发相关资料较少且不太完善，我们开发插件过程中可以重点参考官方文档，只是有些陈旧。官方有提供 JavaScript API 借助 CocoaScript bridge 访问内部 Sketch API 和 macOS 框架进行开发插件（Sketch 53~56 版 JS API 在 native MacOS 和 Sketch API 暴露的特殊环境中运行），提供的底层 API 功能有些薄弱，更深入的就需要了解掌握 Objective-C 、 CocoaScript 、AppKit、Sketch-Headers。 Sketch 插件结构Sketch Plugin 是一个或多个 scripts 的集合，每个 script 定义一个或多个 commands。Sketch Plugin 是以 .sketchplugin 扩展名的文件夹，包含文件和子文件夹。严格来说，Plugin 实际上是 OS X package，用作为 OS X bundle。 Bundle 具有标准化分层结构的目录，其保存可执行代码和该代码使用的资源。 Plugin Bundle 文件夹结构Bundles 包含一个 manifest.json 文件，一个或多个 scripts 文件（包含用 CocoaScript 或 JavaScript 编写的脚本），它实现了 Plugins 菜单中显示的命令，以及任意数量的共享库脚本和资源文件。 12345678910mrwalker.sketchplugin Contents/ Sketch/ manifest.json shared.js Select Circles.cocoascript Select Rectangles.cocoascript Resources/ Screenshot.png Icon.png 最关键的文件是 manifest.json 文件，提供有关插件的信息。 小贴士： Sketch 插件包可以使用 skpm 在构建过程中生成，skpm 提供 Sketch 官方插件模版: skpm/skpm - The simplest possible plugin setup. (default) skpm/with-prettier - A plugin setup featuring linting with ESLint and code formatting with Prettier. skpm/with-datasupplier - A template to create DataSupplier plugins (check our blog for more info) skpm/with-webview - A template to create plugins displaying some rich UI in a WebView (check sketch-module-web-view for more info) 💁 Tip: Any Github repo with a ‘template’ folder can be used as a custom template: skpm create &lt;project-name&gt; --template=&lt;username&gt;/&lt;repository&gt; Manifest manifest.json 文件提供有关插件的信息，例如作者，描述，图标、从何处获取最新更新、定义的命令 (commands） 、调用菜单项 (menu) 以及资源的元数据。 123456789101112131415161718192021222324252627282930313233&#123; \"name\": \"Select Shapes\", \"description\": \"Plugins to select and deselect shapes\", \"author\": \"Joe Bloggs\", \"homepage\": \"https://github.com/example/sketchplugins\", \"version\": \"1.0\", \"identifier\": \"com.example.sketch.shape-plugins\", \"appcast\": \"https://excellent.sketchplugin.com/excellent-plugin-appcast.xml\", \"compatibleVersion\": \"3\", \"bundleVersion\": 1, \"commands\": [ &#123; \"name\": \"All\", \"identifier\": \"all\", \"shortcut\": \"ctrl shift a\", \"script\": \"shared.js\", \"handler\": \"selectAll\" &#125;, &#123; \"name\": \"Circles\", \"identifier\": \"circles\", \"script\": \"Select Circles.cocoascript\" &#125;, &#123; \"name\": \"Rectangles\", \"identifier\": \"rectangles\", \"script\": \"Select Rectangles.cocoascript\" &#125; ], \"menu\": &#123; \"items\": [\"all\", \"circles\", \"rectangles\"] &#125;&#125; Commands声明一组 command 的信息，每个 command 以 Dictionary 数据结构形式存在。 script : 实现命令功能的函数所在的脚本 handler : 函数名，该函数实现命令的功能。Sketch 在调用该函数时，会传入 context 上下文参数。若未指定 handler，Sketch 会默认调用对应 script 中 onRun 函数 shortcut：命令的快捷键 name：显示在 Sketch Plugin 菜单中 identifier : 唯一标识，建议用 com.xxxx.xxx 格式，不要过长 MenuSketch 加载插件会根据指定的信息，在菜单栏中有序显示命令名。 在了解了 Sketch 插件结构之后，我们再来了解一下，sketch提供的官方 API： Actions API， Javascript API。 Sketch Actions APISketch Actions API 用于监听用户操作行为而触发事件，例如 OpenDocumen（打开文档）、CloseDocument（关闭文档）、Shutdown（关闭插件）、TextChanged（文本变化）等，具体详见官网：https://developer.sketch.com/reference/action/ register Actions manifest.json 文件，配置相应 handlers。 示例：当 OpenDocument 事件被触发时调用 onOpenDocument handler 。 1234567891011121314\"commands\" : [ ... &#123; \"script\" : \"my-action-listener.js\", \"name\" : \"My Action Listener\", \"handlers\" : &#123; \"actions\": &#123; \"OpenDocument\": \"onOpenDocument\" &#125; &#125;, \"identifier\" : \"my-action-listener-identifier\" &#125; ...], my-action-listener.js 123export function onOpenDocument(context) &#123; context.actionContext.document.showMessage('Document Opened')&#125; Action Context Action 事件触发时会将 context.actionContext 传递给相应 handler。注意有些 Action 包含两个状态begin 和 finish，例如 SelectionChanged，需分别订阅 SelectionChanged.begin 和 SelectionChanged.finish，否则会触发两次事件。 Sketch JS APISketch 插件开发大概有如下三种方式：① 纯使用 CocoaScript 脚本进行开发，② 通过 Javascript + CocoaScript 的混合开发模式， ③ 通过 AppKit + Objective-C 进行开发。Sketch 官方建议使用 JavaScript API 编写 Sketch 插件，且官方针对 Sketch Native API 封装了一套 JS API，目前还未涵盖所有场景， 若需要更丰富的底层 API 需结合 CocoaScript 进行实现。通过 JS API 可以很方便的对 Sketch 中 Document、Artboard、Group、Layer 进行相关操作以及导入导出等，可能需要考虑兼容性， JS API 原理图如下： CocoaScript CocoaScript 实现 JavaScript 运行环境到 Objective-C 运行时的桥接功能，可通过桥接器编写 JavaScript 外部脚本访问内部 Sketch API 和 macOS 框架底层丰富的 API 功能。 小贴士： Mocha 实现提供 JavaScript 运行环境到 Objective-C 运行时的桥接功能已包含在CocoaScript中。 CocoaScript 建立在 Apple 的 JavaScriptCore 之上，而 JavaScriptCore 是为 Safari 提供支持的 JavaScript 引擎，使用 CocoaScript 编写代码实际上就是在编写 JavaScript。CocoaScript 包括桥接器，可以从 JavaScript 访问 Apple 的 Cocoa 框架。 借助 CocoaScript 使用 JavaScript 调 Objective-C 语法: 方法调用用 ‘.’ 语法 Objective-C 属性设置 Getter: object.name() Setter: object.setName(&#39;Sketch&#39;)，object.name=&#39;sketch&#39; 参数都放在 ‘ ( ) ’ 里 Objective-C 中 ‘ : ‘（参数与函数名分割符） 转换为 ‘ _ ‘，最后一个下划线是可选的 返回值，JavaScript 统一用 var/const/let 设置类型 注意：详细 Objective-C to JavaScript 请参考 Mocha 文档 示例: 1234567891011121314151617181920212223// oc: MSPlugin 的接口 valueForKey:onLayer:NSString * value = [command valueForKey:kAutoresizingMask onLayer:currentLayer];// cocoascript:const value = command.valueForKey_onLayer(kAutoresizingMask, currentLayer);// oc:const app = [NSApplication sharedApplication];[app displayDialog:msg withTitle:title];// cocoascript:const app = NSApplication.sharedApplication();app.displayDialog_withTitle(msg, title)// oc:const openPanel = [NSOpenPanel openPanel][openPanel setTitle: \"Choose a location…\"][openPanel setPrompt: \"Export\"];// cocoascript:const openPanel = NSOpenPanel.openPanelopenPanel.setTitle(\"Choose a location…\")openPanel.setPrompt(\"Export\") Objective-C ClassesSketch 插件系统可以完全访问应用程序的内部结构和 macOS 中的核心框架。Sketch 是用 Objective-C 构建的，其 Objective-C 类通过 Bridge (CocoaScript/mocha) 提供 Javascript API 调用，简单的了解 Sketch 暴露的相关类以及类方法，对我们开发插件非常有帮助。 使用 Bridge 定义的一些内省方法来访问以下信息： 123456789101112131415String(context.document.class()) // MSDocumentconst mocha = context.document.class().mocha()mocha.properties() // array of MSDocument specific properties defined on a MSDocument instancemocha.propertiesWithAncestors() // array of all the properties defined on a MSDocument instancemocha.instanceMethods() // array of methods defined on a MSDocument instancemocha.instanceMethodsWithAncestors()mocha.classMethods() // array of methods defined on the MSDocument classmocha.classMethodsWithAncestors()mocha.protocols() // array of protocols the MSDocument class inherits frommocha.protocolsWithAncestors() Context当输入插件定制的命令时，Sketch 会去寻找改命令对应的实现函数， 并传入 context 变量。context包含以下变量： command: MSPluginCommand 对象，当前执行命令 document: MSDocument 对象 ，当前文档 plugin: MSPluginBundle 对象，当前的插件 bundle，包含当前运行的脚本 scriptPath: NSString 当前执行脚本的绝对路径 scriptURL: 当前执行脚本的绝对路径，跟 scriptPath 不同的是它是个 NSURL 对象 selection: 一个 NSArray 对象，包含了当前选择的所有图层。数组中的每一个元素都是 MSLayer 对象 小贴士：MS 打头类名为 Sketch 封装类如图层基类 MSLayer)、文本层基类 MSTextLayer) 、位图层基类 MSBitmapLayer，NS 打头为 AppKit 中含有的类 12345678910111213141516const app = NSApplication.sharedApplication()function initContext(context) &#123; context.document.showMessage('初始执行脚本') const doc = context.document const page = doc.currentPage() const artboards = page.artboards() const selectedArtboard = page.currentArtboard() // 当前被选择的画板 const plugin = context.plugin const command = context.command const scriptPath = context.scriptPath const scriptURL = context.scriptURL const selection = context.selection // 被选择的图层&#125; Sketch 插件开发上手前面我们了解了许多 Sketch 插件开发知识，那接下来实际上手两个小例子： ① 创建辅助内容面板窗口， ② 侧边栏导航。为了方便开发，我们在开发前需先进行如下操作： 崩溃保护 当 Sketch 运行发生崩溃，它会停用所有插件以避免循环崩溃。对于使用者，每次崩溃重启后手动在菜单栏启用所需插件非常繁琐。因此可以通过如下命令禁用该特性。 1defaults write com.bohemiancoding.sketch3 disableAutomaticSafeMode true 插件缓存 通过配置启用或禁用缓存机制： 1defaults write com.bohemiancoding.sketch3 AlwaysReloadScript -bool YES 该方法对于某些场景并不适用，如设置 COScript.currentCOScript().setShouldKeepAround(true) 区块会保持常驻在内存，那么则需要通过 coscript.setShouldKeepAround(false) 进行释放。 WebView 调试 如果插件实现方案使用 WebView 做界面，可通过以下配置开启调试功能。 1defaults write com.bohemiancoding.sketch3 WebKitDeveloperExtras -bool YES 创建辅助内容面板窗口首先我们先熟悉一下 macOS 下的辅助内容面板， 如下图最左侧 NSPanel 样例， 它是有展示区域，可设置样式效果，左上角有可操作按钮的辅助窗口。 Sketch 中要创建如下内容面板，需要使用 macOS 下 AppKit 框架中 NSPanel 类，它是 NSWindow 的子类，用于创建辅助窗口。内容面板外观样式设置，可通过 NSPanel 类相关属性进行设置， 也可通过 AppKit 的NSVisualEffectView 类添加模糊的背景效果。内容区域则可通过 AppKit 的 WKWebView 类，单开 webview 渲染网页内容展示。 创建 Panel 123456789101112131415161718192021222324const panelWidth = 80;const panelHeight = 240;// Create the panel and set its appearanceconst panel = NSPanel.alloc().init();panel.setFrame_display(NSMakeRect(0, 0, panelWidth, panelHeight), true);panel.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask | NSFullSizeContentViewWindowMask);panel.setBackgroundColor(NSColor.whiteColor());// Set the panel's title and title bar appearancepanel.title = \"\";panel.titlebarAppearsTransparent = true;// Center and focus the panelpanel.center();panel.makeKeyAndOrderFront(null);panel.setLevel(NSFloatingWindowLevel);// Make the plugin's code stick around (since it's a floating panel)COScript.currentCOScript().setShouldKeepAround(true);// Hide the Minimize and Zoom buttonpanel.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);panel.standardWindowButton(NSWindowZoomButton).setHidden(true); Panel 添加模糊的背景 1234567// Create the blurred backgroundconst vibrancy = NSVisualEffectView.alloc().initWithFrame(NSMakeRect(0, 0, panelWidth, panelHeight));vibrancy.setAppearance(NSAppearance.appearanceNamed(NSAppearanceNameVibrantLight));vibrancy.setBlendingMode(NSVisualEffectBlendingModeBehindWindow);// Add it to the panelpanel.contentView().addSubview(vibrancy); Panel 插入 webview 渲染 1234567891011121314const wkwebviewConfig = WKWebViewConfiguration.alloc().init()const webView = WKWebView.alloc().initWithFrame_configuration( CGRectMake(0, 0, panelWidth, panelWidth), wkwebviewConfig)// Add it to the panelpanel.contentView().addSubview(webView);// load file URLwebview.loadFileURL_allowingReadAccessToURL( NSURL.URLWithString(url), NSURL.URLWithString('file:///')) 侧边栏导航开发我们开发复杂的 Sketch 插件，一般都要开发侧边栏导航展示插件功能按钮，点击触发相关操作。那开发侧边栏导航，我们主要使用 AppKit 中的那些类呢，有 NSStackView 、 NSBox 、NSImage、 NSImageView、NSButton 等，大致核心代码如下： 12345678910111213141516171819202122232425262728293031323334353637 // create toolbar const toolbar = NSStackView.alloc().initWithFrame(NSMakeRect(0, 0, 40, 400)) threadDictionary[SidePanelIdentifier] = toolbar toolbar.identifier = SidePanelIdentifier toolbar.setSpacing(8) toolbar.setFlipped(true) toolbar.setBackgroundColor(NSColor.windowBackgroundColor()) toolbar.orientation = 1 // add element toolbar.addView_inGravity(createImageView(NSMakeRect(0, 0, 40, 22), 'transparent', NSMakeSize(40, 22)), 1) const Logo = createImageView(NSMakeRect(0, 0, 40, 30), 'logo', NSMakeSize(40, 28)) toolbar.addSubview(Logo) const contentView = context.document.documentWindow().contentView() const stageView = contentView.subviews().objectAtIndex(0) const views = stageView.subviews() const existId = views.find(d =&gt; ''.concat(d.identifier()) === identifier) const finalViews = [] for (let i = 0; i &lt; views.count(); i++) &#123; const view = views[i] if (existId) &#123; if (''.concat(view.identifier()) !== identifier) finalViews.push(view) &#125; else &#123; finalViews.push(view) if (''.concat(view.identifier()) === 'view_canvas') &#123; finalViews.push(toolbar) &#125; &#125; &#125;// add to main Window stageView.subviews = finalViews stageView.adjustSubviews() 详细见开源代码： https://github.com/o2team/sketch-plugin-boilerplate （欢迎 star 交流） 调试当插件运行时，Sketch 将会创建一个与其关联的 JavaScript 上下文，可以使用 Safari 来调试该上下文。 在 Safari 中, 打开 Developer &gt; 你的机器名称 &gt; Automatically Show Web Inspector for JSContexts，同时启用选项 Automatically Pause Connecting to JSContext，否则检查器将在可以交互之前关闭（当脚本运行完时上下文会被销毁）。 现在就可以在代码中使用断点了，也可以在运行时检查变量的值等等。 日志JavaScriptCore 运行 Sketch 插件的环境 也有提供类似调试 JavaScript 代码打 log 的方式，我们可以在关键步骤处放入一堆 console.log/console.error 等进行落点日志查看。 有以下几种选择可以查看日志： 打开 Console.app 并查找 Sketch 日志 查看 ~/Library/Logs/com.bohemiancoding.sketch3/Plugin Output.log 文件 运行 skpm log 命令，该命令可以输出上面的文件（执行 skpm log -f 可以流式地输出日志） 使用 skpm 开发的插件，安装 sketch-dev-tools，使用 console.log 打日志查看。 SketchToolSketchTool 包含在 Sketch 中的 CLI 工具，通过 SketchTool 可对 Sketch 文档执行相关操作： 导出 artboards、layers、slices、pages、交互稿 检查 Sketch 文档 导出 Sketch 文档 JSON data Run plugins sketchtool 二进制文件位于 Sketch 应用程序包中： 1Sketch.app/Contents/Resources/sketchtool/bin/sketchtool 设置 alias ： 1alias sketchtool=\"/Applications/Sketch.app/Contents/Resources/sketchtool/bin/sketchtool\" 使用： 12345sketchtool -h # 查看帮助sketchtool export artboards path/to/document.sketch # 导出画板sketchtool dump path/to/document.sketch # 导出 Sketch 文档 JSON datasketchtool metadata path/to/document.sketch # 查看 Sketch 文档元数据sketchtool run [Plugin path] # 运行插件 注意：SketchTool 需要 OSX 10.11或更高版本。 Other Resourcessketch Plugin 开发官方文档 sketch插件开发中文文档 sketch 使用文档 sketch-utils sketch reference api Github SketchAPI react-sketchapp Sketch-Plugins-Cookbook iOS开发60分钟入门 AppKit, 构建 Sketch 的一个主要 Apple 框架 Foundation(基础), 更重要的 Apple 课程和服务 Chromeless-window","pubDate":"Thu, 31 Oct 2019 07:30:00 GMT","guid":"https://aotu.io/notes/2019/10/31/sketch-plugin/","category":"Web开发"},{"title":"2019年，你是否可以抛弃 CSS 预处理器？","link":"https://aotu.io/notes/2019/10/29/css-preprocessor/","description":"随着前端工程化的不断完善，CSS 预处理器已经成为项目中不可缺少的部分，很多人在项目技术选型阶段就会先选择一个 CSS 预处理器，绝大部分前端工程的脚手架也内置了一系列的 CSS 预处理的模版，大家已经习惯了享受 CSS 预处理器带来的书写代码的灵活流畅，反而将原生的 CSS 冷落在一旁。 可能许多前端开发人员依然觉得 CSS 预处理器属于比较新的技术，其实不然，最早的 CSS 预处理器 Sass 从 07 年诞生距今已有 12 年，相对较新的的 Stylus 也已发布 9 年了。 前端的技术栈发展突飞猛进，W3C 的 CSS 工作组也一直在持续从社区汲取营养，加快 CSS 的迭代。那么到现在为止，CSS 是否可以取代 CSS 预处理器的地位？CSS 预处理器会不会成为 CSS 过渡时期的产物呢？ W3C 介绍CSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。因此，在深入了解 CSS 规范更新进度之前，我们有必要先了解一下 W3C 及其规范制定流程。 W3C 也就是万维网联盟（World Wide Web Consortium），又称 W3C 理事会，是万维网的主要国际标准组织。为半自治非政府组织（quasi-autonomous non-governmental organisation）。由 蒂姆·伯纳斯-李（Tim Berners-Lee）于 1994年10月 于麻省理工学院 MIT 计算机科学与人工智能实验室（MIT／LCS）创立。 W3C 制定了一系列标准并督促网络应用开发者和内容提供者遵循这些标准。标准的内容包括使用语言的规范，开发中使用的导则和解释引擎的行为等等。W3C制定了包括 HTML、DOM、SVG、XML和 CSS 等的众多影响深远的标准规范。 W3C 规范制定流程因为接下来我们需要谈到一些不同阶段的 CSS 规范，因此这里有必要简单介绍一下 W3C 的规范制定流程。 按照 W3C 的 Process Document，一个推荐标准的发展需要通过不同的阶段。 其中几个主要的阶段分别为： WD 工作草案（Working draft） CR 候选推荐标准（Candidate recommendation） PR 提案推荐标准（recommendation） REC W3C推荐标准（W3C recommendation） 篇幅有限，这里就不详细展开讲解 W3C 的标准流程了，如果想了解更多关于 W3C 标准流程与组织架构 的信息，可以查看W3C标准流程与组织架构。 CSS 的历史HTML 和 CSS 是那么密不可分，以至于你可能会觉得它们是一起出现的。实际上，自 1989 年 Tim Berners Lie 发明互联网后的多年中，这个世界上都不存在一个名为 CSS 的事物（更别说 CSS 预处理器了），Web 的原始版本根本就没有提供一种装饰网页的方法。 HTML 规范虽然规定了网页中的标题、段落应该使用的标签，但是没有涉及这些内容应该以何种样式(比如大小、位置、间距、缩进等属性)呈现在浏览器中。 不过，在随后仅短短10年后，CSS就被一个现代的 Web 社区全面采用，这期间的发生了一系列有趣的故事，有兴趣的可以看一下 A Look Back at the History of CSS。 CSS1于1994年，Håkon Wium Lie (哈肯·维姆·莱) 和 Bert Bos (伯特·波斯) 合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。 1996年12月 发表的 CSS1 的要求有第一版主要规定了选择器、样式属性、伪类 、对象几个大的部分。 CSS2CSS2 在 1998 年 5月 由 W3C 发布，CSS2 规范是基于 CSS1 设计的，扩充和改进了很多更加强大的属性。包括选择器、位置模型、布局、表格样式、媒体类型、伪类、光标样式。 Cascading Style Sheets Level 2 Revision 1，通常被称为“ CSS 2.1” ，修复了 CSS 2中的错误，删除了支持不良或不能完全互操作的特性，并为规范增加了已经实现的浏览器扩展。 为了遵守 W3C 标准化技术规范的过程，CSS 2.1 在 Working Draft (WD) 状态和 Candidate Recommendation (CP) 状态之间来回了很多年。 CSS 2.1于 2004 年 2 月 25 日首次成为 Candidate Recommendation (CR)标准，但在 2005 年 6 月 13 日又回到 Working Draft (WD) 中进行进一步审查。 它于 2007 年 7 月 19 日回到 Candidate Recommendation (CP) 标准，然后在 2009 年更新了两次。 然而，由于作出了修改和澄清，它再次回到了2010年12月7日的 Last Call Working Draft 。 CSS3CSS3 是层叠样式表（Cascading Style Sheets）语言的最新版本，旨在扩展CSS2.1。 CSS Level 2 经历了 9 年的时间（从 2002 年 8 月到 2011 年 6 月）才达到 Recommendation（推荐） 状态，主要原因是被一些次要特性拖了后腿。为了加快那些已经确认没有问题的特性的标准化速度，W3C 的 CSS Working Group 作出了一项被称为 Beijing doctrine 的决定，将 CSS 划分为许多小组件，称之为模块。这些模块彼此独立，按照各自的进度来进行标准化。其中一些已经是 W3C Recommendation 状态，也有一些仍是 Early Working Drafts（早期工作草案）。当新的需求被肯定后， 新的模块也会同样地添加进来。 从形式上来说，CSS3 标准自身已经不存在了。每个模块都被独立的标准化，现在标准 CSS 包括了修订后的 CSS2.1 以及完整模块对它的扩充，模块的 level（级别）数并不一致。可以在每个时间点上为 CSS 标准定义一个 snapshots（快照），列出 CSS 2.1 和成熟的模块。 W3C 会定期的发布这些 snapshots，如 2007, 2010, 2015 或 2017。 目前为止，还没有 level 超过 3 的模块被标准化，未来应该会有所改变。 不过有些模块，比如 Selectors（选择器）4 或 CSS Borders and Backgrounds（边框和背景）Level 4 早已拥有了 Editor’s Draft（编辑草案），即使它们还没达到 First Published Working Draft（初次发布工作草案）状态。 有一张图可以更加直观的表示当前 CSS3 Modules 的分类和状态： 问题：为什么没有 CSS4？There is no single, integrated CSS4 specification, because it is split into separate “level 4” modules.Level 4 不等于 CSS 4 ，如 CSS Custom Properties for Cascading Variables Module Level 1 总不能说它是 CSS1 吧。 CSS 预处理器CSS 自诞生以来，基本语法和核心机制一直没有本质上的变化，在很长一段时间内，它的发展几乎全是表现力层面上的提升。 最开始 CSS 在网页中的作用只是辅助性的装饰，轻便易学是最大的需求；然而如今网站的复杂度已经不可同日而语，原生 CSS 已经让开发者力不从心。 当一门语言的能力不足而用户的运行环境又不支持其它选择的时候，这门语言就会沦为 “编译目标” 语言。开发者将选择另一门更高级的语言来进行开发，然后编译到底层语言以便实际运行。于是，在前端领域，天降大任于斯人也，CSS 预处理器应运而生。 百花齐放CSS 预处理器是一个能让你通过预处理器自己独有的语法来生成 CSS 的程序。 市面上有很多 CSS 预处理器可供选择，且绝大多数 CSS 预处理器会增加一些原生 CSS 不具备或不完善的高级特性，这些特性让 CSS 的结构更加具有可读性且易于维护。当前社区代表的 CSS 预处理器 主要有一下几种： Sass：2007 年诞生，最早也是最成熟的 CSS 预处理器，拥有 Ruby 社区的支持和 Compass 这一最强大的 CSS 框架，目前受 LESS 影响，已经进化到了全面兼容 CSS 的 SCSS。 Less：2009年出现，受 SASS 的影响较大，但又使用 CSS 的语法，让大部分开发者和设计师更容易上手，在 Ruby 社区之外支持者远超过 SASS，其缺点是比起 SASS 来，可编程功能不够，不过优点是简单和兼容 CSS，反过来也影响了 SASS 演变到了 SCSS 的时代，著名的 Twitter Bootstrap 就是采用 LESS 做底层语言的。 Stylus：Stylus 是一个CSS的预处理框架，2010 年产生，来自 Node.js 社区，主要用来给 Node 项目进行 CSS 预处理支持，所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的 CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似， 优点虽然各种预处理器功能强大，但使用最多的，还是以下特性：变量（variables），代码混合（ mixins），嵌套（nested rules）以及 代码模块化(Modules)。 接下来以 Sass 为例，展示一下这几个主要特性在预处理器中的实现： Variables and Operators (+, -, *, /, %)12345678910$font-size: 10px;$font-family: Helvetica, sans-serif;body &#123; font: $font-size $font-family;&#125;.mark&#123; font-size: 1.5 * $font-size;&#125; Mixins1234567891011@mixin clearfix &#123; &amp;:after &#123; display: block; content: &apos;&apos;; clear: both; &#125;&#125;.sidebar&#123; @include clearfix;&#125; Nesting12345678// menu.nav &#123; &gt; li &#123; &gt; a:hover &#123; background-color: red; &#125; &#125;&#125; Modules1234@import './common';@import './github-markdown';@import './mixin';@import './variables'; 缺点或不足额外的编译配置在写样式前需要做一些额外的编译配置工作，sass-node 安装以及编译的配置就能卡住一批前端新手。 编译成本每次修改代码都需要重新编译,占用时间和 CPU。 学习成本不同的 CSS 预处理器语法不同，增加学习成本。在同一个团队甚至项目里，可能同时使用了好几种样式预处理器。 123456789101112131415// Sass$color: #f00;$images: &quot;../img&quot;;@mixin clearfix &#123; &amp;:after &#123; content: &quot; &quot;; display: block; clear: both; &#125;&#125;body &#123; color: $color; background: url(&quot;#&#123;images&#125;/1.png&quot;); @include clearfix;&#125; 123456789101112131415// Less@color: #f00;@images: \"../img\";.clearfix() &#123; &amp;:after &#123; content: \" \"; display: block; clear: both; &#125;&#125;body &#123; color: @color; background: url(\"@&#123;images&#125;/1.png\"); .clearfix;&#125; 调试在使用 CSS 预处理器时，我们通常会配置 SourceMap 来辅助调试，但即使这样，还是会碰到一些调试困难的情况： 回归 CSS各种 CSS 预处理器在更新迭代的过程中，功能越来越繁杂花哨，但是绝大部分人用到的核心功能还是那几样：Variables、Mixing、Nested、Module，顶多再加上一些工具类函数。 我们既想要想要预处理器的优点，又不想要它带来的成本和缺点，有没有两全其美的办法？CSS 这么多年一直也在从社区汲取养分加速进化和迭代，我们能不能从 CSS 标准里面找到答案呢？ Variables in CSSCSS 自定义属性（CSS Custom Properties)，又叫 CSS 变量（CSS Variable）,允许你自己在样式中声明变量，并通过 var() 函数使用。 CSS Custom Properties for Cascading Variables 规范在 2012 年 10 月首次作为 工作草案（WD） 提出，并在 2015 年 10 月到达 候选人推荐标准（CR）阶段。现在浏览器支持程度已经接近 93%。 CSS 变量定义及使用如下所示，可定义的类型极其丰富。 12345678910111213141516171819202122232425/* declaration */--VAR_NAME: &lt;declaration-value&gt;;/* usage */var(--VAR_NAME)/* root element selector (global scope), e.g. &lt;html&gt; */:root &#123; /* CSS variables declarations */ --main-color: #ff00ff; --main-bg: rgb(200, 255, 255); --logo-border-color: rebeccapurple; --header-height: 68px; --content-padding: 10px 20px; --base-line-height: 1.428571429; --transition-duration: .35s; --external-link: \"external link\"; --margin-top: calc(2vh + 20px);&#125;body &#123; /* use the variable */ color: var(--main-color);&#125; 不同于 SASS 预处理器变量的编译时处理，CSS 变量是浏览器在运行时进行处理的，因此 CSS 变量会更加强大和灵活。 Operators可以使用 calc() 进行计算 12345678:root &#123; --block-font-size: 1rem;&#125;.block__highlight &#123; /* WORKS */ font-size: calc(var(--block-font-size)*1.5);&#125; Generate Colors可以用于通过 RGB 等函数生成和计算颜色：Generate Colors CSS to JSCSS 变量出现前，从 CSS 传值给 JS 非常困难，甚至需要借助一些 Hack 的手法。现在使用 CSS 变量，你可以直接通过 JS 获取变量值并进行修改： 1234.breakpoints-data &#123; --phone: 480px; --tablet: 800px;&#125; 123456789const breakpointsData = document.querySelector('.breakpoints-data');// GETconst phone = getComputedStyle(breakpointsData) .getPropertyValue('--phone');// SETbreakpointsData.style .setProperty('--phone', 'custom'); Custom Theme使用 CSS 变量，定制和动态切换网站主题非常简单方便： 首先定义好不同主题下的变量，然后正常书写样式即可。 123456789html &#123; --hue: 210; /* Blue */ --text-color-normal: hsl(var(--hue), 77%, 17%); ...&#125;html[data-theme='dark'] &#123; --text-color-normal: hsl(var(--hue), 10%, 62%); ...&#125; 通过 JS 改变元素属性，动态切换主题： 12document.documentElement.setAttribute('data-theme', 'dark')document.documentElement.setAttribute('data-theme', 'light') 更多高级用法可以参考：CSS custom properties (native variables) In-Depth 为什么变量的定义以 --开头？原因在这里：Let’s Talk about CSS Variables Mixins in CSSCSS 的有一个提案：CSS @apply Rule，按照该草案描述，用户可直接使用 CSS 变量存放声明块，然后通过 @apply rule 使用。 12345678910:root &#123; --pink-schema: &#123; color: #6A8759; background-color: #F64778; &#125;&#125;body&#123; @apply --pink-schema;&#125; 可惜这个提案已被废弃，具体废弃原因感兴趣的可以看看这篇文章：Why I Abandoned @apply。 尽管 Mixins 现在 CSS 还没有好的实现标准，但我们坚信迟早会有更优秀的规范涌现出来弥补 CSS 的这一块空白。 Nesting in CSSCSS 里已经有 Nesting 的规范出现，尽管现在只处于 Editor’s Draft 阶段：CSS Nesting Module Level 3 可以看到按照 CSS Nesting Module ，Nesting 规范基本和预处理器一模一样。 123456789101112131415/* Dropdown menu on hover */ul &#123; /* direct nesting (&amp; MUST be the first part of selector)*/ &amp; &gt; li &#123; color: #000; &amp; &gt; ul &#123; display: none; &#125; &amp;:hover &#123; color: #f00; &amp; &gt; ul &#123; display: block; &#125; &#125; &#125;&#125; Module in CSS其实 CSS 很早就有了模块化方案，那就是 @import，使用 CSS 的 @import 规则，可以引用其他的文件样式。这个特性从 IE 5.5 开始就被所有的浏览器支持，那为什么一直以来使用者寥寥无几呢，原因很多： 在一些老的浏览器有加载顺序的 bug 无法并行加载 导致过多的请求数量 …… 不过现在大家的前端项目基本都会使用构建工具（Gulp、Webpack 等）打包后再上线，因此以上哪些缺点也就不存在了，而在 Webpack 的 css-loader 中，是可以配置是否开启 @import 的。 Selector Helpers除了上面介绍的一些主要特性，CSS 还提供了一些全新的特性来帮助你更优雅的书写样式。 :matches pseudo-class 已更名为 :is() :matches() CSS 伪类 函数将选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素，这对于以更紧凑的形式编写大型选择器非常有用，而且浏览器支持程度也已经接近 93%。 12/* 语法 */:matches( selector[, selector]* ) 1234567891011.nav:matches(.side,.top) .links:matches(:hover, :focus) &#123; color: #BADA55;&#125;/* 相当于以下代码 */.nav.side .links:hover,.nav.top .links:hover,.nav.side .links:focus,.nav.top .links:focus &#123; color: #BADA55;&#125; 想要了解更多详情可以查看规范：Selectors Level 4 @custom-selector同时，你还可以您可以使用自定义选择器来定义可以匹配复杂选择器的别名。 12/* 语法 */@custom-selector: &lt;custom-selector&gt; &lt;selector-list&gt;; 定义的方式和 CSS 变量类似，使用起来稍微有点区别。 123456789101112131415@custom-selector :--text-inputs input[type=\"text\"],input[type=\"password\"];:--text-inputs.disabled,:--text-inputs[disabled] &#123; opacity: 0.5&#125;/* 相当于以下代码 */input[type=\"text\"].disabled,input[type=\"password\"].disabled,input[type=\"text\"][disabled],input[type=\"password\"][disabled] &#123; opacity: 0.5&#125; 用起来尽管上述的 CSS 特性还处于不同阶段，浏览器的支持程度也不尽相同，但是使用 postcss-preset-env，你就可以抢先尝试 CSS 的最新特性。 当然，postcss-preset-env 的配置也十分简单，以 Webpack 为例： 12345678910111213rules: [ &#123; test: /\\.css$/, use: [ 'style-loader', &#123; loader: 'css-loader', options: &#123; importLoaders: 1 &#125; &#125;, &#123; loader: 'postcss-loader', options: &#123; ident: 'postcss', plugins: () =&gt; [ postcssPresetEnv(/* pluginOptions */) ] &#125; &#125; ] 总结经过一番梳理，我们发现，尽管 CSS 在社区的刺激下加快了更新迭代的速度，但是到目前为止，依然达不到 CSS 预处理器 VS CSS 的地步，只能说在使用 CSS 预处理器的同时，也可以在项目中尝试一些优秀的 CSS 新特性，即：CSS 预处理器 + CSS。 但是我们依然坚信，在 W3C 的推动下，随着 CSS 自身不断完善，CSS 预处理器终究会像当年的 CoffeScript 、Jade 一样，变成时代的过渡产物。到那时候，大家也就不用纠结各种 CSS 预处理器的环境配置和技术选型等，直接打开编辑器，就能愉快的书写样式。 参考 You might not need a CSS preprocessor CSS3 Modules and the standardization process How to Read W3C Specs Wikipedia - Cascading Style Sheets CSS Custom Properties for Cascading Variables Module Level 1","pubDate":"Tue, 29 Oct 2019 10:00:00 GMT","guid":"https://aotu.io/notes/2019/10/29/css-preprocessor/","category":"Web开发"},{"title":"Mongoose-modified-at 时间自动记录插件介绍","link":"https://aotu.io/notes/2019/10/28/modified-at/","description":"Mongoose-modified-at 是一款自动更新字段变化时间并记录到数据库中的 Mongoose 插件，类似 Mongoose 自带的 timestamps 功能。 使用场景让我们考虑一个场景，我们有个文章发布与展示的需求，数据模型如下。 123456789const schema = new mongoose.Schema(&#123; // 文章标题 title: String, // 是否为草稿 is_draft: Boolean, // 是否推荐 is_recommended: Boolean, // 更多字段...&#125;) 当我们在展示最新文章列表时，应该是以文章第一次发布的时间倒序展示，因为文章可以存为草稿，多次编辑，所以不能用 Mongoose 提供的 createdAt 或 updatedAt 作为第一次发布的时间，正确的做法是在每次文章创建或更新时，确定用户是发布文章而不是存为草稿，然后记录此次时间，用该时间作为第一次发布的时间。 要实现该功能我们需要在代码逻辑层进行处理，这样可行不过有点耦合，或者自己封装一个 Mongoose 中间件来做这件事，不过现在你可以把这件事交给一个经受测试、API 优雅的插件 ModifiedAt 来处理。 首先安装插件。 1npm install mongoose-modified-at --save 然后在 Schema 初始化时做简单的配置即可，如下。 12345678910111213141516import modifiedAt from 'mongoose-modified-at'// 在 mongoose.model 调用之前schema.plugin(modifiedAt, &#123; // 函数名将作为字段名写入数据库 publishedAt(doc) &#123; // 当函数返回值为 true 时，则记录该时间 return !doc.is_draft &#125;, // 推荐文章也是如此 recommendedAt(doc) &#123; return doc.is_recommended &#125;,&#125;)const Article = mongoose.model('Article', schema) 当文档保存或更新携带着 is_draft 字段并且值为 false 时，插件就会记录此次时间到你声明的 publishedAt 字段上一起写入数据库。 示例如下： 123456await Article.create(&#123; title: 'Document Title', is_draft: false, is_recommended: true, // 更多字段...&#125;) 结果如下（数据库）： 12345678&#123; \"title\": \"Document Title\", \"is_draft\": false, \"is_recommended\": true, \"publishedAt\": ISODate(\"2019-09-27T03:11:07.880Z\"), \"recommendedAt\": ISODate(\"2019-09-27T03:11:07.880Z\"), // 更多字段...&#125; 附加案例作为渐进式项目，我们的开发一般也是渐进式的，虽然我们会不自觉地超前考虑，但是还是不能完全考虑到未来需求的变化，假如我们对某个项目的功能已经完成并稳定上线了，后来比如我们需要做数据统计分析的工作，这项工作的分析维度对时间的精度要求比较高，所以要是我们在开发时并没有考虑到要添加这些时间字段（因为可能对业务不是必须的），而现在需要加上这些字段，要是去原来的代码基础上改动添加，如果改动的地方少还好，如果有完善的测试用例还好，否则这也许会改的心惊胆战，因为你需要确保每一处改动不会产生错误影响。所以此时，使用无侵入式的中间件插件 ModifiedAt 那就省心很多了，只需在模型出口简单配置，无需改动逻辑层代码，即可实现刚刚想要的功能。 API介绍上面是 ModifiedAt 的富 API 形式，即对象格式，全部参数选项如下。 123456789101112schema.plugin(modifiedAt, &#123; // 设置监听字段 fields: ['name', 'status', 'another'], // 设置后缀 suffix: '_your_suffix', // 设置路径默认行为 select: true, // 自定义字段 customField(doc) &#123; // 做一些你想做的事，然后返回 Boolean 值，告诉插件是否记录时间 &#125;,&#125;) 🍎 参数解释： fields: 设置监听字段，在文档创建或更新时，如果存在被监听的字段，则自动以 字段名 + 后缀 的形式作为字段，并记录此次更新时间到该字段上。可选，Array 类型。 suffix: 设置后缀，默认值为 _modifiedAt。可选，String 类型。 select: 设置路径默认行为，默认为 true ，参考 Mongoose 文档。可选，Boolean 类型。 customField: 自定义字段，此字段不会加后缀，以函数形式添加到参数中，用于自定义功能，函数接收唯一文档参数，当函数返回值为真值时，则记录此次时间到该字段上。 简化API🚀 为了增加 API 的简洁易用同时避免过度重载，ModifiedAt 只增加了一种简化传参格式，如下。 1schema.plugin(modifiedAt, ['name', 'status']) 意思是将 fields 选项提取出来作为参数，写入数据库的结果如下。 123456&#123; \"name\": \"Tom\", \"status\": 1, \"name_modifiedAt\": ISODate(\"2019-09-27T03:13:17.888Z\"), \"status_modifiedAt\": ISODate(\"2019-09-27T03:13:17.888Z\"),&#125; 支持异步你需要 Node.js 版本支持 async/await 即可。 12345678910111213141516171819202122import P from 'bluebird'const petSchema = new mongoose.Schema(&#123; name: String, age: Number, sex: String, // 1：表示采购中，2：已购买，3：已售出 status: Number,&#125;)petSchema.plugin(modifiedAt, &#123; // 记录购买于哪时 async boughtAt(doc) &#123; // 延时 1s await P.delay(1000) return doc.status === 2 &#125;, // 记录售出于哪时 soldAt(doc) &#123; return doc.status === 3 &#125;,&#125;) 支持 Mongoose 4.x如果你现在使用的是 Mongoose 4.x，那么你需要使用插件 1.x 版本，文档可在这里查看。 1npm install mongoose-modified-at@1 --save “100%”测试覆盖率29 个测试用例，777 行测试代码，“100%” 测试覆盖率。 细节更多细节处理请移步至 GitHub 文档，这里。 最后本插件在京东智能设计项目 - 羚珑中实际应用，ling.jd.com 欢迎体验 😘。","pubDate":"Mon, 28 Oct 2019 02:00:00 GMT","guid":"https://aotu.io/notes/2019/10/28/modified-at/","category":"NodeJS"},{"title":"Taro 邀你加入社区共建 — 社区共建倡议书","link":"https://aotu.io/notes/2019/10/24/taro-open/","description":"Taro 作为一个多端统一开发解决方案，自诞生以来一直保持着高速的发展态势， 从一个单一的开发框架发展到如今服务数万名开发者的多端解决方案，Taro 的成长有 Taro 团队不忘初心的努力，但更重要的是，离不开社区广大开发者的支持和帮助。 开源面临着什么我们可以先来看一组数据。 Taro 从开源到当前行文为止，统共有 5227 次 commits，发布了 235 个版本，同时有 3908 个 issues 被开启，在 Taro 团队和社区的努力下，已经关闭了 3296 个，还有近 600 个 issues 有待解决，而每周 Taro 的新开启的 issues 也在 50 个左右；同时也收获了 709 个 PR，合入了 656 个。 除此之外，Taro 交流社区 发帖数也达到 3000 个，每周以 200 个左右的增速在增加，而 Taro 官方文档 作为 Taro 入门及开发必备的资源，每周的访问量达到了 20w。 同时 Taro 还有 20 余 个 500 人左右的开发者交流微信群，以及 10 余个跟各小程序官方团队、各大公司研发团队的研讨群，每天 Taro 团队的开发人员都要遭受大规模的信息轰炸。 由此可见，Taro 目前拥有庞大且活跃的开发者社区，每天都会产生大量的信息，或是问题，或是建议，或是代码提交，或是有用的轮子。当社区变得越来越大后，如何进行有效的管理，提升社区整体的使用体验，便成了困扰 Taro 团队的问题，迫切需要在方案迭代与社区维护之间寻找到一个平衡点，以使 Taro 可以走得更远，发展得更好。 来自社区的力量正所谓「单丝不成线，独木不成林」。 Taro 发展至今早已不在属于单一团队的项目了，而是整个 Taro 开发社区共同的项目。在 Taro 所属的 NervJS 组织的成员 中也已经加入了像华为、腾讯等其他公司的研发人员，共同建设项目，而整个社区的贡献者也达到了 230 位。 而在所有的社区贡献中，需要特别感谢： Tom Huang ，独立为 Taro 开发所有端的 MobX 支持 jsNewbee，为 Taro 贡献了一个完整支持 小程序 + H5 + React Native 的多端样例 Chunlin，来自华为，为 Taro 完善了快应用的转换支持 同时也感谢受邀成为 TaroUI 核心维护人员的 Garfield550 (小姐姐)、梁音、ShaoQian Liu，他们将支撑起 TaroUI 的后续迭代与维护。 当然还有在社区中乐于助人、积极贡献的 zacksleo 、Jay Fong、loveonelong、lolipop99、波仔糕、原罪、lentoo 、白领夏公子 、YuanQuan、 tourze、 lingxiaoZhu 等等。 此外，还要感谢一直默默为 Taro 发展提供宝贵建议的研发团队：腾讯云、数字广东、腾讯CDC、网易严选、华为开源团队、招联消费金融等等 社区的力量一直在支撑 Taro 前进。 所以，如今 Taro 面临的社区维护问题我们希望可以交给社区来进行自我管理。 期待你的加入为了能够让社区更加高效、健康的运转下去，Taro 官方团队希望能够从社区中吸引开发者来共同维护，进行社区共建。 社区共建本次拟开放三大类角色，Taro 团队会为每一类角色设定一定门槛以及激励机制，从而保证整体质量。 能力完善 头衔 准入机制 权益 认证开发者 1. 为 Taro 实现过独立功能特性 2. 代码 commit 数及代码贡献量达到一定标准 1. 获取 Taro 项目 developer 权限 2. 来自 Taro 团队定期礼品与开源认证证书 3. Readme 及官网、文档展示 代码贡献者 为 Taro 提交过 PR Readme 及官网、文档展示 社区管理 头衔 准入机制 权益 职责 社区版主 1. 通过社区报名，遴选后产生 2. 通过考察在 Taro 社区的活跃程度，由 Taro 团队进行定向邀请 1. Readme 及官网、文档展示 2. 所提出特性会优先考虑在 Taro 版本中加入 3. 来自 Taro 团队定期礼品与开源认证证书 1. 负责社区各版块的管理2. 定期发布版块相关主题帖 3. 定期收集版块问题帖子，进行汇总，反馈给 Taro 团队 4. 对版块内帖子进行审核，剔除无用、违反法律等帖子 GitHub Issues 管理员 1. 通过社区报名，遴选后产生 2. 通过考察在 Taro 社区的活跃程度，由 Taro 团队进行定向邀请 1. Readme 及官网、文档展示 2. 所提出特性会优先考虑在 Taro 版本中加入 3. 来自 Taro 团队定期礼品与开源认证证书 4. 参与 GitHub robot 完善 1. 负责对 GitHub issues 答疑解惑以及打标分类 2. 负责每周汇总 issues，并将 issues 提交到 Taro 团队 3. 负责每周精选 issues，并将数据同步到 Taro 社区 交流群管理员 1. 通过社区报名，遴选后产生 2. 通过考察在 Taro 社区的活跃程度，由 Taro 团队进行定向邀请 1. Readme 及官网、文档展示 2. 所提出特性会优先考虑在 Taro 版本中加入 3. 来自 Taro 团队定期礼品与开源认证证书 4. 参与 群小助手 完善 1. 负责群内内容的管理，创造良好的沟通交流环境 2. 负责群内问题的答疑解惑，引导开发者去社区、GitHub issues 获取答案 3. 负责操作社区群管理工具，整理群内问题，同步到 Taro 社区 知识构建 形式 提交方式 权益 Taro 课程视频录制 通过邮箱发送个人信息及试讲视频邮箱：taro@jd.com内容：1. 个人信息：主攻技术方向、从业经历、公开分享经验等 2. 试讲视频链接通过遴选后，Taro 团队会与你联系沟通后续的视频录制事宜 成为 Taro 官方合作伙伴，视频课程经由 Taro 团队审核后，Taro 团队会全力协助进行运营推广 Taro 开发实践文章撰写 通过邮箱投稿邮箱：taro@jd.com内容：1. md 文件（若为系列文章请添加大纲） 2. 是否在 Taro 渠道首发通过遴选后，Taro 团队会与你联系沟通后续发布事宜 成为 Taro 官方合作伙伴，文章经由 Taro 团队审核后，会通过 Taro 相关优质渠道进行发布 写在最后Taro 作为一个多端开发解决方案，还处在初级的发展阶段，是一个发展中的方案，在不久的未来我们会有更多新的功能、特性推向开发者，甚至可能也有颠覆性的东西出现，让 Taro 成为一个更棒的方案。目前 Taro 已经翻过了一座座发展的山峰，但他正在向更高山峰迈进。 长风破浪会有时，直挂云帆济沧海。 Taro 诚邀你的加入联系邮箱：taro@jd.com邮件标题：【共建】+ 你想说的话 加入 Taro 微信群？加「 Taro小助手」（微信号: jdtester）回复 taro 即可。","pubDate":"Thu, 24 Oct 2019 03:30:00 GMT","guid":"https://aotu.io/notes/2019/10/24/taro-open/","category":"移动开发"},{"title":"玩转 Taro 跨端之 flex 布局篇","link":"https://aotu.io/notes/2019/09/25/taro-flex/","description":"玩转 Taro 跨端之 flex 布局篇，带你了解 flex 布局在各小程序端的表现详情并给出最佳实践 demo 玩转Taro跨端之flex布局篇Taro 是一套遵循 React 语法规范的跨平台开发解决方案，但是目前当我们使用 Taro 的时候，在不同平台上的开发体验还有不一致的地方，所以我们也都期待有一套跨平台统一的解决方案，能够以最小差异的方式向开发者提供更好的开发体验。 在跨平台开发的过程中，不同平台之间的差异尤其体现在样式的统一上，由于不同平台对样式的支持程度并不一致，Taro 很难能够通过编译的手段来对跨平台样式进行统一，所以，我们需要一个支持跨平台的解决方案来对样式进行统一。 跨平台样式考虑页面布局和样式 H5 是最为灵活的，小程序次之，React Native 和快应用最弱，统一跨平台样式应当优先对齐短板，也就是要以 React Native 和快应用的约束来管理样式，同时兼顾小程序的限制，而 Flexbox 就是一个很好的解决方案。 在构建页面的时候，我们可以通过 Flexbox 高效地完成页面代码，虽然并不是所有属性都可以全平台适应的，但是它在全平台都能够得到足够的支持，而且所有平台可以很容易通过它来绘制通用性很高的页面，这也就是为什么我们选择使用 Flexbox 方案来完成这个跨平台演示项目。 预览地址 Flexbox 布局 (Flexible Box Layout)Flexbox 是弹性布局模块(CSS Flexible Box Layout Module)常用的简称，是一种用于在单个维度中显示项目行或列的布局模型。在规范中， Flexbox 被描述为用户界面设计的布局模型。 Flexbox 的关键特性是 flex 布局中的项目可以增长和缩小。可以将空间分配给项目本身，或者在项目之间或周围分配空间。 在 Flexbox 中，采用 flex 布局 的元素，称为 flex 容器(flex container)， flex 容器所有的子元素自动成为容器成员，称为 flex 元素(flex item)。Flex 容器 默认存在两根轴：水平的主轴(main-axis)和垂直的交叉轴(cross-axis)。flex 元素 默认沿主轴排列。主轴的开始位置(与边框的交叉点)叫做 main-start ，结束位置叫做 main end ;交叉轴的开始位置叫做 cross-start ，结束位置叫做 cross-end ;单个项目占据的主轴空间叫做 main-size ，占据的交叉轴空间叫做 cross-size 。 Flexbox 可以对齐主轴或横轴上的项目，从而提供对一组项目的大小和对齐的高级控制，大多数场景下，使用 flex-direction、align-items 和 justify-content 三个样式属性就已经能满足大多数布局需求，换而言之如果熟悉 Flexbox 就可以应对大多数场景下的布局需求。 注意，设为 Flex 布局以后，子元素的 float 、 clear 和 vertical-align 属性将失效。 Flex Container 属性在规范中， Flex Container 上，一共有七个属性可以设置，但是 flex-flow 在 React Native 上是不支持的。 flex-directionflex-direction 属性指定了flex 元素是如何在 flex 容器中布局的，定义了主轴的方向(正方向或反方向)。 支持的值如下：|值|意义||–|–||row|flex 容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。||row-reverse|表现和 row 相同，但是置换了主轴起点和主轴终点。||column|flex 容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同。||column-reverse|表现和 column 相同，但是置换了主轴起点和主轴终点。| 需要注意的是，规范下 flex-direction 的默认值是 row ，而在 React Native 中则为 column，这也就是为什么我们会添加了这个的样式 12345&gt; .flex &#123;&gt; display: flex;&gt; flex-direction: row;&gt; &#125;&gt; flex-wrapflex-wrap 指定 flex 元素单行显示还是多行显示。如果允许换行，这个属性允许控制行的堆叠方向。默认值为 nowrap。 支持的值如下：|值|意义||–|–||nowrap|不换行。flex 元素被摆放到到一行，这可能导致溢出 flex 容器。交叉轴的起点会根据 flex-direction 的值相当于 start 或 before。||wrap|flex 元素被打断到多个行中。交叉轴的起点会根据 flex-direction 的值选择等于start 或before。交叉轴的终点为确定的交叉轴的起点的另一端。||wrap-reverse|和 wrap 的行为一样，但是交叉轴的起点和交叉轴的终点互换。| 使用 flex-wrap 属性的时候，我们需要注意 wrap-reverse 值在 React Native 上是不支持的。 flex-flowflex-flow 属性是 flex-direction 和 flex-wrap 的简写。默认值为 row nowrap。 语法格式1&lt;&apos;flex-direction&apos;&gt; || &lt;&apos;flex-wrap&apos;&gt; flex-flow 属性不被 React Native 和快应用支持 align-itemsalign-items 属性将所有直接子节点上的 align-self 值设置为一个组。 align-self 属性设置项目在其包含块中在交叉轴方向上的对齐方式。默认值为 stretch。 值 意义 stretch flex 元素在交叉轴方向拉伸到与容器相同的高度或宽度（flex 元素不能固定尺寸） flex-start 交叉轴的起点对齐 flex-end 交叉轴的终点对齐 center 交叉轴的中点对齐 baseline 元素第一行文字的基线对齐 语法格式12345normal | stretch | &lt;baseline-position&gt; | [ &lt;overflow-position&gt;? &lt;self-position&gt; ]where &lt;baseline-position&gt; = [ first | last ]? baseline&lt;overflow-position&gt; = unsafe | safe&lt;self-position&gt; = center | start | end | self-start | self-end | flex-start | flex-end baseline 值不被 React Native 和快应用支持 space-evenly、start、end、self-start、self-end、left、right、first baseline、last baseline、safe、unsafe 在 flex 布局中通用性低 align-contentalign-content 属性设置了如何沿着 flex 容器的交叉轴和在 flex 元素之间和周围分配空间。默认值为 stretch。 该属性对单行弹性盒子模型无效。（即：带有 flex-wrap: nowrap 的 flex 容器）。 值 意义 stretch 拉伸所有 flex 元素来填满剩余空间。剩余空间平均的分配给每一个 flex 元素 flex-start 所有 flex 元素从垂直轴起点开始填充。第一个 flex 元素的垂直轴起点边和 flex 容器的垂直轴起点边对齐。接下来的每一个 flex 元素紧跟前一个 flex 元素。 flex-end 所有 flex 元素从垂直轴末尾开始填充。最后一个 flex 元素的垂直轴终点和容器的垂直轴终点对齐。同时所有后续 flex 元素与前一个对齐。 center 所有 flex 元素朝向容器的中心填充。每 flex 元素互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一个 flex 元素的距离相等于容器的垂直轴终点边和最后一个 flex 元素的距离。 space-between 所有 flex 元素在容器中平均分布。相邻两 flex 元素间距相等。容器的垂直轴起点边和终点边分别与第一个 flex 元素和最后一个 flex 元素的边对齐。 space-around 所有 flex 元素在 flex 容器中平均分布，相邻两 flex 元素间距相等。容器的垂直轴起点边和终点边分别与第一个 flex 元素和最后一个 flex 元素的距离是相邻两 flex 元素间距的一半。 space-evenly flex 元素都沿着主轴均匀分布在指定的 flex 元素中。相邻 flex 元素之间的间距，主轴起始位置到第一个 flex 元素的间距,，主轴结束位置到最后一个 flex 元素的间距，都完全一样。 语法格式123456normal | &lt;baseline-position&gt; | &lt;content-distribution&gt; | &lt;overflow-position&gt;? &lt;content-position&gt;where &lt;baseline-position&gt; = [ first | last ]? baseline&lt;content-distribution&gt; = space-between | space-around | space-evenly | stretch&lt;overflow-position&gt; = unsafe | safe&lt;content-position&gt; = center | start | end | flex-start | flex-end React Native 中需要版本号在 0.58 以上 且 flex-wrap 属性值需要为 wrap 同时只对横轴生效(即 flex-direction 属性为 column 或 column-reverse) baseline 值不被 React Native 支持 space-evenly、start、end、left、right、first baseline、last baseline、safe、unsafe 在 flex 布局中通用性低 justify-contentjustify-content 属性定义了浏览器如何分配顺着 flex 容器主轴的 flex 元素之间及其周围的空间。 值 意义 flex-start 从行首开始排列。每行第一个 flex 元素与行首对齐，同时所有后续的 flex 元素与前一个对齐。 flex-end 从行尾开始排列。每行最后一个 flex 元素与行尾对齐，其他元素将与后一个对齐。 center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。 space-between 在每行上均匀分配 flex 元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。 space-around 在每行上均匀分配 flex 元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。 space-evenly flex 元素都沿着主轴均匀分布在指定的 flex 元素中。相邻 flex 元素之间的间距，主轴起始位置到第一个 flex 元素的间距,，主轴结束位置到最后一个 flex 元素的间距，都完全一样。 语法格式12345normal | &lt;content-distribution&gt; | &lt;overflow-position&gt;? [ &lt;content-position&gt; | left | right ]where &lt;content-distribution&gt; = space-between | space-around | space-evenly | stretch&lt;overflow-position&gt; = unsafe | safe&lt;content-position&gt; = center | start | end | flex-start | flex-end baseline 值不被 React Native 支持 stretch、space-evenly、start、end、left、right、first baseline、last baseline、safe、unsafe 在 flex 布局中通用性低 place-contentplace-content 属性是 align-content 和 justify-content 的简写。 语法格式1&lt;&apos;align-content&apos;&gt; &lt;&apos;justify-content&apos;&gt;? 如果第二个值不存在，且第一个值适用于用于两者，则第二个值复用第一个 如果第二个值不存在，且第一个值不适用于用于两者，则整个值无效 place-content 属性不被 React Native 支持 Flex Item 属性在 Flex Item 上，同样也有六个属性，而 order 属性在 React Native 上不支持。 orderorder 属性规定了 flex 容器中的 flex 元素在布局时的顺序。flex 元素按照 order 属性的值的增序进行布局。拥有相同 order 属性值的 flex 元素按照它们在源代码中出现的顺序进行布局。默认值为 0。 语法格式1&lt;integer&gt; order 属性不被 React Native 支持 flex-growflex-grow 属性定义 flex 元素的拉伸因子。 语法格式1&lt;number&gt; | inherit 负值无效 React Native 上默认值为 0 flex-shrinkflex-shrink 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。默认值为 1。 语法格式1&lt;number&gt; | inherit 负值是不被允许的。 React Native 上默认值为 1 flex-basisflex-basis 指定了 flex 元素在主轴方向上的初始大小。如果不使用 box-sizing 改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的尺寸。 注意：如果一个 flex 元素同时设置了 flex-basis (auto 除外)和 width (或者 flex-direction: column 时设置了 height )，flex-basis 权级更高。 语法规范1content | &lt;&apos;width&apos;&gt; &lt;’width’&gt; width 值可以是&lt;length&gt;; 该值也可以是一个相对于其父弹性盒容器主轴尺寸的百分数 。 负值是不被允许的。 默认为 0。 content 基于 flex 元素的内容自动调整大小。 React Native 上使用 ScrollView 组件会导致属性失效 如果没有足够空间，组件不会发生收缩 (应该是设置了 flex-shrink 属性值默认为 0) flexflex 规定了 flex 元素如何伸长或缩短以适应 flex 容器中的可用空间。这是一个简写属性，用来设置 flex-grow, flex-shrink 与 flex-basis。 语法格式1none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ] initial 元素会根据自身宽高设置尺寸。 它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的额外自由空间来适应 flex 容器 。 相当于将属性设置为”flex: 0 1 auto”。 auto 元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。 这相当于将属性设置为 “flex: 1 1 auto”。 none 元素会根据自身宽高来设置尺寸。 它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。 相当于将属性设置为”flex: 0 0 auto”。 在 React Native 中只能为 number 类型 当 flex &gt; 0 时，组件大小将与其弹性值成比例。因此，flex 设置为 2 的组件将占用空间的两倍作为 flex 设置为 1 的组件 当 flex = 0 时，组件根据 width 和 height 确定大小，且不会发生变化。 当 flex = -1 时，组件通常根据 width 和 height 确定大小。但是，如果没有足够的空间，组件将收缩到 minWidth 和 minHeight。 在快应用中，flex 的快捷值设置均是无效值 align-selfalign-self 会对齐当前 flex 行中的 flex 元素，并覆盖 align-items 的值. 如果任何 flex 元素的侧轴方向 margin 值设置为 auto，则会忽略 align-self。 语法格式12345auto | normal | stretch | &lt;baseline-position&gt; | &lt;overflow-position&gt;? &lt;self-position&gt;where &lt;baseline-position&gt; = [ first | last ]? baseline&lt;overflow-position&gt; = unsafe | safe&lt;self-position&gt; = center | start | end | self-start | self-end | flex-start | flex-end baseline 值不被 React Native 和快应用支持 start、end、self-start、self-end、first baseline、last baseline、safe、unsafe 在 flex 布局中通用性低 组件化开发不同的平台如 Web、React-Native、微信小程序等各有特色，平台之间的差异很大，会导致很多额外的开发成本。那么如果我们想要完成一个跨平台项目该怎么做呢？ 我们开始从比较容易入手的方向考虑，如果采用模块化组件或是 css-in-js 的方案去完成样式的构建会是一个好的方案么？ 在目前的前端生态中，模块化组件开发会是个很棒的方案，覆盖模式下构建开箱即用的组件同时可以提供方法来覆盖样式再好不过了，但是如果放到小程序开发的模式中，这就会有个很严重的问题，那就是如果我们在层级样式表中写到的样式，是不能直接传给组件来覆盖样式的，组件和组件的隔离在不同小程序中很难被打破。 1234567891011121314151617/* CustomComp.js */export default class CustomComp extends Component &#123; static defaultProps = &#123; className: '' &#125; render () &#123; return &lt;View className=&#123;this.props.className&#125;&gt;这段文本的颜色不会由组件外的 class 决定&lt;/View&gt; &#125;&#125;/* MyPage.js */export default class MyPage extends Component &#123; render () &#123; return &lt;CustomComp className=\"red-text\" /&gt; &#125;&#125; 1234/* MyPage.scss */.red-text &#123; color: red;&#125; 如果大家尝试上述的写法，会发现 red-text 类中的样式并没有生效，那么在这种情况下我们如果考虑是使用 css-in-js 会好么？很遗憾，如果你使用它，我们将不会为这些需要运行时处理的样式补全前缀。 这两个方案都不是合适的方案，那么我们该怎么做呢？试着去打破小程序的组件限制么？我们在微信小程序官方的文档中找到 externalClasses 这个方法，可以先来尝试。 123456789101112131415/* CustomComp.js */export default class CustomComp extends Component &#123; static externalClasses = ['my-class'] render () &#123; return &lt;View className=\"my-class\"&gt;这段文本的颜色由组件外的 class 决定&lt;/View&gt; &#125;&#125;/* MyPage.js */export default class MyPage extends Component &#123; render () &#123; return &lt;CustomComp className=\"red-text\" /&gt; &#125;&#125; 1234/* MyPage.scss */.red-text &#123; color: red;&#125; 但是这也并非所有的开发平台都能够提供给开发者相关的方法，所以我们只能转换目光到另一个 addGlobalClass 方法上，这个方法不仅在所有小程序都能够支持，Taro 在 React Native 端上也提供了同样的方法给大家，这样我们也可以避开 css modules 这个体验稍差的方法。 12345678910/* CustomComp.js */export default class CustomComp extends Component &#123; static options = &#123; addGlobalClass: true &#125; render () &#123; return &lt;View className=\"red-text\"&gt;这段文本的颜色由组件外的 class 决定&lt;/View&gt; &#125;&#125; 1234/* 组件外的样式定义 */.red-text &#123; color: red;&#125; 写在最后在项目中，我们已经将所有通用支持的方法写到 scss 文件中，如果大家需要可以直接使用我们已经提供的 flexbox 样式，按如下方法在自己全局的层级样式表中引入我们已经提供的样式。 1@import 'https://raw.githubusercontent.com/NervJS/taro-flexbox/master/flexbox-demo/src/asset/flex.scss'; 那么关于 Flex 布局的知识，如果文中有遗漏的，大家可以跟着我们的项目来梳理知识，也可以到 MDN 上查看相关的文档，值得注意的是在 Flexbox 布局中 gap、row-gap、column-gap 属性在 Grid 布局中普遍支持，但是在 Flex 布局中却只有 Firefox 完成了适配，所以暂且不表, 同样 justify-content 属性的 space-evenly 值在 web 端通用性很低，不建议使用。 gap、row-gap、column-gap in flex space-evently on desktop space-evently on mobile 希望这篇文章可以为你提供一些帮助。 属性对照表 属性 Chrome Firefox Android webview Safari on iOS 微信小程序 支付宝小程序 百度小程序 头条小程序 QQ小程序 React Native flex-direction ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 部分差异 flex-wrap ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ wrap-reverse 不支持 flex-flow ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 不支持 align-items ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ baseline 不支持 align-content ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 0.58+ (部分差异) justify-content ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ baseline 不支持 place-content ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 不支持 order ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 不支持 flex-grow ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ flex-shrink ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ flex-basis ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 部分差异 flex ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ 语法不同 align-self ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ baseline 不支持 相关链接 预览地址：https://nervjs.github.io/taro-flexbox/ 项目地址：https://github.com/NervJS/taro-flexbox 参考地址 https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout#Reference https://facebook.github.io/react-native/docs/flexbox https://github.com/startheart/cml-flexbox","pubDate":"Wed, 25 Sep 2019 07:00:00 GMT","guid":"https://aotu.io/notes/2019/09/25/taro-flex/","category":"移动开发"},{"title":"从程序媛角度去看项目管理","link":"https://aotu.io/notes/2019/09/11/project-management-of-programmer/","description":"项目管理一般是从技术负责人、项目产品负责人的角度去看的，程序员虽然码代码很重要，但对项目的领悟能力也同样重要。我们经常会遇到各种困惑：手上的项目需求越来越多，BUG列表只增不减，该采取怎样的措施，保证自己的生产力？希望以下的讲述带给你莫名的认同感，或多或少让你磨刀霍霍一试。 需求管理下图描述的是程序员从接到需求到开发环节的过程： 一般我们首先会收到产品的PRD或交互稿，被询问今天什么时间点是否有空，进行需求评审。时光匆匆，回想起刚毕业那时，我望着冗长的PRD，直接跳过背景、目的等看似与开发无关的内容描述。时光冉冉，我明白了一个道理：知道了为什么而做，才能砍需求啊！！ 我们要做一个有思考的程序员，不是别人说什么我们就做什么，我们可以引导产品经理，给出提醒并提供建设性的意见，让他们向着我们希望的那个点去思考去改进。嗯，牛逼~ 当然，祈求PRD完美，是不可能的，但是它又是我们排期、开发的依据，这两者存在这不可避免的矛盾。因此，力求在分析评审阶段，把不清晰不完整的部分暴露出来，是我们的目标之一。 特别警惕一句话需求，比如在页面添加一个链接，包含的功能可能有： 确认添加a元素跳转为target=”_blank”，还是在当前页面跳转； 链接的文字和地址是否可配置，是否通过接口拉取； 链接地址是否可为空，此时要警惕target=”_blank”的情况； 链接文字是否可多行，是否限制字数； 是否需要埋点，以及确认埋点方案。 第二个目标，就是砍需求了。“没时间了，这个需求放在二期吧” 这个金句，不知道大家感悟深不深，哈哈。首先要清楚自己在某个时间段的工作重点，然后根据需求与工作重点的相关系数去评估，有意识地拒绝一些无意义的工作。当然，工作重点应该是与业务息息相关的，最好是和上级商量后的结果。 于是，给自己定个todo list，在需求评审前自己过一遍相关文件内容，列出有疑问的地方，做好砍需求的准备… 需求排期确认需求后，首先确认需求的优先级，然后进行排期。如果我们手上有许多需求，确认需求的优先级是十分有必要的。 来自同一个产品的需求，可让对方给出优先级即可。 不同产品的需求，可征求需求方的意见，避免出现严重影响到对方的主流程的情况。 虽说需求的优先级主要掌握在产品经理的手上，但是我们自己也要有个认识。 了解 主线需求 &gt; 主线的分支需求 &gt; 锦上添花的需求 的原则，根据 用户覆盖面、用户使用频次、对用户的重要程度，以四象限法则“重要且紧急 &gt; 重要不紧急 &gt; 紧急不重要 &gt; 不重要也不紧急”作为辅助等等，应付什么需求都重要、什么需求都紧急的情况。 针对老板提的需求，下周要演示给老板看的需求，我们就乖乖地排期在前面吧，排除万难，没啥好说的~ 排期一直是历史难题，有以下“名言名句”供参考： 了解需求进入开发阶段的依赖条件，比如是否依赖设计稿还是接口，然后再进行排期。 不要把一天当8个或者更多的工作小时用，临时的会议或者被打断的现象太常见了。 排期留有余地，尤其是自己不熟悉的领域，风险较高。排期的计算方式有挺多，可以根据自己的丰富经验来，或者计算公式比如（一般能完成的天数 + 肯定能完成的天数）/2，或者（一般能完成的天数）* 系数，系数根据难度来区分。 把握好需求的节奏，如遇开发周期较长的需求，将需求拆分成N个子需求。 要明白，即使排期很轻松，你可能依然是最后一刻才完成，太扎心。 需求跟踪需求进入开发后，特别是大项目，得利用需求管理平台，这有利于需求的进度追踪，且方便我们汇报工作。不要把汇报工作当做负担，应化被动为主动。否则，周五下午某个时刻，你会收到产品经理的盘问：“做得怎么样了？进度如何？”；汇报工作，也有利于让大家看到自己的努力成果，成就感增倍，形成良好的工作循环；或者是了解身边的小伙伴在做什么，有利于交流。 我们现在每周五会开项目例会，汇报内容如下： 结果：进度如何，完成了哪些内容？ 计划：下周计划完成哪些内容？ 问题：讨论问题，找出问题的失误点、关键点、反思点，如何解决。 需求变更需求变更有时不可避免，我们还得拿出快速响应需求变更的本事，记录反馈所有的变更，拒绝不合理的需求。最好和产品经理达成一个共识，若因PRD的需求变动，则会根据实际情况重新排期。有代价，有反思，有利于督促双方在编写PRD、评审的阶段就开始认真对待，且定义好完成需求的标准。 研发管理打开昨天没关机的电脑屏幕，找到自己喜欢的姿势，或穿着格子衬衫、棉拖鞋，或套着护颈枕，或带着耳机听音乐，然后就开始搬砖了~~ 仓库管理为了规范代码仓库，使得版本的演进保持简洁，主干清晰，因此得遵循一些规则，避免由于维护困难造成的错误版本发布等问题。 分支要求： 每个需求必须新开一个本地分支，并备注好需求描述。 每个分支只做一个需求，切勿需求交叉修改。 合并后或无用的分支需立即删除，如果有修改，再重新拉一个新分支。 约束命名规则，如采取master、dev、feat、release、hotfix命名方式。 提交commit要求： 保证commit历史记录的整洁，要求提交的代码粒度要小， 尽量保证这个 commit只做一件事情，否则很难描述清楚。 约定commit提交规范，如 Angular 团队的规范&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;，且利用commitlint工具约束一些格式，同时避免使用-n强制提交。 有分支就有合并，合理选择适当的时机、适当的方式进行合并，比如merge --no-ff、merge --squash、rebase还是cherry-pick。大家都知道，变基有风险，且要遵循变基原则：只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作。 有合并就可能有冲突。如果一直存在大量的冲突，说明是分工、组织架构不对，需要减少多人同时改动同一份代码的几率。如遇到冲突，可采取以下措施： 降低合并分支冲突的数量，比如先合并少冲突的分支，再合并冲突多的分支。 熟悉Git操作，适当借助可视化合并工作。 合并后的代码检查，让代码实际运行一遍。 如果冲突的不是自己负责的代码，让具体负责人来参与代码合并。 代码管理 逻辑一定要清晰，考虑周全。不要只考虑普通情况，还要考虑什么情况会出错，失败了如何处理，总之，多维度去思考。 当第二次编写相同的代码时，是提取成组件的正确时机。对于大项目，第三次才提取，将会增强执行的阻力。 一定要多写注释，解释代码的意图和及其原因，再次回头看的时候，你也会十分感激自己，效率往上蹭。 如果函数或方法超过 30 行代码，考虑优化它，可用工具比如vscode的插件CodeMetrics辅助提示解决，心中要有一把尺子时刻鞭策自己，凡事得过自己那一关。 看到问题，即使暂时不能解决，一定要以某种方式把问题抛出来，不然容易遗忘在某个角落。当然，能解决就当场解决，再次拾起的时间、人力代价也是很高的。 风险管理即使小心再小心，意外总是会在某一刻发生。所以我们要时刻控制，降低需求变更、项目延期的风险，应用积累的经验和专业知识来预测何时会出现风险，以及如何采取有效的应对措施。 风险管理就是如何预防风险： 下面挑几个重点讲讲： 需求理解误差、难度误判、排期紧张，在分析评审阶段，可以一定程度地避免这些问题，当然也和我们自身的能力有关。自己越没有把握的事，争取留些时间以备不测，避免延期的情况出现。 确认有效的沟通方式，及时抛出异常。可在研发邮件中暴露进度是否异常、同步需求变更，是否存在待确认的问题，或者标红其他重要信息。 认真验收所有需求，是否遗漏功能。除了覆盖功能基本流程逻辑的形式，也可以从用户的使用习惯角度去进行场景测试。说起来容易，有时候做起来难，特别是对项目不是特别熟悉，项目又特别复杂的情况，此时要做的就是，根据代码影响的范围来确定自测的范围。项目成员可共同维护一份功能列表，以此为依据进行测试。 保证测试分支与将上线的内容一致，也就是说，保证测试分支的干净程度。如果测试完毕后才合并分支，可能带来合并冲突的类似问题。 针对大版本，分析上线前的依赖，通知到所有相关人员，最好开一个上线总动员的会议，共同探讨上线注意事项、遗留的问题。 针对小版本，约定上线的频次。可每周固定周二或周四发版，且发送上线申请邮件，不可随意发版。 上线前后，指定每人负责某些模块的测试以及风险管理，有利于内心产生更大的责任去做好，甚至可以影响督促别人。 报错异常、性能、服务异常要监控，保证第一时间收到异常并处理。 上线后，及时回顾总结项目的成功和失败之处，剖析各个环节存在的问题，为以后的项目提供参考。 一个优秀的程序员和一个普通程序员的差别，可能在于理解问题的深度。“试试重启一下电脑”，当电脑出现问题的时候，我们经常会想到这句话。但是有没有想过，可能失去了一个挖掘问题本质的机会，导致以后问题该出现的时候还是会出现。再者，我们码程序，修BUG，有时候忽略了质量，而去赶进度，这是得不偿失的，最后坑的还是自己啊。 总结以上从需求管理、研发管理、风险管理三个大方向，又细分了小方向去讲述如何管理好手上的项目。人本身就是一个产品，多个项目的集合。项目就要好心经营，精心管理，因为正是这一件一件的执行的过程，构成了我们丰富多彩的程序员生活。 经验有限，或许以上内容有瑕疵，欢迎交流与更正。谢谢大家~","pubDate":"Wed, 11 Sep 2019 07:00:00 GMT","guid":"https://aotu.io/notes/2019/09/11/project-management-of-programmer/","category":"项目总结"},{"title":"京东 PC 首页 2019 改版前端总结","link":"https://aotu.io/notes/2019/08/26/jdindex_2019/","description":"距离上次首页改版，已有2年3个月零五天。相比上次改版对首页整体框架、开发流程的大刀阔斧（前两次改版总结传送门：2016版，2017版），这次的改版看起来显得有点像跳水——没什么水花。在站在巨人肩膀上的小巨人的叮咛与期盼下，这次改版在延续17版的框架与流程的基础之上，为首页的稳定性、安全性、视觉体验、无障碍体验方面见缝插针地添了砖加了瓦。 本文将从以下几个方面进行阐述 引入强类型校验 升级资源构建方案 接入自动化测试 完善监控体系 优化页面加载体验：骨架屏 优化信息无障碍体验 引入强类型校验在性能几近无懈可击的情况下，我们决定从稳定性入手，为项目引入强类型校验，弥补 JavaScript 这种弱类型语言在不可预测性上的缺陷。 强类型语言 TypeScript 已发布6年有余，国内应用的开发者也在慢慢增长。一般来说，业务开发周期短，迭代频繁，TypeScript 的引入对于很大一部分开发者来说是一件费时费力的事，用的话业务可以上线，不用的话业务照样可以上线，因此团队极少在业务生产中应用。但秉承着不折腾不凹凸的理念，新版首页不负使命的，进行了基于 TS 的重构。 做 TS 重构并不难，把 js 后缀改成 ts 就好了。完。 当然是开玩笑的啦！显然，这样的 TS 是没有意义的。只有严格遵循 TS 标准的代码才能最大化 TS 的效用。在项目中，我们对 TS 的检查开启 strict 模式，每次提交时，都会对代码做一次完整的检查，只要有 TS 报错就禁止提交，旨在向成员传达一个信息——写强类型语言就该有觉悟，否则就是耍流氓。 没有深入使用过 TS 的同学在前期可能会感到人生的艰难，但这些都是为你好为了保证代码的健壮性。例如，在以往难以定位、查找的 window 全局变量的管理上，十分令开发者头疼，而引入了 TS 之后，只要对全局变量进行了接口设置，各个组件中再也不会出现多余或是未知全局变量的情况。再例如，在写一个拥有 get、set 方法的存贮类的时候，TS 能帮助检测获取内容的类型： 123456789101112131415161718192021222324interface MemoryState &#123; testa: boolean testb: string&#125;class Controller &#123; state: StateType constructor() &#123; this.state = &#123; state: &#123;&#125;, &#125; &#125; get&lt;K extends MemoryStateKeys&gt;(key: K) &#123; return this.state.memory[key] &#125; set&lt;K extends MemoryStateKeys&gt;(key: K, value: MemoryState[K]): MemoryState[K] &#123; this.state.memory[key] = value return value &#125;&#125; 当我们使用 new Controller().get(&quot;testb&quot;) 的时候，TS 能够在开发阶段检测 testb 是否是 string 类型。通过 TS 的检测插件，我们能放心的使用 string 类型对象的方法，简化繁复的判断逻辑，同时保证代码在获取到非期望值时能及时通过报错发现，一切的输入和输出都是稳定可预测的，四舍五入就是在写代码的时候自动走了一部分测试，为项目的开发与迭代保驾护航。 升级资源构建方案旧版首页项目使用的构建工具 Athena，推进了开发流程自动化，但是涉及到定制化的构建流程时，由于 Athena 的通用性，不方便直接做改动。首页包含直出、同步、异步三种类型的资源引用，需对资源的打包进行特殊处理，所以我们这次回归 Webpack，基于 Webpack 4.0 做了以下的方案优化： 发布流程优化 旧版的发布流程中，每次发布需要对改动的文件进行 diff 检查，避免产生不符合预期的误改动。Webpack 默认打包机制的特点，是根据模块的打包顺序为每一个模块提供一个按顺序编号的 ID，对文件的包进行依赖管理。旧版首页的入口文件包含依赖包管理的执行环境，因此任何一个包引入顺序发生变动时，入口文件都会发生变动。以上的打包机制会出现一个文件发生引入顺序变动时，可能会影响到编译后的几个甚至十几个文件发生变动的情况，而这些文件中的逻辑代码部分其实并不需要更新，这就降低了 diff 代码的准确性，使得这一中间检查措施失去了原本的意义。首页缓存机制与资源懒加载机制使得静态资源在发布时，需要对发生变动的文件进行 CDN 缓存清除的操作，也就意味着，改动文件越多，需要清除的缓存资源链接就越多，而链接越多，由于缓存清除不同步引起的资源异步加载出错的概率就越高，每次上线发布都存在一定的风险。 为了减少发布风险，新版首页的打包机制改变了 Webpack 的打包逻辑，通过设置，每个模块不再通过顺序编号的 ID 管理依赖包，而是通过文件目录生成哈希编码的专有 ID，并把依赖包的执行环境从入口文件中抽离出来作为一个单独的资源请求，这样每次改动文件时，可以只针对改动的文件 diff，剔除了其他非预期的 diff 情况。通过新的构建方案，使代码改动控制在预期的范围内，保证部署流程的稳定。 项目架构优化旧版页面的性能优化方案中，包含了部分 js 片段直出，这些代码是项目所依赖的基函数，需要在核心 js 代码执行之前启动。但这样的方案也有一些不尽人意的地方： 由于代码需要直出于页面模版中，考虑到兼容性，这些代码不能使用一些高级语法，每次改动都需要确保自己的代码没有兼容问题，导致维护成本巨高。同时，首页页面模版由后台负责管理，直出代码的改动需经过后台发布，迭代成本略高，风险也不小； 由于打包的限制，核心代码与模板代码存在同一套公用代码，代码冗余不说，一旦这部分代码发生变动还需要同时修改与发布两部分的代码，使得代码的维护成本增高。 针对以上问题，新版中我们将这些代码重新放入核心代码，模板代码中不再承载任何逻辑代码，迭代发版不再涉及模版发布，只需进行静态资源的发布即可，开发过程中统一使用 JS 高级语法，去除人工维护兼容语法代码的过程。 至此，我们通过增强资源打包的可预测性、以及优化项目资源架构两个方面对资源的发布方案进行了优化。 接入自动化测试一个页面开发完成后，在对其进行提测之前，对页面进行自测是一个必不可少的环节。一方面，保证页面所开发的功能能正常运作；另一方面，保证在对一个功能进行开发时，没有影响到页面其他区域功能的正常使用。 一般情况下，自测需要人为手动地进行测试，但这样会有两个缺点，第一，需要测试的区域数量过于巨大，相似的测试操作过于频繁，浪费了人力，也影响了测试的效率；第二，人为的自测由于没有统一的自测规范，因此在测试时很容易有所疏漏，从而忽视了一些看似微小，实则影响巨大的 bug，花费了大量的时间，却得不到自测所需要的效果。针对这种情况，我们产生了实施自动化测试的想法。以新版首页为例，我们通过使用 Nightwatch.js，为新版首页创建了一个自动化测试脚本，对新版的首页的73项用例进行自动化测试。 结果显示，通过自动化测试，在不到三分钟的时间内，完成了对新版首页73项用例的测试，这也意味着，若要通过自动化测试，来对任一页面进行自测，自测的时间都可控制在五分钟以内，并且准确性更高。将自动化测试应用在发布前以及上线后5分钟之内，及时检查测试用例，保证每次发版的安全。 完善监控体系旧版页面的前端监控体系覆盖了浏览器信息、页面加载测速、楼层隐藏方面，但信息通知较为滞后，且仅覆盖了页面 onLoad 时间，收到告警信息时，无法做到快速定位问题。 参考京东购物小程序目前的监控机制，新版首页针对代码报错、接口可用性增加了上报监控。 代码报错监控：BadJS通过 BadJS 框架捕获页面报错，并分析处理报错信息上报至京东 BadJS 服务。通过上报数据，我们可以得到报错的详细信息以及发生次数。通过分析上报数据，可以发现一些潜在的问题，及时修复，保证首页代码的健壮性。同时根据上报数，还可以预估出一个问题所造成的影响范围，便于预估损失。 业务可用性监控本次改版，在可用率上报系统中为首页补充了特定判定规则，包含调用次数、可用率、和 TP（性能指标）三个维度，在此基础上还可以对这三个维度进行环比，以减少误报的可能性，近期系统还上线了红灯告警-语音通知功能。 可用率上报系统一般被用来监听接口可用性，但对于首页来说，除了接口，还需关注楼层隐藏的情况。目前的兜底方案中，每个楼层中的模块接口兜底全部失效的情况下，会隐藏当前楼层。楼层一旦发生隐藏，则意味着出现了比较严重的问题，需快速关注并解决。可用率上报系统可做到触发告警规则时，1分钟之内即推送通知，精确到接口，便于及时发现问题，及时止损。需要注意的是，如何设置一套能够较为精确反映问题发生、减少假报警的阈值尤为重要，毕竟狼来了喊多了，也就等于没有监控。 测速上报这一部分延用了旧版的 Athena 测速上报方案，并对一些与业务数据上报重复的部分做了减法，同时增加了接口的测速上报，完善故障追溯数据体系。 优化页面加载体验：骨架屏旧版页面懒加载的占位方案采用了统一区域 loading 动画的方式，这种方式的优势在于复用成本低，适配性强。但如果遇到较大面积的模块或是模块较为密集的情况时，区域 loading 动画的体验有所下降————要么是空白区域过大，要么是 loading 动画过于密集，模块加载过程造成的视觉差异感知较为明显。而对于 PC 首页来说，空白区域过大是主要存在的问题。 低网速下旧版首页的 loading 体验 这次改版，我们引入了骨架屏方案，最终目的是以灰色豆腐块的形式尽量缩小真实模块结构与加载占位之间的视觉差异。执行起来可以按照视觉差异分为两种对应关系： 弱对应关系：只对模块进行标题、子项等主要内容进行块化处理，复用性较高，适配性中等； 强对应关系：以视觉效果为基础，对子项进一步作出图片、文案的块化处理，针对占位面积较大、内容更为复杂的子项进行更细化的块化拆分，复用性低，适配性高。 考虑到首页的特殊性，我们最终选择了强对应关系的骨架屏方案，并为了可扩展性，使用的是使用样式渲染的骨架屏，而不是直接使用图片占位。除了开发成本的上升，页面首屏加载代码量也有所增加。 项目结构使用骨架屏所要达到的效果包含以下几点： 提前占位，在页面的加载中滚动条不发生较为明显的跳动； 页面快速滚动时也能看到骨架屏样式的占位。 也就意味着骨架屏的内容需要与页面做同步加载处理，结合懒加载组件，骨架屏组件需提前作为 loading 结构传入，并保证样式在页面渲染的第一时间进行加载，否则就失去了骨架屏的意义。 每个需要骨架屏样式的组件，单独拆分出一个 placeholder 组件。组件内的占位结构包含两类样式——颜色与尺寸定位，加上容器外层的动画效果样式。颜色样式全页公用，尺寸定位样式与正式组件公用： 尺寸定位样式与正式组件公用的目的是为了在将来组件样式发生变化时，保证骨架屏与正式样式的统一修改，避免出现样式修改上的遗漏，但同时增加了样式的维护成本。同时样式编写与拆分的过程中也需要开发者注意兼容骨架屏的样式，例如需要占位豆腐块的容器间距 padding、margin 的选择都很重要。因此这次首页的骨架屏尝试并不适合快速复用至其他项目。 新版首页骨架屏 loading 体验 优化信息无障碍体验互联网信息无障碍，即针对视力障碍人士所提供的辅助。系统级别的辅助主要依赖读屏工具，读屏工具可以解决网页端信息无障碍 60%的阻碍，剩余的 40%需要在网页开发的过程中由开发者进行体验优化。 没有做任何信息无障碍处理的网页，使用读屏工具访问时一般存在以下几个问题： 多余无用信息的播报，例如：跳转链接、图片名称； 弹出浮层无法访问； 懒加载内容直接跳过； 为了造福国内一百一十人中的一个视障人士（数据来自这里），本次改版，我们决定在 PC 首页开启京东商城桌面端首个信息无障碍实践。 桌面端视障用户的操作主要通过键盘进行。针对刚才提出的几个问题，PC 首页初步的无障碍体验优化方案分为几个阶段。 第一阶段，语义化一切 tab 可及的元素——包含页面外跳转链接的 a 标签统一添加 aria-label 属性，以便读屏软件能够简化读取元素信息； 第二阶段，保证页面主要模块的访问——懒加载内容占位容器将 tab-index 设置为大于 0 的值，使得 tab 键能够遍历到，以便触发页面懒加载，避免 tab 直接跳过； 第三阶段，扩展带弹出浮层等元素的操作——针对无障碍增加弹出浮层交互逻辑，入口增加 aria-haspopup 属性，告诉读屏软件这里是弹出浮层的入口，将 tab-index 设置为大于 0 的数值使得 tab 操作可聚焦到，浮层弹出后焦点自动聚焦至浮层； 第四阶段，为视障用户额外增加快捷跳转——参考 Google 搜索结果页，可在页面的顶部，增加一些隐藏的快捷跳转。PC 首页本次对搜索框以及底部的“为你推荐”位置增加了隐藏跳转链接，只有使用键盘操作的用户能够定位到。 对于商城页面来说，第一阶段能满足基本的内容访问，而如果能做到第四阶段，才能算一个完整的信息无障碍网站。商城业务中，无障碍体验一直缺乏相应的规范与测试流程，因此通过本次 PC 首页的改版实践，输出了一份针对商城频道页的信息无障碍开发规范，内容包含： 访问路径设计规范 语义化规范 读屏测试规范 未来将借由这份规范，陆续实现商城其他业务的无障碍体验优化。 综上，本次改版对于开发者来说最大的变化，就是本地开发体验更加舒服、发布风险有所降低、故障追溯更加完善，而对用户来说，页面加载跳动感大大减小，视障用户的体验终于得以照顾到。作为商城桌面端的入口与门面，首页的改进一定不止于此，希望每一次的改版都能有一丝的优化，使得首页这个项目趋近完美。","pubDate":"Mon, 26 Aug 2019 09:00:00 GMT","guid":"https://aotu.io/notes/2019/08/26/jdindex_2019/","category":"PC"},{"title":"serverless","link":"https://aotu.io/notes/2019/08/05/serverless/","description":"Serverless 架构即“无服务器”架构，它是一种全新的架构方式，是云计算时代一种革命性的架构模式。与云计算、容器和人工智能一样，Serverless 是这两年IT行业的一个热门词汇，它在各种技术文章和论坛上都有很高的曝光度。 目前行业可能更多处在容器 Docker+Kubernetes, 利用 IaaS、PaaS和SaaS 来快速搭建部署应用 什么是ServerlessServerless 圈内俗称为“无服务器架构”，Serverless 不是具体的一个编程框架、类库或者工具。简单来说，Serverless 是一种软件系统架构思想和方法，它的核心思想是用户无须关注支撑应用服务运行的底层主机。这种架构的思想和方法将对未来软件应用的设计、开发和运营产生深远的影响。 所谓“无服务器”，并不是说基于 Serverless 架构的软件应用不需要服务器就可以运行，其指的是用户无须关心软件应用运行涉及的底层服务器的状态、资源（比如 CPU、内存、磁盘及网络）及数量。软件应用正常运行所需要的计算资源由底层的云计算平台动态提供。 Serverless的技术实现Serverless 的核心思想是让作为计算资源的服务器不再成为用户所关注的一种资源。其目的是提高应用交付的效率，降低应用运营的工作量和成本。以 Serverless 的思想作为基础实现的各种框架、工具及平台，是各种 Serverless 的实现（Implementation）。Serverless不是一个简单的工具或框架。用户不可能简单地通过实施某个产品或工具就能实现 Serverless 的落地。但是，要实现 Serverless 架构的落地，需要一些实实在在的工具和框架作为有力的技术支撑和基础。 随着 Serverless 的日益流行，这几年业界已经出现了多种平台和工具帮助用户进行 Serverless 架构的转型和落地。目前市场上比较流行的 Serverless 工具、框架和平台有： AWS Lambda，最早被大众所认可的 Serverless 实现。 Azure Functions，来自微软公有云的 Serverless 实现。 OpenWhisk，Apache 社区的开源 Serverless 框架。 Kubeless，基于 Kubernetes 架构实现的开源 Serverless 框架。 Fission，Platform9 推出的开源 Serverless 框架。 OpenFaaS，以容器技术为核心的开源 Serverless 框架。 Fn，来自 Oracle 的开源 Serverless 框架，由原 Iron Functions 团队开发。 列举的 Serverless 实现有的是公有云的服务，有的则是框架工具，可以被部署在私有数据中心的私有云中（私有云 Serverless 框架 OpenWhisk、Fission 及 OpenFaaS）。每个 Serverless 服务或框架的实现都不尽相同，都有各自的特点。 FaaS与BaaSIT是一个永远都不消停的行业，在这个行业里不断有各种各样新的名词和技术诞生，云计算（Cloud Computing）的出现是21世纪IT业界最重大的一次变革。云计算的发展从基础架构即服务（Infrastructure as a Service， IaaS），平台即服务（Platform as a Service，PaaS），软件即服务（Software as a Service，SaaS），慢慢开始演变到函数即服务（Function as a Service，FaaS）以及后台即服务（Backend as a Service，BaaS），Serverless 无服务化。 目前业界的各类 Serverless 实现按功能而言，主要为应用服务提供了两个方面的支持：函数即服务（Function as a Service，FaaS）以及后台即服务（Backend as a Service，BaaS）。 1.FaaSFaaS 提供了一个计算平台，在这个平台上，应用以一个或多个函数的形式开发、运行和管理。FaaS 平台提供了函数式应用的运行环境，一般支持多种主流的编程语言，如 Java、PHP 及 Python 等。FaaS 可以根据实际的访问量进行应用的自动化动态加载和资源的自动化动态分配。大多数 FaaS 平台基于事件驱动（Event Driven）的思想，可以根据预定义的事件触发指定的函数应用逻辑。 目前业界 FaaS 平台非常成功的一个代表就是AWS Lambda平台。AWS Lambda 是 AWS 公有云服务的函数式计算平台。通过 AWS Lambda，AWS 用户可以快速地在 AWS 公有云上构建基于函数的应用服务。 2.BaaS为了实现应用后台服务的 Serverless 化，BaaS（后台即服务）也应该被纳入一个完整的 Serverless 实现的范畴内。通过 BaaS 平台将应用所依赖的第三方服务，如数据库、消息队列及存储等服务化并发布出来，用户通过向 BaaS 平台申请所需要的服务进行消费，而不需要关心这些服务的具体运维。 BaaS 涵盖的范围很广泛，包含任何应用所依赖的服务。一个比较典型的例子是数据库即服务（Database as a Service，DBaaS）。许多应用都有存储数据的需求，大部分应用会将数据存储在数据库中。传统情况下，数据库都是运行在数据中心里，由用户运维团队负责运维。在DBaaS的场景下，用户向 DBaaS 平台申请数据库资源，而不需要关心数据库的安装部署及运维。 Serverless的技术特点为了实现解耦应用和服务器资源，实现服务器资源对用户透明，与传统架构相比，Serverless 架构在技术上有许多不同的特点。 1.按需加载 在 Serverless 架构下，应用的加载（load）和卸载（unload）由 Serverless 云计算平台控制。这意味着应用不总是一直在线的。只有当有请求到达或者有事件发生时才会被部署和启动。当应用空闲至一定时长时，应用会到达或者有事件发生时才会被部署和启动。当应用空闲至一定时长时，应用会被自动停止和卸载。因此应用并不会持续在线，不会持续占用计算资源。 2.事件驱动 Serverless 架构的应用并不总是一直在线，而是按需加载执行。应用的加载和执行由事件驱动，比如HTTP请求到达、消息队列接收到新的信息或存储服务的文件被修改了等。通过将不同事件来源（Event Source）的事件（Event）与特定的函数进行关联，实现对不同事件采取不同的反应动作，这样可以非常容易地实现事件驱动（Event Driven）架构。 3.状态非本地持久化 云计算平台自动控制应用实例的加载和卸载，且应用和服务器完全解耦，应用不再与特定的服务器关联。因此应用的状态不能，也不会保存在其运行的服务器之上，不能做到传统意义上的状态本地持久化。 4.非会话保持 应用不再与特定的服务器关联。每次处理请求的应用实例可能是相同服务器上的应用实例，也可能是新生成的服务器上的应用实例。因此，用户无法保证同一客户端的两次请求由同一个服务器上的同一个应用实例来处理。也就是说，无法做到传统意义上的会话保持（Sticky Session）。因此，Serverless架构更适合无状态的应用。 5.自动弹性伸缩 Serverless 应用原生可以支持高可用，可以应对突发的高访问量。应用实例数量根据实际的访问量由云计算平台进行弹性的自动扩展或收缩，云计算平台动态地保证有足够的计算资源和足够数量的应用实例对请求进行处理。 6.应用函数化 每一个调用完成一个业务动作，应用会被分解成多个细颗粒度的操作。由于状态无法本地持久化，这些细颗粒度的操作是无状态的，类似于传统编程里无状态的函数。Serverless 架构下的应用会被函数化，但不能说 Serverless 就是 Function as a Service（FaaS）。Serverless 涵盖了 FaaS 的一些特性，可以说 FaaS 是 Serverless 架构实现的一个重要手段。 Serverless的应用场景通过将 Serverless 的理念与当前 Serverless 实现的技术特点相结合，Serverless 架构可以适用于各种业务场景。 1.Web应用 Serverless 架构可以很好地支持各类静态和动态Web应用。如 RESTful API 的各类请求动作（GET、POST、PUT及DELETE等）可以很好地映射成 FaaS 的一个个函数，功能和函数之间能建立良好的对应关系。通过 FaaS 的自动弹性扩展功能，Serverless Web 应用可以很快速地构建出能承载高访问量的站点。 2.移动互联网 Serverless 应用通过 BaaS 对接后端不同的服务而满足业务需求，提高应用开发的效率。前端通过FaaS提供的自动弹性扩展对接移动端的流量，开发者可以更轻松地应对突发的流量增长。在 FaaS 的架构下，应用以函数的形式存在。各个函数逻辑之间相对独立，应用更新变得更容易，使新功能的开发、测试和上线的时间更短。 3.物联网（Internet of Things，IoT） 物联网（Internet of Things，IoT）应用需要对接各种不同的数量庞大的设备。不同的设备需要持续采集并传送数据至服务端。Serverless 架构可以帮助物联网应用对接不同的数据输入源。 4.多媒体处理 视频和图片网站需要对用户上传的图片和视频信息进行加工和转换。但是这种多媒体转换的工作并不是无时无刻都在进行的，只有在一些特定事件发生时才需要被执行，比如用户上传或编辑图片和视频时。通过 Serverless 的事件驱动机制，用户可以在特定事件发生时触发处理逻辑，从而节省了空闲时段计算资源的开销，最终降低了运维的成本。 5.数据及事件流处理 Serverless 可以用于对一些持续不断的事件流和数据流进行实时分析和处理，对事件和数据进行实时的过滤、转换和分析，进而触发下一步的处理。比如，对各类系统的日志或社交媒体信息进行实时分析，针对符合特定特征的关键信息进行记录和告警。 6.系统集成 Serverless 应用的函数式架构非常适合用于实现系统集成。用户无须像过去一样为了某些简单的集成逻辑而开发和运维一个完整的应用，用户可以更专注于所需的集成逻辑，只编写和集成相关的代码逻辑，而不是一个完整的应用。函数应用的分散式的架构，使得集成逻辑的新增和变更更加灵活。 Serverless的局限世界上没有能解决所有问题的万能解决方案和架构理念。Serverless 有它的特点和优势，但是同时也有它的局限。有的局限是由其架构特点决定的，有的是目前技术的成熟度决定的，毕竟 Serverless 还是一个起步时间不长的新兴技术领域，在许多方面还需要逐步完善。 1.控制力 Serverless 的一个突出优点是用户无须关注底层的计算资源，但是这个优点的反面是用户对底层的计算资源没有控制力。对于一些希望掌控底层计算资源的应用场景，Serverless 架构并不是最合适的选择。 2.可移植性 Serverless 应用的实现在很大程度上依赖于 Serverless 平台及该平台上的 FaaS 和 BaaS 服务。不同IT厂商的 Serverless 平台和解决方案的具体实现并不相同。而且，目前 Serverless 领域尚没有形成有关的行业标准，这意味着用户将一个平台上的 Serverless 应用移植到另一个平台时所需要付出的成本会比较高。较低的可移植性将造成厂商锁定（Vendor Lock-in）。这对希望发展 Serverless 技术，但是又不希望过度依赖特定供应商的企业而言是一个挑战。 3.安全性 在 Serverless 架构下，用户不能直接控制应用实际所运行的主机。不同用户的应用，或者同一用户的不同应用在运行时可能共用底层的主机资源。对于一些安全性要求较高的应用，这将带来潜在的安全风险。 4.性能 当一个 Serverless 应用长时间空闲时将会被从主机上卸载。当请求再次到达时，平台需要重新加载应用。应用的首次加载及重新加载的过程将产生一定的延时。对于一些对延时敏感的应用，需要通过预先加载或延长空闲超时时间等手段进行处理。 5.执行时长 Serverless 的一个重要特点是应用按需加载执行，而不是长时间持续部署在主机上。目前，大部分 Serverless 平台对 FaaS 函数的执行时长存在限制。因此 Serverless 应用更适合一些执行时长较短的作业。 6.技术成熟度 虽然 Serverless 技术的发展很快，但是毕竟它还是一门起步时间不长的新兴技术。因此，目前 Serverless 相关平台、工具和框架还处在一个不断变化和演进的阶段，开发和调试的用户体验还需要进一步提升。Serverless 相关的文档和资料相对比较少，深入了解 Serverless 架构的架构师、开发人员和运维人员也相对较少。 Other Resources精读《Serverless 给前端带来了什么》Docker — 从入门到实践serverless-chrome怎么理解 IaaS、SaaS 和 PaaS 的区别？","pubDate":"Mon, 05 Aug 2019 02:27:06 GMT","guid":"https://aotu.io/notes/2019/08/05/serverless/","category":"Web开发"},{"title":"使用 React Hooks 重构你的小程序","link":"https://aotu.io/notes/2019/07/10/taro-hooks/","description":"本文由余澈在 GMTC 全球大前端技术 2019 的演讲：《使用 React Hooks 重构你的小程序》整理而成。 背景一直关注小程序开发的朋友应该会注意到，最开始小程序就是为了微型创新型业务打造的一个框架，最多只能运行 1m 的包。可是后来发现很多厂商把越来越多的业务搬到了小程序上，小程序的能力也在不断地开放，变得越来越强大。于是后来打包限制上升到了 2m，然后引入了分包，现在已经已经可以上传 8m 的小程序。其实这个体积已经可以实现非常巨型非常复杂的业务了。就从 Taro 的用户来看，例如京东购物小程序和 58 同城小程序不管从代码的数量还是复杂度都不亚于 PC 端业务，所以我们可以说前端开发的复杂度正在向小程序端转移。 而小程序开发其实也是前端开发的一个子集，在整个前端业界，我们又是怎么解决复杂度这个问题的呢？ 首先我们看看 React：React Core Team 成员，同时也是 Redux 的作者 Dan Abramov 在 2018 年的 ReactConf 向大家首次介绍了 React Hooks。React Hooks 是为了解决 Class Component 的一些问题而引入的： Class Component 组件间的逻辑难以复用。因为 JavaScript 不像 Go 或 C++ 一样，Class 可以多重继承，类的逻辑的复用就成了一个问题； 复杂组件难以理解。Class Component 经常会在生命周期做一些数据获取事件监听的副作用函数，这样的情况下我们就很难把组件拆分为更小的力度； Class 令人迷惑。很多新手应该会被 Class 组件绑定事件的 this 迷惑过，绑定事件可以用 bind，可以直接写箭头函数，也可以写类属性函数，但到底哪种方法才是最好的呢？而到了 ES 2018，class 还有多种语法，例如装饰器，例如 private fileds 这些奇奇怪怪的语法也为新手增加了更多的困惑。 而对于 Vue 而言也有相同的问题，Vue 的作者尤玉溪老师在 VueConf China 2019 也给 Vue 3.0 引入了一个叫 Functional-based API 的概念，它是受 React Hooks 启发而增加的新 API。由于 Vue 2.0 组件组合的模式是对象字面量形式，所以 Functional-based API 可以作为 Mixins 的替代，配合新的响应式 API 作为新的组件组合模式。那么对于 Vue 3.0 我们还知之甚少，以后的 API 也有可能改变，但或许是英雄所见略同，React 和 Vue 对于降低前端开发复杂度这一问题都不约而同地选择了 Hooks 这一方案，这到底是为什么呢？ 我们可以一下之前的组件组合方案，首先是 Mixins，红色圈的 Mixins，黄色的是组件，我们知道 Mixins 其实就是把多个对象组合成一个对象，Mixins 的过程就有点像调用 Object.assgin 方法。那 Mixins 有什么问题呢？首先是命名空间耦合，如果多个对象同名参数，这些参数就会耦合在一起；其次由于 Mixins 必须是运行时才能知道具体有什么参数，所以是 TypeScript 是无法做静态检查的；第三是组件参数不清晰，在 Mixins 中组件的 props 和其他参数没什么两样，很容易被其它的 Mixins 覆盖掉。 为了解决 Mixins 的问题，后来发展出了高阶组件（HOC）的方式，高阶组件就和图里一样，一个组件嵌套着另外的组件。它的确解决了 Mixins 的一些问题，例如命名空间解耦，由于每次都会生成新组件，就不存在命名空间问题了；其次它也能很好地做静态检查；但它依然没有办法处理组件 props 的问题，props 还是有可能会在高阶组件中被更改；而且它还有了新的问题，每多用一次高阶组件，都会多出一个组件实例。 最后我们来看一下 Hooks，紫色的圈圈是 Hooks，就像图里一样，Hooks 都在同一个组件里，Hooks 之间还可以相互调用。因为 Hooks 跑在一个普通函数式组件里，所以他肯定是没有命名空间的问题，同时 TypeScript 也能对普通函数做很好的静态检查，而且 Hooks 也不能更改组件的 Props，传入的是啥最后可用的就是啥；最后 Hooks 也不会生成新的组件，所以他是单组件实例。 在 Taro 1.3 版本，我们实现了一大堆特性，其中的重头戏就是 React Hooks 的支持。虽然 React Hooks 正式稳定的时间并不长，但我们认为这个特性能有效地简化开发模式，提升开发效率和开发体验。即便 Hooks 的生态和最佳实践还尚未完善，但我们相信未来 Hooks 会成为 React 开发模式的主流，也会深刻地影响其它框架未来的 API 构成。所以在 Taro 的规划中我们也把 Hooks 放在了很重要的位置。 什么是 Hooks？相信笔者扯了那么多，大家对 Hooks 应该产生了一些兴趣，那什么是 Hooks 呢？简单来说，Hooks 就是一组在 React 组件中运行的函数，让你在不编写 Class 的情况下使用 state 及其它特性。具体来说，Hooks 可以表现为以下的形式： useState 与内部状态我们可以看一个原生小程序的简单案例，一个简单计数器组件，点击按钮就 + 1，相信每位前端开发朋友都可以轻松地写一个计数器组件。但我们可以稍微改一下代码，把事件处理函数改为箭头函数。如果是这样代码就跑不了了。事实上在原生开发中 this 的问题是一以贯之的，所以我们经常要开个新变量把 this 缓存起来，叫做 self 什么的来避免类似的问题。我们之前也提到过，如果采用 ES6 的 Class 来组织组件同样也会遇到 this 指向不清晰的问题。 12345678910Page(&#123; data: &#123; count: 0 &#125;, increment: () =&gt; &#123; // 这里写箭头函数就跑不了了 this.setData(&#123; count: this.data.count + 1 &#125;) &#125;&#125;) 再来看看我们的 hooks 写法，我们引入了一个叫 useState 的函数，它接受一个初始值参数，返回一个元组，如果是写后端的同学应该对这个模式比较熟悉，就像 Koa 或者 Go 一样，一个函数返回两个值或者说叫一个元组，不过我们返回的第一个参数是当前的状态，一个是设置这个状态的函数，每次调用这个设置状态的 setState 函数都会使得整个组件被重新渲染。然后用 ES6 的结构语法把它俩解构出来使用。 然后我们在定义一个增加的函数，把他绑定到 onClick 事件上。 123456789101112131415161718function Counter () &#123; // 返回一个值和一个设置值的函数 // 每次设置值之后会重新渲染组件 const [ count, setCount ] = useState(0) function increment () &#123; setCount(count + 1) &#125; return ( &lt;View&gt; &lt;Text&gt;You clicked &#123;count&#125; times&lt;/Text&gt; &lt;Button onClick=&#123;increment&#125;&gt; Click me &lt;/Button&gt; &lt;/View&gt; )&#125; 同样是非常简单的代码。如果你熟悉 Taro 之前的版本的话就会知道这样的代码在以前的 Taro 是跑不了的，不过 Taro 1.3 之后事件传参可以传入任何合法值，你如果想直接写箭头函数或者写一个柯里化的函数也是完全没有问题的。 大家可以发现我们使用的 Hooks 就是一个非常简单非常 normal 的函数，没有 this 没有 class，没有类构造函数，没有了 this，再也不会出现那种 this、self 傻傻分不清楚的情况。 大家可以记住这个简单的计数器组件，以后之后讲的很多案例是基于这个组件做的。 useEffect 与副作用接下来我们看一个稍微复杂一些的例子，一个倒计时组件，我们点击按钮就开始倒计时，再点击就停止倒计时。在我们这个组件里有两个变量，start 用于控制是否开始计时，time 就是我们的倒计时时间。这里注意我们需要多次清除 interval，而在现实业务开发中，这个 touchStart 函数可能会复杂得多，一不小心就会提前清除 interval 或忘记清除。 123456789101112131415161718192021Page(&#123; data: &#123; time: 60 &#125;, start: false, toggleStart () &#123; this.start = !this.start if (this.start) &#123; this.interval = setInterval(() =&gt; &#123; this.setData(&#123; time: this.data.time - 1 &#125;) &#125;, 1000) &#125; else &#123; clearInterval(this.interval) &#125; &#125;, onUnload () &#123; clearInterval(this.interval) &#125;&#125;) 12345&lt;view&gt; &lt;button bindtap=\"toggleStart\"&gt; &#123;&#123;time&#125;&#125; &lt;/button&gt;&lt;/view&gt; 而我们 Hooks 的例子会是这样：我们引入了一个 useEffect 函数。之前我们提到过，每次调用 useState 返回的 setState 函数都会重新调用整个函数，其实就包括了 useEffect 函数，useEffect 接受两个参数。第一个就是副作用，也就是 effect 函数，他不接受也不返回任何参数。第二个参数是依赖数组，当数组中的变量变化时就会调用，第一个参数 effect 函数。Effect 函数还可以返回一个函数，这个函数在下一次 effect 函数被调用时或每次组件被注销时或者就会调用，我们可以在这里清楚掉一些事件的订阅或者 interval 之类可能会导致内存泄露的行为。在我们这个例子中，当 start 每次变化就会重新跑一次 effect 函数，每隔一秒会设置一次 time 的值让它减一，但这样的写法是有问题的。 123456789101112131415161718192021function Counter () &#123; const [ start, setStart ] = useState(false) const [ time, setTime ] = useState(60) useEffect(() =&gt; &#123; // effect 函数，不接受也不返回任何参数 let interval if (start) &#123; interval = setInterval(() =&gt; &#123; // setTime(time - 1) ❌ time 在 effect 闭包函数里是拿不到准确值的 setTime(t =&gt; t -1) // ✅ 在 setTime 的回调函数参数里可以拿到对应 state 的最新值 &#125;, 1000) &#125; return () =&gt; clearInterval(interval) // clean-up 函数，当前组件被注销时调用 &#125;, [ start ]) // 依赖数组，当数组中变量变化时会调用 effect 函数 return ( &lt;View&gt; &lt;Button onClick=&#123;() =&gt; setStart(!start)&#125;&gt;&#123;time&#125;&lt;/Button&gt; &lt;/View&gt; )&#125; 因为我们在 setInterval 这个函数的闭包中，我们捕捉到 time 这个变量的值不能和最新的值对应得上，time 的值有可能在我们意料之外地被更改了多次。解决的方案也很简单，之前我们提到过 useState 返回的 setState 方法，可以接受一个函数作为参数，而这个函数的参数，就是 state 最新的值，所以只要我们传入一个函数就好了。这是其中一种方法。 还有另一种方法是使用 useRef Hooks，useRef 可以返回一个可变的引用，它会生成一个对象，对象里这个有 current 属性，而 current 的值是可变的。在我们这个例子里，每次更改 currentTime.current 都是同步的，而且 currentTime 是一个引用，所以 currentTime.current 一定是可控的。 123456789101112131415161718192021function Counter () &#123; const [ start, setStart ] = useState(false) const [ time, setTime ] = useState(60) const currentTime = useRef(time) // 生成一个可变引用 useEffect(() =&gt; &#123; // effect 函数，不接受也不返回任何参数 let interval if (start) &#123; interval = setInterval(() =&gt; &#123; setTime(currentTime.current--) // currentTime.current 是可变的 &#125;, 1000) &#125; return () =&gt; clearInterval(interval) // clean-up 函数，当前组件被注销时调用 &#125;, [ start ]) // 依赖数组，当数组中变量变化时会调用 effect 函数 return ( &lt;View&gt; &lt;Button onClick=&#123;() =&gt; setStart(!start)&#125;&gt;&#123;time&#125;&lt;/Button&gt; &lt;/View&gt; )&#125; 虽然说我们可以 useRef 来解决这个问题，但是没必要这样做。因为 setTime 传递一个回调函数的方法显然可读性更高。真正有必要的是把我们的 interval 变量作为一个 ref，我们在函数最顶层的作用域把 interval 作为一个 ref，这样我们就可以在这个函数的任何一个地方把他清除，而原来的代码中我们把 interval 作为一个普通的变量放在 effect 函数里，这样如果我们有一个事件也需要清除 interval，这就没法做到了。但是用 useRef 生成可变引用就没有这个限制。 1234567891011121314151617181920function Counter () &#123; const [ start, setStart ] = useState(false) const [ time, setTime ] = useState(60) const interval = useRef() // interval 可以在这个作用域里任何地方清除和设置 useEffect(() =&gt; &#123; // effect 函数，不接受也不返回任何参数 if (start) &#123; interval.current = setInterval(() =&gt; &#123; setTime(t =&gt; t - 1) // ✅ 在 setTime 的回调函数参数里可以拿到对应 state 的最新值 &#125;, 1000) &#125; return () =&gt; clearInterval(interval.current) // clean-up 函数，当前组件被注销时调用 &#125;, [ start ]) // 依赖数组，当数组中变量变化时会调用 effect 函数 return ( &lt;View&gt; &lt;Button onClick=&#123;() =&gt; setStart(!start)&#125;&gt;&#123;time&#125;&lt;/Button&gt; &lt;/View&gt; )&#125; useContext 与跨组件通信接下来我们再来看一个跨组件通信的例子，例如我们有三个组件，page 组件有一个 child 组件，child 组件有一个 counter 组件，而我们 counter 组件的 count 值和 setCount 函数，是由 page 组件传递下来的。这种情况在一个复杂业务的开发中也经常能遇到，在原生小程序开发中我们应该怎么做呢？ 我们需要手动的把我们 counter 的值和函数手动地依次地传递下去，而这样的传递必须是显式的，你需要在 JavaScript 中设置 props 的参数，也需要在 WXML 里设置 props 的参数，一个也不能少，少了就跑不动。我们还注意到即便 child 组件没有任何业务逻辑，他也必须要设置一个 triggerEvent 的函数和 props 的类型声明。这样的写法无疑是非常麻烦而且限制很大的。 1234567891011121314151617181920&lt;!-- page.wxml --&gt;&lt;view&gt; &lt;child /&gt;&lt;/view&gt;&lt;!-- child.wxml --&gt;&lt;view&gt; &lt;counter /&gt;&lt;/view&gt;&lt;!-- counter.wxml --&gt;&lt;view&gt; &lt;text&gt; You clicked &#123;&#123;count&#125;&#125; times &lt;/text&gt; &lt;butto bindtap=\"increment\"&gt; Click me &lt;/button&gt;&lt;/view&gt; 1234567891011121314151617181920212223242526272829303132333435// page.jsPage(&#123; data: &#123; count: 0 &#125;, increment () &#123; this.setData(&#123; count: this.data.count + 1 &#125;) &#125;&#125;)// child.jsComponent(&#123; properties: &#123; count: Number &#125;, methods: &#123; increment () &#123; this.triggerEvent('increment') &#125; &#125;&#125;)// counter.jsComponent(&#123; properties: &#123; count: Number &#125;, methods: &#123; increment () &#123; this.triggerEvent('increment') &#125; &#125;&#125;) 而我们可以看看 Hooks 的写法，首先我们用 Taro.createContext 创建一个 context 对象，在我们 page 组件里把我们的 count 和 setCount 函数作为一个对象传入到 Context.Provider 的 value 里。然后在我们的 Counter 组件，我们可以使用 useContext 这个 Hooks 把我们的 count 和 setCount 取出来，就直接可以使用了。 12345678910111213141516171819202122232425262728293031323334export const CounterContext = Taro.createContext(null);// page.jsconst Page = () =&gt; &#123; const [ count, setCount ] = useState(0) return ( &lt;CounterContext.Provider value=&#123;&#123; count, setCount &#125;&#125;&gt; &lt;Child /&gt; &lt;/CounterContext.Provider&gt; );&#125;;// child.jsconst Child = () =&gt; ( &lt;View&gt; &lt;Counter /&gt; &lt;/View&gt;);// counter.jsconst Counter = () =&gt; &#123; const &#123; count, setCount &#125; = useContext(CounterContext) return ( &lt;View&gt; &lt;Text&gt; You clicked &#123;count&#125; times &lt;/Text&gt; &lt;Button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/Button&gt; &lt;/View&gt; )&#125; 大家可以发现使用 Context 的代码比原来的代码精简了很多，参数不需要一级一级地显式传递，child 组件也和事实一样，没有一行多余的逻辑。但精简不是最大的好处。最大的好处是大家可以发现我们的 Context 可以传递一个复杂的对象，熟悉小程序原生开发的同学可能会知道，所有 props 的传递都会被小程序序列化掉，如果传递了一个复杂的对象最终会变成一个 JSON。但是用 Taro 的 context 则没有这层限制，你可以传入一个带有函数的对象，也可以传入像是 imutabale 或者 obserable 这样复杂的对象。在 taro 1.3 我们对 props 系统进行了一次重构，Taro 的 context 和 props 一样，属性传递没有任何限制，想传啥就传啥。 另外一个值得注意的点的是，context 的传递可以无视父级组件的更新策略，在这个例子中即便我们通过 shouldComponentUpdate() 禁止了 child 组件的更新，但 counter 作为它的子组件依然是可以更新的。这个特性可以让我们做性能优化的时候更为灵活一些。 Hooks 在小程序实战讲完了 Hooks 的基本使用，有些同学会觉得：咦，我怎么觉得你这几个东西感觉平平无奇，没什么特别的。但实际上这些基础的 Hooks 单独拿出来看的确不能玩出什么花样，但他们组合起来却能迸发强大的力量。 自定义 Hooks大家在业务开发可能会遇到这样的需求，实现一个双击事件，如果你是从 H5 开发过来的可能会直接写 onDoubleClick，但很遗憾，小程序组件是没有 doubleClick 这个事件的。当然，如果你使用 Taro 又用了 TypeScript 就不会犯这样的错误，编辑器就回直接给你报错 Text 组件没有这个属性。 于是你就自己实现了一个双击事件，代码大概是这样，有一个上次点击的时间作为状态，每次触发单机事件的时候和上次点击的时间做对比，如果间隔过小，那他就是一个双击事件。代码非常简单，但我们不禁就会产生一个问题问题，每一次给一个组件加单击事件，我们就每次都加这么一坨代码吗？ 12345678910111213141516171819202122232425function EditableText (&#123; title &#125;) &#123; const [ lastClickTime, setClickTime ] = useState(0) const [ editing, setEditing ] = useState(false) return ( &lt;View&gt; &#123; editing ? &lt;TextInput editing=&#123;editing&#125; /&gt; : &lt;Text onClick=&#123;e =&gt; &#123; const currentTime = e.timeStamp const gap = currentTime - lastClickTime if (gap &gt; 0 &amp;&amp; gap &lt; 300) &#123; // double click setEditing(true) &#125; setClickTime(currentTime) &#125;&#125; &gt; &#123;title&#125; &lt;/Text&gt; &#125; &lt;/View&gt; )&#125; 这个时候我们就可以写一个自定义 Hooks，代码和原来的代码也差不多，useDoubleClick 不接受任何参数，但当我们调用 useDoubleClick 时候返回一个名为 textOnDoubleClick 的函数，在在 Text 组件的事件传参中，我们再在 textOnDoubleClick 函数中传入一个回调函数，这个回调函数就是触发双击条件时候的函数。当我们给这个自定义 Hooks 做了柯里化之后，我们就可以做到知道 Hook 使用时才暴露回调函数: 123456789101112131415161718192021222324252627282930313233function useDoubleClick () &#123; const [ lastClickTime, setClickTime ] = useState(0) return (callback) =&gt; (e) =&gt; &#123; const currentTime = e.timeStamp const gap = currentTime - lastClickTime if (gap &gt; 0 &amp;&amp; gap &lt; 300) &#123; callback &amp;&amp; callback(e) &#125; setClickTime(currentTime) &#125;&#125;function EditableText (&#123; title &#125;) &#123; const [ editing, setEditing ] = useState(false) const textOnDoubleClick = useDoubleClick() return ( &lt;View&gt; &#123; editing ? &lt;TextInput editing=&#123;editing&#125; /&gt; : &lt;Text onClick=&#123;textOnDoubleClick(() =&gt; setEditing(true) )&#125; &gt; &#123;title&#125; &lt;/Text&gt; &#125; &lt;/View&gt; )&#125; 柯里化函数好像有一点点绕，但一旦我们完成了这一步，这种我们的自定义 hooks 就可以像多次调用： 123456789101112131415function EditableText (&#123; title &#125;) &#123; const textOnDoubleClick = useDoubleClick() const buttonOnDoubleClick = useDoubleClick() // 任何实现单击类型的组件都有自己独立的双击状态 return ( &lt;View&gt; &lt;Text onClick=&#123;textOnDoubleClick(...)&#125;&gt; &#123;title&#125; &lt;/Text&gt; &lt;Button onClick=&#123;buttonOnDoubleClick(...)&#125; /&gt; &lt;/View&gt; )&#125; 每一个大家不妨试想如果按照我们传统的 render props 实现，每次都要多写一个 container 组件，如果用 Mixins 或高阶组件来实现就更麻烦，我们需要基于每个不同类型的组件创造一个新的组件。而使用 Hooks，任何一个实现了单机类型的组件都可以通过我们的自定义 Hook 实现双击效果，不管从它的内部实现来看，还是从它暴露的 API 来看都是非常优雅的。 性能优化接下来我们谈一下性能优化，相信大家也有过这种情况，有一个数组，他只需拿到他的 props 要渲染一次，从此之后他就再也不需要更新了。对于传统而言的 Class Component 我们可以设置 shouldComponentUpdate() 返回 false。 12345678910111213class Numbers extends Component &#123; shouldComponentUpdate () &#123; return false &#125; render () &#123; return &lt;View&gt; &#123; expensive(this.props.array).map(i =&gt; &lt;View&gt;&#123;i&#125;&lt;/View&gt;) &#125; &lt;/View&gt; &#125;&#125; 而对于函数式组件而言，我们也可以做一样的事情。Taro 和 React 一样提供 Taro.memo API，他的第一个参数接受一个函数式组件，第二个参数和我们的 shouldComponentUpdate() 一样，判断组件在什么样的情况下需要更新。如果第二个参数没有传入的话，Taro.memo 的效果就和 Taro.PureComponent 一样，对新旧 props 做一层浅对比，如果浅对比不相等则更新组件。 12345678910111213function Numbers (&#123; array &#125;) &#123; return ( &lt;View&gt; &#123; expensive(array).map( i =&gt; &lt;View&gt;&#123;i&#125;&lt;/View&gt; ) &#125; &lt;/View&gt; )&#125;export default Taro.memo(Numbers, () =&gt; true) 第二种情况我们可以看看我们的老朋友，计数器组件。但是这个计数器组件和老朋友有两点不一样：第一是每次点击 + 1，计数器需要调用 expensive 函数循环 1 亿次才能拿到我们想要的值，第二点是它多了一个 Input 组件。在我们真实的业务开发中，这种情况也很常见：我们的组件可能需要进行一次昂贵的数据处理才能得到最终想要的值，但这个组件又还有多个 state 控制其它的组件。在这种情况下，我们如果正常书写业务逻辑是有性能问题的： 123456789101112131415161718192021function Counter () &#123; const [ count, setCount ] = useState(0) const [val, setValue] = useState('') function expensive() &#123; let sum = 0 for (let i = 0; i &lt; count * 1e9; i++) &#123; sum += i &#125; return sum &#125; return ( &lt;View&gt; &lt;Text&gt;You clicked &#123;expensive()&#125; times&#125;&lt;/Text&gt; &lt;Button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/Button&gt; &lt;Input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.detail.value)&#125; /&gt; &lt;/View&gt; )&#125; 因为我们 count 的值跟 Input 的值没有关系，但我们每次改变 Input 的值，就会触发这个组件重新渲染。也就是说这个循环一亿次的 expensive() 函数就会重新调用。这样情况显然是不能接受的。为了解决这个问题，我们可以使用 useMemo API。useMemo 的签名和 useEffect 有点像，区别就在于 useMemo 的第一个函数有返回值，这个函数返回的值同时也是 useMemo 函数的返回值。而第二个参数同样是依赖数组，只有当这个数组的数据变化时候，useMemo 的函数才会重新计算，如果数组没有变化，那就直接从缓存中取数据。在我们这个例子里我们只需要 count 变化才进行计算，而 Input value 变化无需计算。 123456789101112131415161718192021function Counter () &#123; const [ count, setCount ] = useState(0) const [val, setValue] = useState('') const expensive = useMemo(() =&gt; &#123; let sum = 0 for (let i = 0; i &lt; count * 100; i++) &#123; sum += i &#125; return sum &#125;, [ count ]) // ✅ 只有 count 变化时，回调函数才会执行 return ( &lt;View&gt; &lt;Text&gt;You Clicked &#123;expensive&#125; times&lt;/Text&gt; &lt;Button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/Button&gt; &lt;Input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.detail.value)&#125; /&gt; &lt;/View&gt; )&#125; 我们刚才提到的两个 memo 的 API ，他的全称其实是 Memoization。由于 Hooks 都是在普通函数中运行的，所以我们要做好性能优化，一定要好好利用缓存和记忆化这一技术。 在计算机科学中，记忆化（Memoization）是一种提高程序运行速度的优化技术。通过储存大计算量函数的返回值，当这个结果再次被需要时将其从缓存提取，而不用再次计算来节省计算时间。 大规模状态管理提到状态管理，React 社区最有名的工具当然是 Redux。在 react-redux@7 中新引用了三个 API: useSelector。它有点像 connect() 函数的第一个参数 mapStateToProps，把数据从 state 中取出来； useStore 。返回 store 本身； useDispatch。返回 store.dispatch。 在 Taro 中其实你也可以使用我们之前提到过的 createContext 和 useContext 直接就把 useStore 和 useDispatch 实现了。而基于 useStore 和 useDispatch 以及 useState，useMemo，useEffect 也可以实现 useSelector。也就是说 react-redux@7 的新 API 全都是普通 Hooks 构建而成的自定义 Hooks。当然我们也把 react-redux@7 的新功能移植到了 @tarojs/redux，在 Taro 1.3 版本你可以直接使用这几个 API。 Hooks 的实现我们现在对 Hooks 已经有了以下的了解，一个合法的 Hooks ，必须满足以下需求才能执行: 只能在函数式函数中调用 只能在函数最顶层中调用 不能在条件语句中调用 不能在循环中调用 不能在嵌套函数中调用 我想请大家思考一下，为什么一个 Hook 函数需要满足以上的需求呢？我想请大家以可以框架开发者的角度去思考下这个问题，而不是以 API 的调用者的角度去逆向地思考。当一个 Hook 函数被调用的时，这个 Hook 函数的内部实现应该可以访问到当前正在执行的组件，但是我们的 Hooks API 的入参却没有传入这个组件，那究竟是怎么样的设计才可以让我们的 hook 函数访问到正在执行的组件，也能够准确地定位自己呢？ 聪明的朋友或许已经猜到了，这些所有线索都指向一个结果，Hooks 必须是一个按顺序执行的函数。也就是说，不管整个组件执行多少次，渲染多少次，组件中 Hooks 的顺序都是不会变的。 我们还知道另外一条规则，Hooks 是 React 函数内部的函数，于是我们就可以知道，要实现 Hooks 最关键的问题在于两个: 找到正在执行的 React 函数 找到正在执行的 Hooks 的顺序。 我们可以设置一个全局的对象叫 CurrentOwner，它有两个属性，第一个是 current，他是正在执行的 Taro 函数，我们可以在组件加载和更新时设置它的值，加载或更新完毕之后再设置为 null；第二个属性是 index，它就是 CurrentOwner.current 中 Hooks 的顺序，每次我们执行一个 Hook 函数就自增 1。 1234567891011const CurrentOwner: &#123; current: null | Component&lt;any, any&gt;, index: number&#125; = &#123; // 正在执行的 Taro 函数, // 在组件加载和重新渲染前设置它的值 current: null, // Taro 函数中 hooks 的顺序 // 每执行一个 Hook 自增 index: 0&#125; 在 React 中其实也有这么一个对象，而且你还可以使用它，它叫做 __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner，也就是说如果你想给 React 15 实现 Hooks，其实也可以做到的。但也正如它的名字一样，如果你用了说不定就被 fire 了，被优化了，所以更好的方案还是直接使用我们 taro。 接下来我们来实现我们的 getHook 函数，同样很简单，如果 CurrenOwner.current 是 null，那这就不是一个合法的 hook 函数，我们直接报错。如果满足条件，我们就把 hook 的 index + 1，接下来我们把组件的 Hooks 都保存在一个数组里，如果 index 大于 Hooks 的长度，说明 Hooks 没有被创造，我们就 push 一个空对象，避免之后取值发生 runtime error。然后我们直接返回我们的 Hook。 1234567891011function getHook (): Hook &#123; if (CurrentOwner.current === null) &#123; throw new Error(`invalid hooks call: hooks can only be called in a taro component.`) &#125; const index = CurrentOwner.index++ // hook 在该 Taro 函数中的 ID const hooks: Hook[] = CurrentOwner.current.hooks // 所有的 hooks if (index &gt;= hooks.length) &#123; // 如果 hook 还没有创建 hooks.push(&#123;&#125; as Hook) // 对象就是 hook 的内部状态 &#125; return hooks[index] // 返回正在执行的 hook 状态&#125; 既然我们已经找到了我们正在执行的 Hooks，完整地实现 Hooks 也就不难了。之前我们讨论过 useState 的签名，现在我们一步一步地看他的实现。 首先如果 initState 是函数，直接执行它。其次调用我们我们之前写好的 getHook 函数，它返回的就是 Hook 的状态。接下来就是 useState 的主逻辑，如果 hook 还没有状态的话，我们就先把正在执行的组件缓存起来，然后 useState 返回的，就是我们的 hook.state, 其实就是一个数组，第一个值当然就是我们 initState，第一个参数是一个函数，它如果是一个函数，我们就执行它，否则就直接把参数赋值给我们 的 hook.state 第一个值，赋值完毕之后我们把当前的组件加入到更新队列，等待更新。 1234567891011121314151617function useState&lt;S&gt; (initialState: S | (() =&gt; S)): [S, Dispatch&lt;SetStateAction&lt;S&gt;&gt;] &#123; if (isFunction(initialState)) &#123; // 如果 initialState 是函数 initialState = initialState() // 就直接执行 &#125; const hook = getHook() as HookState&lt;S&gt; // 找到该函数中对应的 hook if (isUndefined(hook.state)) &#123; // 如果 hook 还没有状态 hook.component = Current.current! // 正在执行的 Taro 函数，缓存起来 hook.state = [ // hook.state 就是我们要返回的元组 initialState, (action) =&gt; &#123; hook.state[0] = isFunction(action) ? action(hook.state[0]) : action enqueueRender(hook.component) // 加入更新队列 &#125; ] &#125; return hook.state // 已经创建 hook 就直接返回&#125; 最后我们把 hook.state 返回出去就大功告成了。 Taro 的 Hooks 总共有八个 API， useState 的实现大家可以发现非常简单，但其实它的代码量和复杂度是所有 Hooks 的实现中第二高的。所以其实 Hooks 也没有什么黑科技，大家可以放心大胆地使用。 总结与展望在 2018 年 Ember.js 的作者提出过一个观点，Compilers are the New Frameworks，编译器即框架。什么意思呢？就拿 React 来举例，单单一个 React 其实没什么用，你还需要配合 create-react-app, eslint-plugin-react-hooks, prettier 等等编译相关的工具最终才能构成一个框架，而这些工具也恰巧是 React Core Team 的人创造的。而这样趋势不仅仅发生在 React 身上，大家可以发现在2018年，尤玉溪老师的主要工作就是开发 vue-cli。而对一些更激进的框架，例如 svelte，它的框架就是编译器，编译器就是框架。 而到了 2019 年，我想提出一个新概念，叫框架即生态。就拿 Taro 来说，使用 Taro 你可以复用 React 生态的东西，同时 Taro 还有 taro doctor，Taro 开发者社区，Taro 物料市场，还有腾讯小程序·云开发等等多个合作伙伴一起构成了 Taro 生态，而整个 Taro 生态才是框架。在过去的半年，我们持续改进并优化了 Taro 框架的表现，以上提到的特性与功能在 Taro 1.3 全部都可以正常使用。而在框架之外，我们也深耕社区，推出了 Taro 物料市场和 Taro 开发者社区，并和腾讯小程序·云开发合作举办了物料开发竞赛。现在，我们诚挚邀请你一起来参与社区贡献，让小程序开发变得更好、更快、更方便： Taro 官网：https://taro.jd.com/ Taro 物料市场：https://taro-ext.jd.com/ Taro 开发者社区：https://taro-club.jd.com/","pubDate":"Wed, 10 Jul 2019 13:00:00 GMT","guid":"https://aotu.io/notes/2019/07/10/taro-hooks/","category":"小程序"},{"title":"邀您参加「Taro x 小程序·云开发」物料开发竞赛","link":"https://aotu.io/notes/2019/07/01/taro-ext-action/","description":"多端统一开发解决方案 Taro 是由凹凸实验室开源、遵循 React 语法规范的多端开发解决方案，截止目前 star 数即将突破两万，受到了前端开发者的广泛关注，成为了当前最受欢迎的小程序多端开发框架之一。开发者只需书写一套代码，通过 Taro 的编译，即可将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动/QQ/快应用小程序、H5、React-Native 等）运行的代码，很大程度提高了小程序的开发效率和开发体验。 小程序·云开发提供的一站式开发服务。打通了小程序前端与云资源的链路，让开发者无需管理后端服务架构，即可轻松拥有各种后端能力，极大减轻开发过程中繁杂的后端操作，使小程序开发更简单。告别以前开发小程序需要买服务器、部署后端服务、搭建运维服务等繁琐工作。 随着 Taro 受到越来越多的关注，也涌现了许多 优秀案例 和优秀轮子，他们分散各处，我们希望有个集中的地方让大家快速查找，方便地使用这些轮子而不用重复制造，因此推出了 Taro 物料市场，大家可以分享、学习或使用。 Taro 团队和腾讯云团队一直有着深入的合作，我们可以看到在 Taro 项目初始化的时候提供了“云开发模板”；在 Taro 掘金小册里介绍和使用小程序云开发；在腾讯云的高校公开课里有 Taro 的参与…… 值物料市场上线之际，Taro 团队和腾讯云团队再次合作，联合举办此次 Taro x 小程序·云开发物料上传激励活动 ，Taro 的开发者们只要上传 Taro 开发的包含腾讯云开发能力（例如：云数据库、云存储、云函数）的物料，就可以参与活动，并有机会赢得奖品。 活动时间及评奖方式： 即日起至 2019 年 07 月 30 日，提交物料并被审核通过。 2019 年 8 月 1 日 - 8 月 10 日，竞赛评委将根据物料的完整性、可用性、多端兼容性、评分、下载量、Github Star 等综合权重打分，评选出此次活动的获奖者。 2019 年 8 月 12 日，公布获奖名单，获奖者发送地址给 Taro 团队，Taro 团队按地址发放奖品。 说明：目前物料市场上管理员已经上传的物料欢迎原作者认领。（原作者只需上传自己的物料，管理员看到后会把管理员上传的删除） 奖品设置：一等奖（ 1 名）： 腾讯云代金券3000元 腾讯云精美电脑包 1 个（颜色随机） 凹凸实验室珍藏 T 恤 1 件 二等奖（ 2 名）： 腾讯云代金券1500元 腾讯云Q版蓝牙音箱 1个（颜色随机） 凹凸实验室珍藏 T 恤 1 件 三等奖（ 3 名）： 腾讯云代金券500元 腾讯云抱枕 1 个 凹凸实验室珍藏 T 恤 1 件 参与奖（不限名额）： 腾讯云定制公仔 或 京东Joy公仔 1 个 其他 获奖作者将进入核心开发者交流群，享受 Taro 和云开发核心开发者提供优先的技术支持和 bug 受理。 优秀的作品和获奖作者将得到宣传报道，有助于为简历资质添彩。 参赛方式 登录物料市场 https://taro-ext.jd.com 点击 「发布物料」 填入物料相关信息并提交发布 物料有多种类型，包含组件、项目模版或页面模版、JS SDK、UI库，都可以参与活动，要求使用 Taro 开发 和 小程序·云开发 评委人员 Taro 核心开发团队 小程序云开发 核心开发团队 Taro 联合开发团队 黄轶 Zoom · 前端架构师 许世超 网易严选 · 前端负责人 吴立奇 美的 · 美的官方商城核心开发 · 小程序‘轻松问卷’开发者 其他注意事项 提交的物料都会经过后台审核 完整性、可用性是比较重要的参考维度 感谢感谢腾讯云小伙伴的支持，为我们提供了奖品，欢迎大家体验腾讯云产品。 声明本活动解释权归 Taro 团队和腾讯云团队 相关网址： Taro 官网：https://taro.jd.com Taro 物料市场: https://taro-ext.jd.com Taro 社区：https://taro-club.jd.com GitHub: https://github.com/NervJS/taro","pubDate":"Mon, 01 Jul 2019 13:00:00 GMT","guid":"https://aotu.io/notes/2019/07/01/taro-ext-action/","category":"小程序"},{"title":"Taro 「物料市场」及「交流社区」 惊喜上线","link":"https://aotu.io/notes/2019/06/21/taro-ext-club/","description":"多端统一开发框架 Taro 自 2018 年 6 月开源以来，一直受到业界的广泛关注和支持。 目前，Taro GitHub star 数已经突破了 1.8W。作为研发团队，我们为取得的成绩感到欣喜，但也始终不忘初心。一直以来，我们对 Taro 框架不断完善和优化，近期也即将发布全新的大版本（Taro 1.3），将提供快应用和 QQ 小程序的开发支持，React Hooks 支持，Taro Doctor 等重大特性 (详情)。而与此同时，我们也马不停蹄，对 Taro 进行了全方位的升级，希望给大家带来小小的惊喜。 我们不仅带来了焕然一新的 Taro 官网，还一次性推出了 Taro 物料市场 和 Taro 开发者社区。帮助 Taro 实现从 多端统一开发框架 到 多端统一开发解决方案 的转型。 Taro 物料市场：https://taro-ext.jd.com/Taro 开发者社区：https://taro-club.jd.com/ 物料市场 — “让每一个轮子产生价值”随着 Taro 受到越来越多的关注，许多 Taro 项目也正式投入生产，涵盖包括 电商、工具、服务 等多种类型，也涌现了许多优秀案例。 但项目开发中，开发者都不得不面临重复的逻辑开发，对现有的逻辑进行 Taro 代码的适配等问题，严重影响开发效能。 开源的时代，我们不希望闭门造车，我们诚邀开发者们共同打造完整的 多端适配 生态，一起沉淀优秀的开发物料，进而赋能更多的开发者。 因此，物料市场应运而生。 我们将物料划分为 4 个大类：组件、UI 库、模版、SDK。每个物料都配有说明文档，并对支持的端进行标记，方便接入使用。 物料的获取方式也相当灵活，可通过 ZIP/TAR 包下载，也可直接通过作者提供的 NPM 或 GitHub 地址下载。 此外，还可以对物料进行评论、收藏和打分，这将作为衡量物料质量的一个指标，为筛选物料提供参考。 后续，我们将加入打赏功能，开发者通过发布优质的物料，给与别人便利的同时，自己可以收获一定的奖励。此外，我们还会不断完善物料质量评定标准，制定用户积分体系，等等。这都将促进整个生态更加健康而全面的发展。 如果你对物料市场有任何建议，或有意愿参与物料市场的建设，欢迎随时与我们联系：taro@jd.com。 开发者社区 — “让每一次交流被沉淀”目前，Taro 共收到了 2k 多个 GitHub Issue，并建立了十多个开发交流微信群（每个群上限人数 500）。 我们希望与开发者进行及时且顺畅的交流，更希望每一次的问题答疑、经验交流都能被沉淀，分享给更多开发者，同时，我们渴望开发者之间可以开放互助，因此我们打造了一个全新的开发者社区。 开发者可通过社区多个版块交流问题、共享经验、发布案例，等等。 Taro 社区基于 NodeBB 开发，共设有 12 个版块，包括 Taro、Taro UI 及其对应转换的 8 个端，有效地对内容做了归类。此外，还设置了 新闻 版块，用于发布 Taro 新闻、公告、规划等；招聘 版块，让 Taro 求职者和招聘者快速匹配；灌水 版块，提供一个健康文明的交流（you）平台。 为了加强社区内容的管理，我们沉淀了一套自动化的社区管理解决方案：通过智能分析微信群聊记录，对有效信息进行筛选和整合，自动同步至社区；并使用插件 GitHub Embed 将 GitHub Issue 直接导入，从而打通 GitHub、微信、社区 三方平台，旨在让社区内容更及时、更全面。 如果你对开发者社区有任何建议，或有意愿参与社区的建设与管理工作，欢迎随时与我们联系：taro@jd.com。 官网 — “全新面貌，蓄势待发”开源近一年，Taro 成长了许多。一开始，我们试图用 React 来实现微信小程序开发；而现在，我们期待的是，Taro 在移动端开发、多端适配领域可以无往不利。 Taro 正在经历由内而外的成长，因此，我们对 Taro 品牌进行了全新升级，旨在赋予其独特的品牌风格。 全新的官网将作为品牌化的一个窗口，不仅带来了全新的视觉体验，内容上更是增加了生态能力和业界合作的展示，并丰富了应用案例和学习资料，方便开发者迅速上手 Taro。 愿景这一切仅仅是起步，未来我们还将推出更多平台、工具、服务，努力将 Taro 打造为名副其实的移动端解决方案。 希望通过我们的点滴努力，创造出更好的移动端开发环境，让工作回归简单、让生活日益丰满。 相关网址： Taro 官网：https://taro.jd.com Taro 物料市场: https://taro-ext.jd.com Taro 社区：https://taro-club.jd.com GitHub: https://github.com/NervJS/taro","pubDate":"Fri, 21 Jun 2019 13:00:00 GMT","guid":"https://aotu.io/notes/2019/06/21/taro-ext-club/","category":"小程序"},{"title":"Taro 1.3 震撼升级：全面支持 JSX 语法和 HOOKS","link":"https://aotu.io/notes/2019/06/13/taro-1-3/","description":"在 Taro 1.2 发布之后，Taro 在业界收获了巨大的赞誉和关注：GitHub 上 Star 数量超过 19000 粒，NPM 下载量也稳居同类开发框架之首，同时 Taro 团队也和腾讯、百度、华为等数十家业界巨头的研发团队展开了深入和有效的合作。 Taro 1.3 是我们酝酿最久的版本：经历了横跨 6 个月的开发时间，近 2000 次的代码提交，近百位开发者的共同参与。我们终于在今天骄傲地发布了 Taro 1.3。 Taro 1.3 的特性包括但不限于： 支持快应用和 QQ 小程序的开发 全面支持 JSX 语法和 React Hooks 大幅提高 H5 性能和可用性 Taro Doctor 支持快应用和 QQ 小程序的开发快应用的开发模式非常特别，它的 API、组件系统、组件库和其他小程序端差异非常大，并且快应用只是一个标准，各家安卓厂商对运行时的实现也各不相同。而这块「硬骨头」终于也被 Taro 啃下了。 QQ 小程序作为新兴的小程序类容器，大家普遍对它知之甚少，但 Taro 也率先实现了对 QQ 小程序的支持。 支持快应用和 QQ 小程序意味着 Taro 真正对业界主流小程序实现了「全覆盖」，不管你的业务要支持哪一个小程序端，只要维护一套代码，Taro 就能生成对应小程序平台的代码。同时 Taro 也成为了业界首个同时支持微信小程序、百度智能小程序、字节跳动小程序、支付宝小程序、快应用、QQ 小程序共 6 端小程序的开发框架。 全面支持 JSX 语法和 React Hooks作为使用 React 和 JSX 语法的开发框架，Taro 早期的版本在编译器和编辑器检查工具都对语法做了高强度的限制。而在 Taro 1.3 中，开发者可以充分发挥自己的创造力和想象力，可以任意地写 if-else，可以任意地写匿名函数，可以把 JSX 放在类函数中，也可以放在普通函数中，等等。只要编译器和和 ESLint 不报错，就可以这么写。 虽然 React Hooks 正式稳定的时间并不长，但我们认为这个特性能有效地简化开发模式，提升开发效率和开发体验。即便 Hooks 的生态和最佳实践还尚未完善，但我们相信未来 Hooks 会成为 React 开发模式的主流，也会深刻地影响其它框架未来的 API 构成。所以我们优先把 React Hooks 带到了 Taro 中，还写了两个小例子展示如何在 Taro 中使用 Hooks： V2EX: https://github.com/NervJS/taro-v2ex-hooks TodoMVC: https://github.com/NervJS/taro-todomvc-hooks 全新生命周期和 Context API在 Taro 1.3 我们还实现了 React 16 的新生命周期函数 static getDerivedStateFromProps() 和 getSnapshotBeforeUpdate()。当新的生命周期函数注入到类组件时，老的生命周期函数将不会被调用，没有使用新的生命周期函数则不会影响原有生命周期的调用。就多数情况而言，我们更推荐使用新的生命周期来构建你的类组件，因为这样能减少一次渲染和更新的开销。更多详细信息可以查看相关文档。 Taro 1.3 还实现了 React 16 的 createContext、contextType 和 useContext API。新 Context 通过声明式的 API 来传递组件的更新，使得Taro 跨组件通信和共享状态更为直观。同时，例如 react-redux 这样的热门库也正在基于 Context 和 Hooks 进行重构，我们也非常期待与社区一起探索 React/Taro 新的开发与设计模式。 大幅提高 H5 性能和可用性作为除微信小程序之外需求量最高的端，我们一直都部署了重要的开发战力在 H5 端。而在 Taro 1.3 中，我们优化了编译代码的方式，实现了资源最小引入和按需引入，将原有最小项目的编译大小降低了 80% 左右。这对于网络状况不佳的 H5 端无疑是巨大的提升。 H5 端的 API 数量和质量也得到了大幅地增长，Taro 1.3 新增了 28 个 H5 API，解决了上百个 H5 相关的 issue。 关于 H5 端性能更感兴趣可以查看文章:《决战性能之巅 - Taro H5 转换与优化升级》。 Taro Doctor我们还从 Flutter Doctor 中得到启发，开发了 Taro Doctor。 Taro Doctor 就像一个医生一样，可以诊断项目的依赖、设置、结构，以及代码的规范是否存在问题，并尝试给出解决方案。 但和真正的医生不一样，Taro Doctor 不需要排队挂号，也不用花钱。你只需要在终端运行命令：taro doctor，就像图里一样： 还有更多除了以上的特性之外，Taro 1.3 还做了许多额外的工作，这些工作可能对日常开发影响不大，但为 Taro 的稳定性以及将来更多的可能性夯实了基础： 组件传参（props）系统重构在 Taro 1.0 到 1.2 的小程序端，我们一直使用原生小程序框架的组件传参系统，但小程序组件系统没办法传递函数的值，也无法传递非具名参数，并且各小程序组件的实现各不相同。为了解决这些问题，在 Taro 1.3 中我们自己实现了一套组件传参系统。新系统会使得传参相关的代码更为可靠，同时也是我们支持更多 JSX 语法的基础。 命令行工具（CLI） 重构在 Taro 1.3，我们将命令行工具使用 TypeScript 进行了重构并逐步添加更多测试用例。重构之后我们可以更加大胆地为 CLI 添加新功能，替换老旧依赖。同时我们也会将 CLI 的功能以 API 的形式暴露出来，赋能给其它开发工具和我们的合作伙伴。 移动端容器更换我们和京东的 ARES) 团队合作，把原有的移动端容器 expo 替换为深度定制的 JDReact。JDReact 大幅提升了 Taro 移动端的可控性，可以让我们突破 expo 的掣肘，引入原生移动端代码，提供定制功能和 API，并且性能和稳定性的表现都会更好。 支持开发小程序插件小程序插件是小程序带来的一个非常优秀的特性，可以极大地提高代码复用率，降低包大小，为开发者带来诸多便利，目前微信、支付宝小程序已经支持插件功能。而从 1.3 版本开始，Taro 支持直接开发微信与支付宝小程序插件，这意味着 Taro 项目将和小程序插件无缝对接，不再有开发模式切换的成本。 支持「小程序·云开发」「小程序·云开发」是微信小程序联合腾讯云团队提供的一个非常强大的功能，它是一款 Serverless 服务，为开发者提供了「云函数」、「云数据库」和「云文件存储」三大能力，并且将这些能力封装成特定的接口，可以帮助开发者快速构建微信小程序的后端服务。为了让 Taro 开发者能够享受到「小程序·云开发」的能力，Taro 也加入了对「小程序·云开发」的支持，为「小程序·云开发」提供了初始化模板，并且将小程序云相关的 API 进行了封装，方便开发者进行使用。同时，「小程序·云开发」已提供 H5 版本的 SDK，Taro 支持将小程序、H5 的调用方式进行统一封装，帮助开发者快速打造 Serverless 的多端应用。 升级兼容性正如前面所提到，Taro 1.3 是一个酝酿时间最久，拥有特性最多的大版本，对 Taro 底层也进行了不小的重构，所以，1.3 版本的升级带了以下 2 个兼容性问题。 JSX 中的事件监听函数必须绑定作用域在之前的 Taro 版本中，JSX 中绑定的事件监听函数，是可以不需要绑定任何作用域，就能访问到组件实例的，例如 123456789101112131415161718192021import Taro, &#123; Component, Config &#125; from '@tarojs/taro'import &#123; View, Button &#125; from '@tarojs/components'export default class Test extends Component &#123; state = &#123; hello: 'noclick' &#125; clickHandler () &#123; this.setState(&#123; hello: 'click' &#125;) &#125; render () &#123; return ( &lt;View className=&#123;styles.index&#125;&gt; &lt;Button onClick=&#123;this.clickHandler&#125;&gt;点击&lt;/Button&gt; &lt;/View&gt; ) &#125;&#125; 上述例子中，&lt;Button /&gt; 按钮绑定的点击事件，在之前版本中是能够正常执行的，Taro 会默认将 clickHandler 的作用域绑定为当前组件实例，但是这并不符合 React 中的实际情况，所以，在 1.3 版本中，我们对这一问题进行了修复，现在 JSX 中的事件监听函数必须绑定作用域，否则就会报错。 上述代码中 JSX 部分可以修改为如下 1234567render () &#123; return ( &lt;View className=&#123;styles.index&#125;&gt; &lt;Button onClick=&#123;this.clickHandler.bind(this)&#125;&gt;点击&lt;/Button&gt; &lt;/View&gt; )&#125; 或者你也可以在 constructor 中将函数进行提前绑定作用域， 1234567891011constructor () &#123; this.clickHandlerBind = this.clickHandler.bind(this)&#125;render () &#123; return ( &lt;View className=&#123;styles.index&#125;&gt; &lt;Button onClick=&#123;this.clickHandlerBind&#125;&gt;点击&lt;/Button&gt; &lt;/View&gt; )&#125; 还有一种做法是，将 clickHandler 写成箭头函数，这种方式在新旧版本中均可以正常运行。 暂时无法在原生应用中使用 Taro 组件在之前版本中，使用 Taro 编译后的组件是可以直接用在原生项目中的，以提升复用性，但 1.3 版本由于组件的 props 系统彻底重构了，升级 1.3 后暂时无法在原生项目中使用 Taro 组件，我们正在积极处理这个问题，在后续版本中将继续支持这一特性。 在框架之外Taro 团队除了 1.3 版本中完善多端适配，提高框架开发体验和开发效率之外，我们还在生态建设上付出了诸多努力，其中包括全新升级的官网，物料/插件市场，独立的社区/论坛。 我们认为，Taro 能够安身立命的本钱是作为开发框架的硬实力，但真正决定 Taro 能走多远却是生态、社区以及合作伙伴。我们在 1.3 已经把实力大幅增强，现在邀请你一起参与或观察 Taro 在生态和社区的建设： Taro 官网：https://taro.jd.com Taro 物料市场: https://taro-ext.jd.com Taro 社区：https://taro-club.jd.com GitHub: https://github.com/NervJS/taro","pubDate":"Thu, 13 Jun 2019 06:00:00 GMT","guid":"https://aotu.io/notes/2019/06/13/taro-1-3/","category":"小程序"},{"title":"小程序框架全面测评","link":"https://aotu.io/notes/2019/03/12/mini-program-framework-full-review/","description":"最近前端届多端框架频出，相信很多有代码多端运行需求的开发者都会产生一些疑惑：这些框架都有什么优缺点？到底应该用哪个？ 作为 Taro 开发团队一员，笔者想在本文尽量站在一个客观公正的角度去评价各个框架的选型和优劣。但宥于利益相关，本文的观点很可能是带有偏向性的，大家可以带着批判的眼光去看待，权当抛砖引玉。 那么，当我们在讨论多端框架时，我们在谈论什么： 多端笔者以为，现在流行的多端框架可以大致分为三类： 1. 全包型这类框架最大的特点就是从底层的渲染引擎、布局引擎，到中层的 DSL，再到上层的框架全部由自己开发，代表框架是 Qt 和 Flutter。这类框架优点非常明显：性能（的上限）高；各平台渲染结果一致。缺点也非常明显：需要完全重新学习 DSL（QML/Dart），以及难以适配中国特色的端：小程序。 这类框架是最原始也是最纯正的的多端开发框架，由于底层到上层每个环节都掌握在自己手里，也能最大可能地去保证开发和跨端体验一致。但它们的框架研发成本巨大，渲染引擎、布局引擎、DSL、上层框架每个部分都需要大量人力开发维护。 2. Web 技术型这类框架把 Web 技术（JavaScript，CSS）带到移动开发中，自研布局引擎处理 CSS，使用 JavaScript 写业务逻辑，使用流行的前端框架作为 DSL，各端分别使用各自的原生组件渲染。代表框架是 React Native 和 Weex，这样做的优点有： 开发迅速 复用前端生态 易于学习上手，不管前端后端移动端，多多少少都会一点 JS、CSS 缺点有： 交互复杂时难以写出高性能的代码，这类框架的设计就必然导致 JS 和 Native 之间需要通信，类似于手势操作这样频繁地触发通信就很可能使得 UI 无法在 16ms 内及时绘制。React Native 有一些声明式的组件可以避免这个问题，但声明式的写法很难满足复杂交互的需求。 由于没有渲染引擎，使用各端的原生组件渲染，相同代码渲染的一致性没有第一种高。 3. JavaScript 编译型这类框架就是我们这篇文章的主角们：Taro、WePY 、uni-app 、 mpvue 、 chameleon，它们的原理也都大同小异：先以 JavaScript 作为基础选定一个 DSL 框架，以这个 DSL 框架为标准在各端分别编译为不同的代码，各端分别有一个运行时框架或兼容组件库保证代码正确运行。 这类框架最大优点和创造的最大原因就是小程序，因为第一第二种框架其实除了可以跨系统平台之外，也都能编译运行在浏览器中。(Qt 有 Qt for WebAssembly, Flutter 有 Hummingbird，React Native 有 react-native-web, Weex 原生支持) 另外一个优点是在移动端一般会编译到 React Native/Weex，所以它们也都拥有 Web 技术型框架的优点。这看起来很美好，但实际上 React Native/Weex 的缺点编译型框架也无法避免。除此之外，编译型框架的抽象也不是免费的：当 bug 出现时，问题的根源可能出在运行时、编译时、组件库以及三者依赖的库等等各个方面。在 Taro 开源的过程中，我们就遇到过 Babel 的 bug，React Native 的 bug，JavaScript 引擎的 bug，当然也少不了 Taro 本身的 bug。相信其它原理相同的框架也无法避免这一问题。 但这并不意味着这类为了小程序而设计的多端框架就都不堪大用。首先现在各巨头超级 App 的小程序百花齐放，框架会为了抹平小程序做了许多工作，这些工作在大部分情况下是不需要开发者关心的。其次是许多业务类型并不需要复杂的逻辑和交互，没那么容易触发到框架底层依赖的 bug。 那么当你的业务适合选择编译型框架时，在笔者看来首先要考虑的就是选择 DSL 的起点。因为有多端需求业务通常都希望能快速开发，一个能够快速适应团队开发节奏的 DSL 就至关重要。不管是 React 还是 Vue（或者类 Vue）都有它们的优缺点，大家可以根据团队技术栈和偏好自行选择。 如果不管什么 DSL 都能接受，那就可以进入下一个环节： 生态以下内容均以各框架现在（2019 年 3 月 11日）已发布稳定版为标准进行讨论。 开发工具就开发工具而言 uni-app 应该是一骑绝尘，它的文档内容最为翔实丰富，还自带了 IDE 图形化开发工具，鼠标点点点就能编译测试发布。 其它的框架都是使用 CLI 命令行工具，但值得注意的是 chameleon 有独立的语法检查工具，Taro 则单独写了 ESLint 规则和规则集。 在语法支持方面，mpvue、uni-app、Taro 、WePY 均支持 TypeScript，四者也都能通过 typing 实现编辑器自动补全。除了 API 补全之外，得益于 TypeScript 对于 JSX 的良好支持，Taro 也能对组件进行自动补全。 CSS 方面，所有框架均支持 SASS、LESS、Stylus，Taro 则多一个 CSS Modules 的支持。 所以这一轮比拼的结果应该是： uni-app &gt; Taro &gt; chameleon &gt; WePY、mpvue 多端支持度只从支持端的数量来看，Taro 和 uni-app 以六端略微领先（移动端、H5、微信小程序、百度小程序、支付宝小程序、头条小程序），chameleon 少了头条小程序紧随其后。 但值得一提的是 chameleon 有一套自研多态协议，编写多端代码的体验会好许多，可以说是一个能戳到多端开发痛点的功能。uni-app 则有一套独立的条件编译语法，这套语法能同时作用于 js、样式和模板文件。Taro 可以在业务逻辑中根据环境变量使用条件编译，也可以直接使用条件编译文件（类似 React Native 的方式）。 在移动端方面，uni-app 基于 weex 定制了一套 nvue 方案 弥补 weex API 的不足；Taro 则是暂时基于 expo 达到同样的效果；chameleon 在移动端则有一套 SDK 配合多端协议与原生语言通信。 H5 方面，chameleon 同样是由多态协议实现支持，uni-app 和 Taro 则是都在 H5 实现了一套兼容的组件库和 API。 mpvue 和 WePY 都提供了转换各端小程序的功能，但都没有 h5 和移动端的支持。 所以最后一轮对比的结果是： chameleon &gt; Taro、uni-app &gt; mpvue &gt; WePY 组件库/工具库/demo作为开源时间最长的框架，WePY 不管从 Demo，组件库数量 ，工具库来看都占有一定优势。 uni-app 则有自己的插件市场和 UI 库，如果算上收费的框架和插件比起 WePy 也是完全不遑多让的。 Taro 也有官方维护的跨端 UI 库 taro-ui ，另外在状态管理工具上也有非常丰富的选择（Redux、MobX、dva），但 demo 的数量不如前两个。但 Taro 有一个转换微信小程序代码为 Taro 代码的工具，可以弥补这一问题。 而 mpvue 没有官方维护的 UI 库，chameleon 第三方的 demo 和工具库也还基本没有。 所以这轮的排序是： WePY &gt; uni-app 、taro &gt; mpvue &gt; chameleon 接入成本接入成本有两个方面： 第一是框架接入原有微信小程序生态。由于目前微信小程序已呈一家独大之势，开源的组件和库（例如 wxparse、echart、zan-ui 等）多是基于原生微信小程序框架语法写成的。目前看来 uni-app 、Taro、mpvue 均有文档或 demo 在框架中直接使用原生小程序组件/库，WePY 由于运行机制的问题，很多情况需要小改一下目标库的源码，chameleon 则是提供了一个按步骤大改目标库源码的迁移方式。 第二是原有微信小程序项目部分接入框架重构。在这个方面 Taro 在京东购物小程序上进行了大胆的实践，具体可以查看文章《Taro 在京东购物小程序上的实践》。其它框架则没有提到相关内容。 而对于两种接入方式 Taro 都提供了 taro convert 功能，既可以将原有微信小程序项目转换为 Taro 多端代码，也可以将微信小程序生态的组件转换为 Taro 组件。 所以这轮的排序是： Taro &gt; mpvue 、 uni-app &gt; WePY &gt; chameleon 流行度从 GitHub 的 star 来看，mpvue 、Taro、WePY 的差距非常小。从 NPM 和 CNPM 的 CLI 工具下载量来看，是 Taro（3k/week）&gt; mpvue (2k/w) &gt; WePY (1k/w)。但发布时间也刚好反过来。笔者估计三家的流行程度和案例都差不太多。 uni-app 则号称有上万案例，但不像其它框架一样有一些大厂应用案例。另外从开发者的数量来看也是 uni-app 领先，它拥有 20+ 个 QQ 交流群（最大人数 2000）。 所以从流行程度来看应该是： uni-app &gt; Taro、WePY、mpvue &gt; chameleon 开源建设一个开源作品能走多远是由框架维护团队和第三方开发者共同决定的。虽然开源建设不能具体地量化，但依然是衡量一个框架/库生命力的非常重要的标准。 从第三方贡献者数量来看，Taro 在这一方面领先，并且 Taro 的一些核心包/功能（MobX、CSS Modules、alias）也是由第三方开发者贡献的。除此之外，腾讯开源的 omi 框架小程序部分也是基于 Taro 完成的。 WePY 在腾讯开源计划的加持下在这一方面也有不错的表现；mpvue 由于停滞开发了很久就比较落后了；可能是产品策略的原因，uni-app 在开源建设上并不热心，甚至有些部分代码都没有开源；chameleon 刚刚开源不久，但它的代码和测试用例都非常规范，以后或许会有不错的表现。 那么这一轮的对比结果是： Taro &gt; WePY &gt; mpvue &gt; chameleon &gt; uni-app 最后补一个总的生态对比图表： 未来从各框架已经公布的规划来看： WePY 已经发布了 v2.0.alpha 版本，虽然没有公开的文档可以查阅到 2.0 版本有什么新功能/特性，但据其作者介绍，WePY 2.0 会放大招，是一个「对得起开发者」的版本。笔者也非常期待 2.0 正式发布后 WePY 的表现。 mpvue 已经发布了 2.0 的版本，主要是更新了其它端小程序的支持。但从代码提交， issue 的回复/解决率来看，mpvue 要想在未来有作为首先要打消社区对于 mpvue 不管不顾不更新的质疑。 uni-app 已经在生态上建设得很好了，应该会在此基础之上继续稳步发展。如果 uni-app 能加强开源开放，再加强与大厂的合作，相信未来还能更上一层楼。 chameleon 的规划比较宏大，虽然是最后发的框架，但已经在规划或正在实现的功能有： 快应用和端拓展协议 通用组件库和垂直类组件库 面向研发的图形化开发工具 面向非研发的图形化页面搭建工具 如果 chameleon 把这些功能都做出来的话，再继续完善生态，争取更多第三方开发者，那么在未来 chameleon 将大有可为。 Taro 的未来也一样值得憧憬。Taro 即将要发布的 1.3 版本就会支持以下功能： 快应用支持 Taro Doctor，自动化检查项目配置和代码合法性 更多的 JSX 语法支持，1.3 之后限制生产力的语法只有 只能用 map 创造循环组件 一条 H5 打包体积大幅精简 同时 Taro 也正在对移动端进行大规模重构；开发图形化开发工具；开发组件/物料平台以及图形化页面搭建工具。 结语那说了那么多，到底用哪个呢？ 如果不介意尝鲜和学习 DSL 的话，完全可以尝试 WePY 2.0 和 chameleon ，一个是酝酿了很久的 2.0 全新升级，一个有专门针对多端开发的多态协议。 uni-app 和 Taro 相比起来就更像是「水桶型」框架，从工具、UI 库，开发体验、多端支持等各方面来看都没有明显的短板。而 mpvue 由于开发一度停滞，现在看来各个方面都不如在小程序端基于它的 uni-app 。 当然，Talk is cheap。如果对这个话题有更多兴趣的同学可以去 GitHub 另行研究，有空看代码，没空看提交： chameleon: https://github.com/didi/chameleon mpvue: https://github.com/Meituan-Dianping/mpvue Taro: https://github.com/NervJS/taro uni-app: https://github.com/dcloudio/uni-app WePY: https://github.com/Tencent/wepy (按字母顺序排序)","pubDate":"Tue, 12 Mar 2019 15:09:41 GMT","guid":"https://aotu.io/notes/2019/03/12/mini-program-framework-full-review/","category":"小程序"},{"title":"决战性能之巅 - Taro H5 转换与优化升级","link":"https://aotu.io/notes/2019/02/28/taro-h5-optimize/","description":"前言作为一个多端开发框架，Taro 从项目发起时就已经支持编译到 H5 端。随着 Taro 多端能力的不断成熟，我们对 Taro H5 端应用的要求也不断提升。我们已经不再满足于“能跑”，更希望 Taro 能跑得快。 我们经常收到用户反馈：为什么使用 Taro 脚手架创建的空项目，打包后代码体积却有 400KB+；也有用户在 Issue 中提到，Taro 的部分 Api 占用空间巨大，事实上功能却并不完美，等等。作为一个开源项目，我们非常重视社区开发者们的意见。所以在最新版本中，我们对 Taro H5 端的性能表现进行了优化。 作为运行时的基础，每一个 Taro 的 H5 端应用都需要引入 @tarojs/components 和 @tarojs/taro-h5 等基础依赖包。在编译、打包之后，这些依赖包大约会在首屏占用 400KB 以上的空间。如果开发者还使用了 UI 库，例如 Taro-UI，基础体积还会更大，这严重限制了 Taro H5 端应用的性能优化空间。 事实上，我们在 H5 端应用中并不会使用到全部的 Taro 组件和 Api。将这些依赖包全部打包进应用是没有必要，也是不合理的。进行死码删除（Dead code elimination），进一步缩减代码体积，就是我们的优化方向之一。 效果在介绍具体细节之前，我们先看一看优化的效果，因为这可能会让你更有兴趣了解后面的内容。用一句话来说，效果非常显著。 我们建立了一个空项目，在项目配置中加入了webpack-bundle-analyzer插件以查看编译分析。下图是优化前的打包文件分析结果： 而在优化后，对比非常明显： 优化前生成的代码总大小为 455KB，而在优化后仅剩约 96KB，仅是原来的 1/5 左右。 你需要做什么很简单，作为使用者，你不需要做任何代码上的改动，只需要将 Taro 更新到最新版本即可。但在看不见的地方，Taro 却默默地做了许多工作。下面会从原理出发，详细介绍 Taro 的工作。 原理死码删除（Dead code elimination）是一种代码优化技术，可以删除对应用程序执行结果没有影响的代码。Web Fundamentals 的一篇文章有提到，treeshaking 是由 Rollup 提出的一种死码删除的形式。 Tree shaking is a form of dead code elimination. The term was popularized by Rollup, but the concept of dead code elimination has existed for some time. – Reduce JavaScript Payloads with Tree Shaking, Jeremy Wagner 通过在构建时进行静态分析，编译工具可以分析出我们代码中真正的依赖关系。treeshaking 把我们的代码想象成一棵树，代码的每个依赖项看作树上的节点。将未使用过的依赖项从构建结果中移除，这就是 treeshaking 的基本思想。 那么，假设我们手头有一段代码，我们要怎样辨别其中可以删除的部分呢？答案是，通过分析副作用： 123456789101112// add.jsexport default function add（a, b）&#123; return a + b; &#125;// add2.jsconsole.log('这是一个log')export default function add2（a, b）&#123; return a + b; &#125;// index.jsimport add from './add.js' // 没有副作用，可以删除import add2 from './add2.js' // 有副作用，不能直接删除// EOF 副作用这个名词对于了解函数式编程的同学肯定不陌生。修改外部状态，或者是产生输出等等，都是副作用；而存在副作用的代码，是不能被直接移除的。类似上面这个代码示意，add2 模块就是存在副作用的。 站在巨人的肩膀上除了 Rollup 之外，支持 treeshaking 的工具/插件还有很多，比如 babel-plugin-transform-dead-code-elimination、uglify、terser等。 webpack 在 v2 之后就内置了对 treeshaking 的支持，并在 webpack@4 中对 treeshaking 功能进行了扩展。 Taro H5 端在构建过程中，使用 webpack 作为构建的核心。在 webpack 中使用 treeshaking 功能有几个需要注意的地方： 如果是 npm 模块，需要package.json中存在sideEffects字段，并且准确配置了存在副作用的源代码。 必须使用 ES6 模块语法。由于诸如babel-preset-env之类的 babel 预配置包默认会对代码的模块机制进行改写，还需要将modules设置为false，将模块解析的工作直接交给 webpack。 需要工作在 webpack 的production模式下。 webpack 的 treeshaking 工作主要分为两步。第一步是在模块级别移除未使用且无副作用的模块，这一步由 webpack 的内置插件完成；第二步是在文件级别移除未使用的代码，这一步由代码压缩工具 Terser 完成的。 移除未使用的模块前面我们提到，需要在package.json中配置sideEffects字段。 在 webpack 文档 中有提到，这一举动正是为了让 webpack 正确地识别到没有副作用的代码模块。 在 webpack 中，模块依赖分析是由内置插件 SideEffectsFlagPlugin 进行的。 经过 SideEffectsFlagPlugin处理后，没有使用过并且没有副作用的模块都会被打上sideEffectFree标记。 在 ModuleConcatenationPlugin 中，带着sideEffectFree标记的模块将不会被打包： 来到这里，webpack 完成了在模块级别对未使用模块的排除。接下来，依靠 Terser，webpack 可以在文件级别，对未使用、无副作用的代码进行移除。 移除未使用的代码在 CommonJS 规范中，我们通过require函数来引入模块，通过module.exports进行导出。这意味着我们可以在代码中的任何地方用任何方式引入和导出模块：可以是在某个需要等待用户输入的回调函数中，或者是在符合某个条件才进行引入等等。所以在使用 ES6 的模块系统之前，对 Javascript 做编译时的依赖关系分析是近乎不可能的（并不是完全不可能。prepack 通过实现一个 JS 解释器，甚至可以在编译时提前进行静态计算）。 12345678// utils.jsmodule.exports.add = function (a, b) &#123; return a + b &#125;;module.exports.minus = function (a, b) &#123; return a - b &#125;;// index.js;var utils = require('./utils.js');utils.add(1, 2); 像上面这段代码，虽然我们最终只使用了add函数，但minus函数也会在最终的打包代码中出现，因为在编译时无法快速得知是否使用了minus函数。 在 ES6 的模块系统中，我们使用import/export语法来进行模块的引入和导出。与 CommonJS 规范不同的是，这套新的模块系统存在一些限制：import/export行为只能在代码的顶层、默认使用严格模式等等。这些限制使代码模块的导入与导出变得静态化，模块间的依赖关系在开发时已经确定，编译器也更容易解析我们的代码。 1234567// utils.jsexport function add (a, b) &#123; return a + b &#125;;export function minus (a, b) &#123; return a - b &#125;;// index.js;import &#123; add &#125; from './utils.js';add(1, 2); 在使用 ES6 模块系统改造后，我们可以清楚地看到，minus函数确实没有被使用过，所以可以安全地将其从最终打包代码中移除。 当然，具体的分析过程非常复杂。变量提升、object 取值操作、for(var i in list) 语句、自执行函数、函数传参（onClick(function a () {…})）等等，都有可能导致意料之外的情况，从而导致 treeshaking 失效。如果想了解 Terser 的具体处理过程，百度/Google 会是最好的老师。 Taro 做了什么Taro 需要对依赖包做一些修改。 组件的 ES 模块化在进行组件库的 ES 模块化改造之前，如果要发布 @tarojs/components 包，Taro 会执行命令 yarn build，使用 webpack 对源代码进行打包，输出为dist/index.js文件。由于 webpack 并不支持输出为 ES 模块，所以这是个 UMD 模块。 这个文件占据了 462KB 的空间，并且由于模块规范等问题，无法进行 treeshaking。所以就算开发者在 Taro 的项目中只引入了两个组件，最终的打包结果也会包含所有的内置组件。 事实上，@tarojs/components 的源码本身是使用 ESM 规范的： 所以只要让 webpack 直接解析组件库的源码，我们立即就可以享受到 webpack 自带 treeshaking 带来的好处了。 同时，我们也在sideEffects属性中对样式文件做了标记，帮助 webpack 对样式代码的副作用进行识别，在项目编译的代码中保留样式代码。 Api 的 ES 模块化同样，以前在发布 @tarojs/taro-h5 之前，Taro 也需要执行命令 yarn build，使用 Rollup 对源代码进行打包，输出为dist/index.js文件： 这个文件占据了 262KB 的空间。同样，只要是个 Taro 的 H5 端应用，生成的代码都会全量引入这个文件。 我们对 @tarojs/taro-h5 进行模块化改造的思路与 @tarojs/components 相同。我们希望 @tarojs/taro-h5 模块本身遵守 ESM 模块规范，那就只需要标记一下sideEffects，再修改一下模块入口就好。 粗略一看，@tarojs/taro-h5 还挺 “ESM” 的，但这还不够。我们还需要将这些 Api 以 namedExports 的形式导出，开发者使用import { XXX } from &#39;@tarojs/taro-h5&#39;导入 Api 即可。 那么问题来了。在 Taro 项目中，我们一直使用的是 defaultImport，并不会使用 Api 的 namedExports 形式： 12345import Taro from '@tarojs/taro-h5'Taro.navigateTo()Taro.getSystemInfo()// Taro.xxx ... 只要 Api 是通过对Taro变量取属性获取，Taro变量就需要具备所有的 Api，treeshaking 也就无从谈起。 有没有办法把 defaultImport 修改为 namedImports 呢？答案是肯定的。我们写了一个 babel 插件 babel-plugin-transform-taroapi，将指定的 Api 调用替换为 namedImports，未指定的变量则保留属性取值的形式。具体源码可以在这里查看。 12345678910111213// const apis = new Set(['navigateTo', 'navigateBack', ...])&#123; babel: &#123; preset: ['babel-preset-env'], plugins: [ // ..., ['babel-plugin-transform-taroapi', &#123; packageName: '@tarojs/taro-h5', apis &#125;] ] &#125;&#125; 这个插件接受一个对象作为配置参数：packageName属性指定需要进行替换的模块名，apis接受一个 Set 对象，也就是所有 Api 的列表。 为了避免后期手动维护 Api 列表的情况，我们给 @tarojs/taro-h5 模块加了一个编译任务，通过一个简单的Rollup 插件，在执行yarn build命令时生成一份 Api 列表： 下面是编译前后的代码对比。可以看到，在编译后setStorage、getStorage的调用都被替换为 namedImports。 1234567891011// 编译前import Taro from '@tarojs/taro-h5';Taro.initPxTransform(&#123;&#125;);Taro.setStorage()Taro['getStorage']()// 编译后import Taro, &#123; setStorage as _setStorage, getStorage as _getStorage &#125; from '@tarojs/taro-h5';Taro.initPxTransform(&#123;&#125;);_setStorage();_getStorage(); 到这里，虽然过程比较艰辛，但我们对 @tarojs/taro-h5 的模块化改造终于完成了。 最后截至目前，Taro 在 H5 端的完成度已经很高，但是并不完美。未来，在对已有问题进行修复的同时，我们还将继续为 Taro H5 端带来更多新的特性，比如对社区中呼声相当高的switchTab、页面滚动监听onPageScroll、下拉刷新onPullDownRefresh等 Api 的支持，更加统一的页面切换动画，以及更加稳定的多页面模式等等。 Taro 发展到现在，离不开社区的支持。非常感谢在 github、微信群中踊跃反馈的开发者们。如果你对Taro有什么想法或建议，Taro 非常欢迎你来吐槽或观光： https://github.com/NervJS/taro","pubDate":"Thu, 28 Feb 2019 15:09:41 GMT","guid":"https://aotu.io/notes/2019/02/28/taro-h5-optimize/","category":"小程序"},{"title":"Taro UI 2.0 发布：新增自定义主题功能，适配更多小程序","link":"https://aotu.io/notes/2019/02/25/taro-ui-2.0/","description":"前言转眼间，Taro UI 发布已有半年，感谢大家的支持，让我们收获了 GitHub 1400+ star。在此期间，我们不断完善组件库的功能和特性，新增了许多组件和小工具，包括但不限于: 新增日历、索引选择、区域选择、图片选择等十一个组件 适配支付宝小程序、百度小程序 新增自定义主题功能 新增主题生成器，以帮助开发者更好地使用自定义主题功能 新增 Issue Helper，以帮助开发者更规范地填写 Issue 新增组件在 1.0 版本发布之后，我们又陆续新增了如下十一个组件： 视图组件：页面提示、 分隔符、倒计时、 幕帘 、步骤条 操作反馈：全局信息组件 表单：图片选择器、区域选择器、索引选择器、日历组件、搜索栏 其中，在社区里呼声最高的组件，非日历组件莫属。由于日历组件复杂度偏高，要适配多端环境难度偏大，纵观市面上的小程序 UI 组件库，包含日历组件的寥寥无几。尽管如此，我们团队的大鱼兄仍独自挑起重担，几乎完美地实现了该组件，此处掌声献给大鱼兄。 日历组件功能预览： 适配支付宝小程序、百度小程序在 1.0 版本适配微信小程序时，我们遇到了很多困难。比如： 微信小程序自定义组件使用 Shadow DOM 进行渲染，引起了以下几种问题： 组件之间无法使用相邻选择器，如组件间加 border 的需求，最终只能通过新增 props 给开发者自行控制 无法自定义 flex 布局组件，最终只能提供样式给开发者自行使用 Component 组件对应 wxss 文件的样式，只对组件 wxml 内的节点生效。经过不断探索，才发现 addGlobalClass 这一属性，需在自定义组件内激活 addGlobalClass 选项，才能使自定义组件被 app.wxss 或页面的 wxss 中的所有的样式定义影响。。 原生组件的使用限制。由于原生组件脱离在 WebView 渲染流程外，原生组件的层级是最高的，所以页面中的其他组件无论设置 z-index 为多少，都无法盖在原生组件上。由此导致模态框等组件无法遮挡 input、textarea等原生组件，造成穿透效果。 可喜的是，微信官方团队已经在改善该问题，对小程序原生组件引入了同层渲染模式。通过同层渲染，小程序原生组件可与其他内置组件处于相同层级，不再有特殊的使用限制。详见。 小程序不支持 requestAnimationFrame，无法很好地实现 js 动画。 克服完上述微信小程序的困难后，支付宝小程序和百度小程序的适配工作大多是解决样式和某些API的差异。得益于 Taro 良好的支持，Taro UI 的适配工作暂时告一段落。 新增自定义主题功能Taro UI 1.0 发布时只有一套默认的主题配色，为满足业务和品牌上多样化的视觉需求，UI 库支持一定程度的样式定制。 Taro UI 的组件样式是使用 SCSS 编写的，如果你的项目中也使用了 SCSS，那么可以直接在项目中改变 Taro UI 的样式变量。 新建一个主题样式文件（例如 custom-variables.scss）并覆盖默认主题变量： 1234/* 改变主题变量，具体变量名可查看 taro-ui/dist/style/variables/default.scss 文件 */$color-brand: #6190E8;/* 引入 Taro UI 默认样式 */@import \"~taro-ui/dist/style/index.scss\"; 之后在项目的入口文件中引入以上的样式文件即可（无需重复引入组件的默认样式）。 目前，我们额外定制了京东主题和 7Fresh 主题色，可通过扫描以下二维码查看。 京东主题： 7Fresh 主题： 新增主题生成器为了让开发者更好地使用自定义主题功能，我们还新增了主题生成器。开发者可以使用该工具方便地定制 UI 主题。 主题生成器地址： https://nervjs.github.io/taro-ui-theme-preview/ 效果预览： 新增 Issue Helper虽然我们配置了 Issue Template，但仍有部分开发者没有根据规范填写 Issue。我们排查问题时经常需要再次询问版本号信息、复现代码等等，这不仅消耗我们维护项目的精力，还降低了 Issue 处理效率。因此我们参考了 Ant 和 iView 团队的做法，制作了 Issue Helper 页面，帮助开发者更规范地填写 Issue。 Taro UI Issue Helper 地址： https://nervjs.github.io/taro-ui-issue-helper/ 此外，我们发现重复制作 Issue Helper 页面是一件很浪费劳动力的事情，于是将 Issue Helper 封装成一个命令行工具，开发者可以通过简单配置 config.js，执行命令 issue-helper build 就可以生成所需要的页面。 Issue Helper 工具仓库地址： https://github.com/jimczj/issue-helper 未来计划 适配字节跳动小程序 国际化 i18n 致谢感谢大家对 Taro UI 的使用与反馈，我们会致力于将 Taro UI 打造成高质量组件库，不断丰富组件功能与特性，紧跟 Taro 的步伐适配更多平台。 最后，欢迎关注并使用我们的组件库： https://github.com/NervJS/taro-ui","pubDate":"Mon, 25 Feb 2019 04:53:41 GMT","guid":"https://aotu.io/notes/2019/02/25/taro-ui-2.0/","category":"小程序"},{"title":"全新 Phaser 3 游戏引擎特性一览","link":"https://aotu.io/notes/2018/12/23/phaser3/","description":"什么是 Phaser ?Phaser 是一款快速、免费以及开源 HTML5 游戏框架，它支持 WebGL 和 Canvas 两种渲染模式，可以在任何 Web 浏览器环境下运行，游戏可以通过第三方工具转为 iOS、Android 支持的 Native APP，允许使用 JavaScript 和 TypeScript 进行开发。 目前 Phaser 存在三个版本：分别是 Phaser 2 版本、社区版本 Phaser CE 和最新版本 Phaser 3。","pubDate":"Sun, 23 Dec 2018 16:00:00 GMT","guid":"https://aotu.io/notes/2018/12/23/phaser3/","category":"H5游戏开发"},{"title":"Taro 1.2：将已有微信小程序转换为多端应用","link":"https://aotu.io/notes/2018/12/17/taro-1-2/","description":"在距离 Taro 1.1 发布 之后一个月，经历了 500 多次提交和 17 个预览版本的迭代之后，我们有信心在今天发布 Taro 1.2 正式版。 Taro 1.2 比起 Taro 1.1 和其它的小程序开发框架，增加了许多首次在小程序框架上实现的功能，这些功能包括但不限于： 微信小程序转多端应用 字节跳动（头条）小程序支持 CSS Modules 支持 MobX 支持 微信小程序转多端应用就像博客大战时代博客服务商提供了「搬家」工具一样，Taro 现在也提供了「搬家」工具让你方便地入驻 Taro 社区。转换原有微信小程序应用非常简单，只需要安装 Taro 命令行工具，定位到待转项目根目录，运行命令：1$ taro convertTaro 就会把转换好的代码生成在根目录下的 taroConvert 文件夹。转换后的代码是高可读性的 JSX 代码，没有额外的庞大组件库开销。你可以轻易地进行二次开发，或者直接将这些代码通过 taro build 命令生成任意 Taro 已经支持平台的应用。我们已经尝试使用 taro convert 成功转换了四个 GitHub 上最热门的开源微信小程序应用，它们转换之后都表现良好：- EastWorld/wechat-app-mall ★5000+ - 微信小程序商城- tumobi/nideshop-mini-program ★3000+ - 基于 Node.js + MySQL 开发的开源微信小程序商城- RebeccaHanjw/weapp-wechat-zhihu ★1000+ - 仿知乎- jectychen/wechat-v2ex ★400+ - V2EX taro convert 不仅仅能支持转换微信小程序应用，它还能转换微信小程序第三方组件。例如 wxParse 经过 taro convert 编译之后还能突破原有只能解析 11 层 HTML 嵌套的限制，理论上可以解析无限层 HTML 嵌套。更多详情可以访问文档 https://nervjs.github.io/taro/docs/taroize.html 了解更多。字节跳动（头条）小程序支持作为一个「多端统一开发框架」，Taro 当然也不会放过字节跳动小程序。在 Taro 1.2，你可以通过如下命令进行字节跳动小程序端的编译预览及打包：123456789# npm script$ npm run dev:tt$ npm run build:tt# 仅限全局安装$ taro build --type tt --watch$ taro build --type tt# npx 用户也可以使用$ npx taro build --type tt --watch$ npx taro build --type tt选择字节跳动小程序模式，你需要下载并打开字节跳动小程序开发者工具，然后在项目编译完后选择项目根目录下 dist 目录进行预览。相应地，Taro 的平台标识（process.env.TARO_ENV）也增加了新成员tt，代表字节跳动小程序。CSS Modules 支持 在 Taro 最早开源的时候我们就支持了 SCSS 、 LESS 和 Stylus，而在 Taro 1.2 中我们百尺竿头更进一步，给社区带来了 JSX 的好伙伴：CSS Modules。 对于 Taro 而言支持 CSS Modules 有着重要的意义。Taro 在 1.0 的时候已经支持组件的 style 传入 JavaScript 对象，支持了 CSS Modules 之后组件的 className 也能做这点——这意味着 Taro 完全可以做到 JSX 的一项特性：「Everything in JavaScript」。同时，通过编辑器的自动补全和校验功能，开发者再也不用担心 CSS 类误输入和 CSS 类的命名问题。 你可以查阅文档 CSS Modules 的使用 找到 CSS Modules 的开启方法。 CSS Modules 的支持主要由 Taro 社区的个人开发者 @MrKou47 (MrKou47) 开发，感谢他的贡献。 MobX 支持 在小程序应用变得日趋复杂的今天，越来越多的开发者选择使用独立的状态管理工具。在 Taro 1.1 你可以选择 Redux 的体系的 redux-thunk 、dva-core、redux-saga 等工具。在 Taro 1.2 我们又带来了 taro-mobx。 在 Taro 中使用 MobX 非常简单，你可以通过 taro init &lt;your app&gt; 命令创建一个全新的 MobX 模板项目。也可以查阅 使用 MobX 文档将 taro-mobx 接入已有项目。 MobX 的支持主要由 Taro 社区的个人开发者 @nanjingboy (Tom Huang) 开发，感谢他的贡献。 更多特性面对社区里给力的个人贡献者，Taro 官方团队也没有闲着。在 Taro 1.2 开发期间通过 commit 关闭了 169 个 issue 的同时，我们还披星戴月带来了更多特性。其中值得一提的是： H5 路由系统彻底重构 小程序组件的 props 支持传入 JSX 元素 支持 JSX 元素写在 switch-case 中，并支持 if-else 和 switch-case 的多重嵌套 支持引用别名（alias） 与百度小程序和字节跳动小程序官方通力合作，抹平了一大波和微信小程序的差异 你可以通过 CHANGELOG 查阅完整的功能迭代纪录。 写在最后Taro 1.2 最为激动人心的功能显然是「微信小程序转 Taro」 功能，通过这个功能已有的微信小程序应用能转化更好维护的 Taro（类 React） 代码，也能把 Taro 代码转化为多端应用。 但更重要的是，本次 Taro 1.2 更新的两个核心功能点均由个人开发者贡献——这完全体现了 Taro 社区的活跃、强大和开放。我们也会长期地维护与社区开发者们的关系，与开发者们一同成长，互利互赢。这也是 Taro 选择开源的意义所在。 如果你有任何想法，或者没有想法，Taro 都非常欢迎你来吐槽或观光： https://github.com/NervJS/taro","pubDate":"Mon, 17 Dec 2018 16:00:00 GMT","guid":"https://aotu.io/notes/2018/12/17/taro-1-2/","category":"小程序"},{"title":"Taro深度开发实践","link":"https://aotu.io/notes/2018/11/30/taro_practice/","description":"前言凹凸实验室的 Taro 是遵循 React 语法规范的多端开发方案，Taro 目前已对外开源一段时间，受到了前端开发者的广泛欢迎和关注。截止目前 star 数已经突破11.2k，还在开启的 Issues 有 200多个，已经关闭700多个，可见使用并参与讨论的开发者是非常多的。Taro 目前已经支持微信小程序、H5、RN、支付宝小程序、百度小程序，持续迭代中的 Taro，也正在兼容更多的端以及增加一些新特性的支持。 回归正题，本篇文章主要讲的是 Taro 深度开发实践，综合我们在实际项目中使用 Taro 的一些经验和总结，首先会谈谈 Taro 为什么选择使用React语法，然后再从Taro项目的代码组织、数据状态管理、性能优化以及多端兼容等几个方面来阐述 Taro 的深度开发实践体验。 为什么选择使用React语法这个要从两个方面来说，一是小程序原生的开发方式不够友好，或者说不够工程化，在开发一些大型项目时就会显得很吃力，主要体现在以下几点： 一个小程序页面或组件，需要同时包含 4 个文件，以至开发一个功能模块时，需要多个文件间来回切换 没有自定义文件预处理，无法直接使用 Sass、Less 以及较新的 ES Next 语法 字符串模板太过孱弱，小程序的字符串模板仿的是 Vue，但是没有提供 Vue 那么多的语法糖，当实现一些比较复杂的处理时，写起来就非常麻烦，虽然提供了 wxs 作为补充，但是使用体验还是非常糟糕 缺乏测试套件，无法编写测试代码来保证项目质量，也就不能进行持续集成，自动化打包 原生的开发方式不友好，自然就想要有更高效的替代方案。所以我们将目光投向了市面上流行的三大前端框架React、Vue、Angular 。Angular在国内的流行程度不高，我们首先排除了这种语法规范。而类 Vue 的小程序开发框架市面上已经有一些优秀的开源项目，同时我们部门内的技术栈主要是 React，那么 React 语法规范 也自然成为了我们的第一选择。除此之外，我们还有以下几点的考虑： React 一门非常流行的框架，也有广大的受众，使用它也能降低小程序开发的学习成本 小程序的数据驱动模板更新的思想与实现机制，与 React 类似 React 采用 JSX 作为自身模板，JSX 相比字符串模板来说更加自由，更自然，更具表现力，不需要依赖字符串模板的各种语法糖，也能完成复杂的处理 React 本身有跨端的实现方案 ReactNative，并且非常成熟，社区活跃，对于 Taro 来说有更多的多端开发可能性 综上所述，Taro 最终采用了 React 语法 来作为自己的语法标准，配合前端工程化的思想，为小程序开发打造了更加优雅的开发体验。 Taro项目的代码组织要进行 Taro 的项目开发，首先自然要安装 taro-cli，具体的安装方法可参照文档，这里不做过多介绍了，默认你已经装好了 taro-cli 并能运行命令。 然后我们用 cli 新建一个项目，得到的项目模板如下： 12345678910111213├── dist 编译结果目录├── config 配置目录| ├── dev.js 开发时配置| ├── index.js 默认配置| └── prod.js 打包时配置├── src 源码目录| ├── pages 页面文件目录| | ├── index index页面目录| | | ├── index.js index页面逻辑| | | └── index.css index页面样式| ├── app.css 项目总通用样式| └── app.js 项目入口文件└── package.json 如果是十分简单的项目，用这样的模板便可以满足需求，在 index.js 文件中编写页面所需要的逻辑 假如项目引入了 redux，例如我们之前开发的项目，目录则是这样的： 1234567891011121314151617181920├── dist 编译结果目录├── config 配置目录| ├── dev.js 开发时配置| ├── index.js 默认配置| └── prod.js 打包时配置├── src 源码目录| ├── actions redux里的actions| ├── asset 图片等静态资源| ├── components 组件文件目录| ├── constants 存放常量的地方，例如api、一些配置项| ├── reducers redux里的reducers| ├── store redux里的store| ├── utils 存放工具类函数| ├── pages 页面文件目录| | ├── index index页面目录| | | ├── index.js index页面逻辑| | | └── index.css index页面样式| ├── app.css 项目总通用样式| └── app.js 项目入口文件└── package.json 我们之前开发的一个电商小程序，整个项目大概3万行代码，数十个页面，就是按上述目录的方式组织代码的。比较重要的文件夹主要是pages、components和actions。 pages里面是各个页面的入口文件，简单的页面就直接一个入口文件可以了，倘若页面比较复杂那么入口文件就会作为组件的聚合文件，redux的绑定一般也是此页面里进行。 组件都放在components里面。里面的目录是这样的，假如有个coupon优惠券页面，在pages自然先有个coupon，作为页面入口，然后它的组件就会存放在components/coupon里面，就是components里面也会按照页面分模块，公共的组件可以建一个components/public文件夹，进行复用。 这样的好处是页面之间互相独立，互不影响。所以我们几个开发人员，也是按照页面的维度来进行分工，互不干扰，大大提高了我们的开发效率。 actions这个文件夹也是比较重要，这里处理的是拉取数据，数据再处理的逻辑。可以说，数据处理得好，流动清晰，整个项目就成功了一半，具体可以看下面数据状态管理的部分。如上，假如是coupon页面的actions，那么就会放在actions/coupon里面，可以再一次见到，所有的模块都是以页面的维度来区分的。 除此之外，asset文件用来存放的静态资源，如一些icon类的图片，但建议不要存放太多，毕竟程序包有限制。而constants则是一些存放常量的地方，例如api域名，配置等等。 项目搭建完毕后，在根目录下运行命令行 npm run build:weapp 或者 taro build --type weapp --watch 编译成小程序，然后就可以打开小程序开发工具进行预览开发了。编译成其他端的话，只需指定 type 即可（如编译 H5 ：taro build --type h5 --watch ）。 使用 Taro 开发项目时，代码组织好，遵循规范和约定，便成功了一半，至少会让开发变得更有效率。 数据状态管理上面说到，会用 redux 进行数据状态管理。 说到 redux，相信大家早已耳熟能详了。在 Taro 中，它的用法和平时在 React 中的用法大同小异，先建立 store、reducers，再编写 actions；然后通过@tarojs/redux，使用Provider 和 connect，将 store 和 actions 绑定到组件上。基础的用法大家都懂，下面我给大家介绍下如何更好地使用 redux。 数据预处理相信大家都遇到过这种时候，接口返回的数据和页面显示的数据并不是完全对应的，往往需要再做一层预处理。那么这个业务逻辑应该在哪里管理，是组件内部，还是redux的流程里？ 举个例子： 例如上图的购物车模块，接口返回的数据是 123456789&#123; code: 0, data: &#123; shopMap: &#123;...&#125;, // 存放购物车里商品的店铺信息的map goods: &#123;...&#125;, // 购物车里的商品信息 ... &#125; ...&#125; 对的，购车里的商品店铺和商品是放在两个对象里面的，但视图要求它们要显示在一起。这时候，如果直接将返回的数据存到store，然后在组件内部render的时候东拼西凑，将两者信息匹配，再做显示的话，会显得组件内部的逻辑十分的混乱，不够纯粹。 所以，我个人比较推荐的做法是，在接口返回数据之后，直接将其处理为与页面显示对应的数据，然后再dispatch处理后的数据，相当于做了一层拦截，像下面这样： 123456789101112const data = result.data // result为接口返回的数据const cartData = handleCartData(data) // handleCartData为处理数据的函数dispatch(&#123;type: 'RECEIVE_CART', payload: cartData&#125;) // dispatch处理过后的函数...// handleCartData处理后的数据&#123; commoditys: [&#123; shop: &#123;...&#125;, // 商品店铺的信息 goods: &#123;...&#125;, // 对应商品信息 &#125;, ...]&#125; 可以见到，处理数据的流程在render前被拦截处理了，将对应的商品店铺和商品放在了一个对象了. 这样做有如下几个好处： 一个是组件的渲染更纯粹，在组件内部不用再关心如何将数据修改而满足视图要求，只需关心组件本身的逻辑，例如点击事件，用户交互等 二是数据的流动更可控，后台数据 ——&gt; 拦截处理 ——&gt; 期望的数据结构 ——&gt; 组件，假如后台返回的数据有变动，我们要做的只是改变 handleCartData 函数里面的逻辑，不用改动组件内部的逻辑。 实际上，不只是后台数据返回的时候，其它数据结构需要变动的时候都可以做一层数据拦截，拦截的时机也可以根据业务逻辑调整，重点是要让组件内部本身不关心数据与视图是否对应，只专注于内部交互的逻辑，这也很符合 React 本身的初衷，数据驱动视图。 用Connect实现计算属性计算属性？这不是响应式视图库才会有的么，其实也不是真正的计算属性，只是通过一些处理达到模拟的效果而已。因为很多时候我们使用 redux 就只是根据样板代码复制一下，改改组件各自的store、actions。实际上，我们可以让它可以做更多的事情，例如： 123456789101112131415export default connect((&#123; cart,&#125;) =&gt; (&#123; couponData: cart.couponData, commoditys: cart.commoditys, editSkuData: cart.editSkuData&#125;), (dispatch) =&gt; (&#123; // ...actions绑定&#125;))(Cart)// 组件里render () &#123; const isShowCoupon = this.props.couponData.length !== 0 return isShowCoupon &amp;&amp; &lt;Coupon /&gt;&#125; 上面是很普通的一种connect写法，然后render函数根据couponData里是否数据来渲染。这时候，我们可以把this.props.couponData.length !== 0这个判断丢到connect里，达成一种computed的效果，如下： 123456789101112131415161718export default connect((&#123; cart,&#125;) =&gt; &#123; const &#123; couponData, commoditys, editSkuData &#125; = cart const isShowCoupon = couponData.length !== 0 return &#123; isShowCoupon, couponData, commoditys, editSkuData&#125;&#125;, (dispatch) =&gt; (&#123; // ...actions绑定&#125;))(Cart)// 组件里render () &#123; return this.props.isShowCoupon &amp;&amp; &lt;Coupon /&gt;&#125; 可以见到，在connect里定义了isShowCoupon变量，实现了根据couponData来进行computed的效果。 实际上，这也是一种数据拦截处理。除了computed，还可以实现其它的功能，具体就由各位看官自由发挥了。 性能优化关于数据状态处理，我们提到了两点，主要都是关于 redux 的用法。接下我们聊一下关于性能优化的。 setState的使用其实在小程序的开发中，最大可能的会遇到的性能问题，大多数出现在setData（具体到 Taro 中就是调用 setState 函数）上。这是由小程序的设计机制所导致的，每调用一次 setData，小程序内部都会将该部分数据在逻辑层（运行环境 JSCore）进行类似序列化的操作，将数据转换成字符串形式传递给视图层（运行环境 WebView），视图层通过反序列化拿到数据后再进行页面渲染，这个过程下来有一定性能开销。 所以关于setState的使用，有以下几个原则： 避免一次性更新巨大的数据。这个更多的是组件设计的问题，在平衡好开发效率的情况下尽可能地细分组件。 避免频繁地调用 setState。实际上在 Taro 中 setState 是异步的，并且在编译过程中会帮你做了这层优化，例如一个函数里调用了两次 setState，最后 Taro 会在下一个事件循环中将两者合并，并剔除重复数据。 避免后台态页面进行 setState。这个更有可能是因为在定时器等异步操作中使用了 setState，导致后台态页面进行了 setState 操作。要解决问题该就在页面销毁或是隐藏时进行销毁定时器操作即可。 列表渲染优化在我们开发的一个商品列表页面中，是需要有无限下拉的功能。 因此会存在一个问题，当加载的商品数据越来越多时，就会报错，invokeWebviewMethod 数据传输长度为 1227297 已经超过最大长度 1048576。原因就是我们上面所说的，小程序在 setData 的时候会将该部分数据在逻辑层与视图层之间传递，当数据量过大时就会超出限制。 为了解决这个问题，我们采用了一个大分页思想的方法。就是在下拉列表中记录当前分页，达到 10 页的时候，就以 10 页为分割点，将当前 this.state 里的 list 取分割点后面的数据，判断滚动向前滚动就将前面数据 setState 进去，流程图如下： 可以见到，我们先把商品所有的原始数据放在this.allList中，然后判断根据页面的滚动高度，在页面滚动事件中判断当前的页码。页码小于10，取 this.allList.slice 的前十项，大于等于10，则取后十项，最后再调用 this.setState 进行列表渲染。这里的核心思想就是，把看得见的数据才渲染出来，从而避免数据量过大而导致的报错。 同时为了提前渲染，我们会预设一个500的阈值，使整个渲染切换的流程更加顺畅。 多端兼容尽管 Taro 编译可以适配多端，但有些情况或者有些 API 在不同端的表现差异是十分巨大的，这时候 Taro 没办法帮我们适配，需要我们手动适配。 process.env.TARO_ENV使用process.env.TARO_ENV可以帮助我们判断当前的编译环境，从而做一些特殊处理，目前它的取值有 weapp 、swan 、 alipay 、 h5 、 rn 五个。可以通过这个变量来书写对应一些不同环境下的代码，在编译时会将不属于当前编译类型的代码去掉，只保留当前编译类型下的代码，从而达到兼容的目的。例如想在微信小程序和 H5 端分别引用不同资源： 12345if (process.env.TARO_ENV === 'weapp') &#123; require('path/to/weapp/name')&#125; else if (process.env.TARO_ENV === 'h5') &#123; require('path/to/h5/name')&#125; 我们知道了这个变量的用法后，就可以进行一些多端兼容了，下面举两个例子来详细阐述 滚动事件兼容在小程序中，监听页面滚动需要在页面中的onPageScroll事件里进行，而在 H5 中则是需要手动调用window.addEventListener来进行事件绑定，所以具体的兼容我们可以这样处理： 123456789101112131415161718192021222324class Demo extends Component &#123; constructor() &#123; super(...arguments) this.state = &#123; &#125; this.pageScrollFn = throttle(this.scrollFn, 200, this) &#125; scrollFn = (scrollTop) =&gt; &#123; // do something &#125; // 在H5或者其它端中，这个函数会被忽略 onPageScroll (e) &#123; this.pageScrollFn(e.scrollTop) &#125; componentDidMount () &#123; // 只有编译为h5时下面代码才会被编译 if (process.env.TARO_ENV === 'h5') &#123; window.addEventListener('scroll', this.pageScrollFn) &#125; &#125;&#125; 可以见到，我们先定义了页面滚动时所需执行的函数，同时外面做了一层节流的处理（不了解函数节流的可以看这里）。然后，在 onPageScroll 函数中，我们将该函数执行。同时的，在 componentDidMount 中，进行环境判断，如果是 h5 环境就将其绑定到 window 的滚动事件上。 通过这样的处理，在小程序中，页面滚动时就会执行 onPageScroll 函数（在其它端该函数会被忽略）；在 h5 端，则直接将滚动事件绑定到window上。因此我们就达成小程序，h5端的滚动事件的绑定兼容（其它端的处理也是类似的）。 canvas兼容假如要同时在小程序和 H5 中使用 canvas，同样是需要进行一些兼容处理。canvas 在小程序和 H5 中的 API 基本都是一致的，但有几点不同： canvas 上下文的获取方式不同，h5 中是直接从 dom 中获取；而小程序里要通过调用 Taro.createCanvasContext 来手动创建 绘制时，小程序里还需在手动调用 CanvasContext.draw 来进行绘制 所以做兼容处理时就围绕这两个点来进行兼容 1234567891011121314151617181920212223componentDidMount () &#123; // 只有编译为h5下面代码才会被编译 if (process.env.TARO_ENV === 'h5') &#123; this.context = document.getElementById('canvas-id').getContext('2d') // 只有编译为小程序下面代码才会被编译 &#125; else if (process.env.TARO_ENV === 'weapp') &#123; this.context = Taro.createCanvasContext('canvas-id', this.$scope) &#125;&#125;// 绘制的函数draw () &#123; // 进行一些绘制操作 // ..... // 兼容小程序端的绘制 typeof this.context.draw === 'function' &amp;&amp; this.context.draw(true)&#125;render () &#123; // 同时标记上id和canvas-id return &lt;Canvas id='canvas-id' canvas-id='canvas-id'/&gt;&#125; 可以见到，先是在 componentDidMount 生命周期中，分别针对不同的端的方法而取得 CanvasContext 上下文，在小程序端是直接通过Taro.createCanvasContext进行创建，同时需要在第二个参数传入this.$scope；在 H5 端则是通过 document.getElementById(id).getContext(&#39;2d&#39;)来获得 CanvasContext 上下文。 获得上下文后，绘制的过程是一致的，因为两端的 API 基本一样，而只需在绘制到最后时判读上下文是否有 draw 函数，有的话就执行一遍来兼容小程序端，将其绘制出来。 我们内部用 Canvas 写了一个弹幕挂件，正是用这种方法来进行两端的兼容。 上述两个具体例子总结起来，就是先根据 Taro 内置的 process.env.TARO_ENV 环境变量来判断当前环境，然后再对某些端进行单独适配。因此具体的代码层级的兼容方式会多种多样，完全取决于你的需求，希望上面的例子能对你有所启发。 总结本文先谈了 Taro 为什么选择使用React语法，然后再从Taro项目的代码组织、数据状态管理、性能优化以及多端兼容这几个方面来阐述了 Taro 的深度开发实践体验。整体而言，都是一些较为深入的，偏实践类的内容，如有什么观点或异议，欢迎加入开发交流群，一起参与讨论。","pubDate":"Fri, 30 Nov 2018 06:40:26 GMT","guid":"https://aotu.io/notes/2018/11/30/taro_practice/","category":"小程序"},{"title":"SVG vs Image, SVG vs Iconfont","link":"https://aotu.io/notes/2018/11/23/SVG_vs_Image_vs_iconfont/","description":"这可能是个别人写过很多次的话题，但貌似由于兼容性的原因？图标的显示还是用着 Iconfont 或者 CSS Sprite 的形式？希望通过自己新瓶装旧酒的方式能重新引导一下问题。 SVG vs Image比方说现在要做下图这样的视觉效果： 分析：可能需要三张图片 鼠标移入时的背景图 渐变色前景图 鼠标移入时白色前景图 独立图像现在对比一下背景图使用图片与使用 SVG 格式的体积大小（做图的时候拿错颜色了，其他都一样，能说明道理就行，见谅见谅） 可以看出，在肉眼感觉差异不大的情况下，WebP 格式体积最小，其次是 SVG，而 PNG 的体积过大。 这个 SVG 是在 Sketch 设计稿中导出来的，源码包含了很多冗余无效的代码，实际上是可以优化的，如下。 内部源码 优化后 优化后大约可以减去 1K 个字符。当然这个需要内联使用（Inline SVG） CSS Sprite使用 CSS Sprite 的方式可以减少 HTTP 请求，貌似还可以减少总体图片体积。这里用前景图来对比一下，实际上背景图和前景图都可以合成一张 sprite。 可以看出，CSS Sprite 的体积比 Inline SVG + CSS 的方式大很多。 SVG vs Image 结论 绿色部分表示 SVG 比 Image 略胜一筹的地方，黄色部分表示有所欠缺的地方，灰绿色表示差不多。 1、如今已接近 2019 年了，对于 IE9 (2011年) 这种古老的浏览器都支持 SVG，所以再过多强调更低的兼容性也没有什么意思。2、Inline SVG 在浏览器应该是被渲染成 DOM 节点，所以关于 DOM 节点的性能优化都有必要注意；一个 SVG 图像可能就会有很多路径，即 DOM 节点，太多的 DOM 节点必然会影响浏览器的渲染性能及内存占用，而纯位图的渲染方式应该是没有这方面的顾虑。（DOM 数量影响参考：Google WEB 开发者文档） 综上结论：除开复杂图像，选择 Inline SVG 或者 &lt;img/&gt; 标签的方式引入 SVG，会比使用 独立图像 或 组合图像 (CSS sprite) 的方式更好。 SVG vs Iconfont书写对比 首先看下 Iconfont 与 SVG 图标的使用方式，来源 阿里 Iconfont 平台 很明显 SVG Sprite 使用起来没有 Iconfont 方便，需要写 3 行代码， 而后者只需要写 1 行。当然上面的不是重点，重点是下面的换色与多色支持 换色与多色支持换色1、Iconfont 通过 CSS color 可以轻松更换图标颜色。 2、而 SVG Sprite 比较麻烦，SVG Sprite 的代码原理如下。 12345678910111213// 定义 symbol&lt;svg&gt; &lt;symbol id=\"icon-arrow-left\" viewBox=\"0 0 1024 1024\"&gt; &lt;path d=\"M694 ... 44.576-45.952\"&gt;&lt;/path&gt; &lt;/symbol&gt; &lt;symbol id=\"icon-arrow-right\" viewBox=\"0 0 1024 1024\"&gt; &lt;path d=\"M693 ... 0-0.48-46.4\"&gt;&lt;/path&gt; &lt;/symbol&gt;&lt;/svg&gt;// 使用&lt;svg&gt;&lt;use xlink:href=\"#icon-arrow-left\"/&gt;&lt;/svg&gt;&lt;svg&gt;&lt;use xlink:href=\"#icon-arrow-right\"/&gt;&lt;/svg&gt; 渲染出来的 DOM 结构是这样的： 渲染在了 Shadow DOM 中（关于 Shadow DOM 的知识可以阅读下这篇文章或这篇），这样的 DOM 元素样式就具有了作用域，外面的 CSS 对 shadow-root 内的元素不会生效，如果想要更换元素的颜色，需要使用 /deep/ 来穿透添加样式，如下。123svg /deep/ path &#123; fill: red;&#125; 当然，实际上在只需要在父级元素上添加 fill: red 这样的 CSS 也能起到同样的效果，里面的元素会继承父级的样式。 PS: /deep/ 是 shadow DOM v0 的写法，v1 已经把这样的写法抛弃了，实际上支持 v1 的 shadow DOM, 父级的样式可以直接作用在 shadow-root 里面的元素。 多色支持1、Iconfont 是不支持多色图标的。 2、而 SVG Sprite 可以利用 CSS 变量或 shadow DOM 的方式支持多色图标，shadow DOM的方式上面已经说明，下面借用他人的文章解释 CSS 变量实现多色，如下。 不过使用 CSS 变量或 shadow DOM 的方式兼容性都不好， CSS 变量：Edge15+ shadow DOM：更差。兼容性列表 3、Inline SVG 可以良好地支持多色及多色变化。 渐变色支持Iconfont 与 SVG Sprite 不支持渐变色。Inline SVG 支持渐变色，并且兼容性良好。 渲染无抖动使用 Iconfont，因为字体文件是异步加载的，所以在字体文件还没有加载完毕之前，图标位会留空，加载完毕后才会显示出来，这个过程就会出现向下图（来自 GitHub blog）这样的抖动，而 SVG Sprite 或 Inline SVG 内联加载则不会出现这样的抖动。 当然，Iconfont 也可以内联加载，不过需要转换成 base64 同样式表一起加载，转换后的文件体积则会变为原来的 1.3 倍左右这是由 base64 编码决定的（编码知识链接）。 字体转换成 base64 的一个在线工具：https://transfonter.org/ 体积较大这个是 SVG 对比于 Iconfont 的一个不足之处，如下图。 Inline SVG 与 SVG Sprite 体积差不多。 开发成本三者的开发成本都差不多，不过 SVG 的两种方式都需要前期做些配置，后期开发就会顺手很多（单页应用）。 以 vue + vue cli 为例说明 Inline SVG 便捷使用。 1、 配置 Webpack loader:12345678910111213141516171819202122232425262728293031&#123; // 排除需要转换成 Inline SVG 的目录 exclude: [resolve('src/svgicons')], test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: 'url-loader', options: &#123; limit: 1, name: utils.assetsPath('img/[name].[hash:7].[ext]') &#125;&#125;,&#123; // 指定特定的目录用于 Inline SVG include: [resolve('src/svgicons')], test: /\\.svg$/, use: [ // 读取 SVG 源代码 &#123; loader: 'raw-loader' &#125;, // 精简优化 SVG 源代码 &#123; loader: 'svgo-loader', options: &#123; plugins: [ &#123; removeTitle: true &#125;, &#123; removeViewBox: false &#125;, &#123; removeDimensions: true &#125;, // ...其他参数 ] &#125; &#125; ]&#125; 2、 创建 SvgIcon.vue 组件:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;template&gt; &lt;div class=\"svg-icon\"&gt; &lt;div class=\"svg-icon-wrapper\" v-html=\"icon\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'SvgIcon', props: &#123; name: &#123; type: String, required: true, &#125;, &#125;, data () &#123; return &#123; icon: this.getIcon(), &#125; &#125;, watch: &#123; name () &#123; this.icon = this.getIcon() &#125;, &#125;, methods: &#123; getIcon () &#123; return require(`@/svgicons/$&#123;this.name&#125;.svg`) &#125;, &#125;,&#125;&lt;/script&gt;&lt;style lang=\"stylus\" scoped&gt;.svg-icon &#123; overflow hidden display inline-block width 1em height 1em &amp;-wrapper &#123; display flex align-items center &gt;&gt;&gt; svg &#123; width 100% height 100% fill currentColor *[fill='none'] &#123; fill none &#125; *[stroke='none'] &#123; stroke none &#125; &#125; &#125;&#125;&lt;/style&gt;&lt;style lang=\"stylus\"&gt;.svg-icon-hover &#123; &amp;:hover &#123; svg &#123; *[fill] &#123; fill currentColor &#125; *[stroke] &#123; stroke currentColor &#125; &#125; &#125;&#125;&lt;/style&gt; 3、使用：1234567&lt;SvgIcon name=\"arrow-right\" /&gt;或者&lt;a class=\"svg-icon-hover\" href=\"#\"&gt; &lt;SvgIcon name=\"arrow-right\" /&gt;&lt;/a&gt; SVG vs Iconfont 结论应该是 Inline SVG vs SVG Sprite vs Iconfont 的结论，如下图。 综上结论选择 Inline SVG 或许是一个不错地选择去替代 Iconfont 的使用方式。 扩展阅读 GitHub 网站很早之前已经将图标的展示方式由 Iconfont 转成了 Inline SVG, 这一篇文章是他们的描述：https://blog.github.com/2016-02-22-delivering-octicons-with-svg/ 很早的一篇文章关于两者的对比：https://css-tricks.com/icon-fonts-vs-svg/","pubDate":"Fri, 23 Nov 2018 01:00:00 GMT","guid":"https://aotu.io/notes/2018/11/23/SVG_vs_Image_vs_iconfont/","category":"WEB开发"},{"title":"Taro 1.1 发布，全面支持微信/百度/支付宝 小程序","link":"https://aotu.io/notes/2018/11/05/taro-1-1/","description":"在 9 月 16 日的掘金小程序大会上，Taro 正式发布了 1.0 版本。 作为一个多端统一开发框架，Taro 1.0 版本为广大开发者带来了许多激动人心的特性，帮助开发者们更方便快捷地开发多端应用。 前进的脚步没有停下，历时一个多月，Taro 1.1 版本正式来袭！ 从 1.0 到 1.1，期间产生了 500 余次 Commit，发布了 23 个版本，Taro 一直保持高速的迭代频率，只为不断打磨，为它注入更多优秀的特性，让更多开发者受益。 Taro 1.1 正式来袭更丰富的平台转换支持自从微信小程序诞生以来，小程序的优势大家有目共睹，各大互联网厂商开始摩拳擦掌，纷纷布局小程序领域，其中势头最劲的当属百度智能小程序和支付宝小程序。对于前端而言，既是机遇，因为平台愈多，带来的机会愈多；也是挑战，因为不同的平台总会各有差异，为每个平台维护一份代码，成本显然太高。 为了降低多端应用的开发成本，在已全面支持 微信小程序 的基础上，Taro 在 1.1 版本中加入了对 百度智能小程序 和 支付宝小程序 的支持。 支持百度智能小程序升级到 1.1 版本后，即可获得将现有项目转换成百度智能小程序的能力。 使用如下命令进行百度智能小程序端编译预览及打包： 123456789# npm script$ npm run dev:swan$ npm run build:swan# 仅限全局安装$ taro build --type swan --watch$ taro build --type swan# npx 用户也可以使用$ npx taro build --type swan --watch$ npx taro build --type swan 选择百度智能小程序模式，需要你下载并打开百度开发者工具，然后在项目编译完后选择项目根目录下 dist 目录进行预览。 目前已有使用 Taro 开发的首款百度智能小程序 “京东好物街” 正式上线，可以使用百度 APP，扫描以下二维码进行体验： 支持支付宝小程序支付宝小程序的转换方式与百度智能小程序一致。 你可以使用如下命令进行百度智能小程序端编译预览及打包： 123456789# npm script$ npm run dev:alipay$ npm run build:alipay# 仅限全局安装$ taro build --type alipay --watch$ taro build --type alipay# npx 用户也可以使用$ npx taro build --type alipay --watch$ npx taro build --type alipay 选择支付宝小程序模式，需要你下载并打开支付宝小程序开发者工具，然后在项目编译完后选择项目根目录下 dist 目录进行预览。 新增平台标识在加入 百度智能小程序 和 支付宝小程序 支持后，目前 Taro 已经提供了对 5 个平台的支持，分别是 微信/百度/支付宝/React Native/H5，为了方便开发者书写平台差异化代码，Taro 为每个平台提供了平台标识，并可以通过 process.env.TARO_ENV 来获得，其取值分别如下 weapp，代表微信小程序 h5，代表 H5 rn，代表 React Native swan，代表百度智能小程序，1.1 版本新增 alipay，代表支付宝小程序，1.1 版本新增 开放多端 UI 库打包能力在 1.0 版本中，Taro 的 build 命令新增了 --ui 参数，来将按照一定规则组织的代码打包成可以在 Taro 中使用的多端 UI 库。 并且，基于这一功能，Taro 推出了首个可以跨多端使用的多端 UI 库 Taro UI。 为了完善 Taro 生态，扩展 Taro 社区，在 1.1 版本中开放了多端 UI 库的打包能力，并提供了详细的开发指南。 同时 Taro 也提供了官方的多端 UI 库示例，这是一个完整规范的 UI 库开发例子，包含必要的项目改造以及测试套件，基于这个示例，开发者可以快速地开发一个多端 UI 库项目。 还有更多在 1.0 版本中，Taro 提供了对 微信小程序、H5 以及 React Native 的支持，而 1.1 版本，在原有支持的基础之上，对每一个平台进行不断完善，让其更加丰富完整。 微信小程序 F 调用 this.setState 时，JSON Diff 算法 Bug 修复 F 修复 this.setState 回调里再调用 this.setState 的 Bug A 新增 componentWillPreload 生命周期，用于数据预加载 A 支持在同一作用域对 JSX 赋值 F 多层 Map 循环嵌套包含条件判断时问题修复 F 中文字符被编译成 unicode 码问题修复 F 三元表达式解析问题修复 A 提升字符串模板的性能 H5 A H5 支持分包配置 F 修复 H5 后台页面依然执行生命周期的问题 F 修复 PUT 、DELETE 等请求 body 为对象时无法发送 body 的问题 A 增加 setTabBarStyle 与 setTabBarItem API A 增加 arrayBufferToBase64 与 base64ToArrayBuffer API A 编译打包支持将公共 npm 包抽离成 lib 库 React Native A 支持 TypeScript F 修复项目初始化后 less 编译报错 A 添加 config.window.navigationStyle 配置 A 添加 showNavigationBarLoading 与 hideNavigationBarLoading API A 增加 arrayBufferToBase64 与 base64ToArrayBuffer API F 修复样式支持警告 A watch 模式时代码按需编译 F 修复同一文件夹下多个JS文件样式引用错误 F app.json 的 expo 配置改为可覆盖 A 支持 Taro.pxTransform F iconPath 和 selectedPath 的为同一个路径导致的重复引用的报错 A 在 config 中添加 rn 的 expo 配置 A 支持 deviceRatio 自定义 更完整的功能迭代记录请参阅 CHANGELOG 未来规划Taro 将会继续保持高效迭代，以满足日益增长的多端开发需求 目前已经确认的开发计划可以参见 Taro 版本开发计划。 小程序转 Taro 代码开启内测值得注意的是，激动人心的小程序转 Taro 代码功能已经开发完成，进入内测阶段，可以通过如下命令安装到 canary 版本，进行体验 1$ npm i -g @tarojs/cli@canary 欢迎针对这一功能，提供宝贵意见，意见入口请戳 👈👈👈 同时，为了帮助 Taro 更好地成长，让 Taro 更好地回馈所有开发者，欢迎您给 Taro 提供优秀想法，或者直接贡献代码。","pubDate":"Mon, 05 Nov 2018 12:00:00 GMT","guid":"https://aotu.io/notes/2018/11/05/taro-1-1/","category":"小程序"},{"title":"单屏页面响应式适配玩法","link":"https://aotu.io/notes/2018/10/22/Responsive-single-screen-design/","description":"首先瞅一下效果图 接着就是思考怎么做，我的想法如下图。 把公共的 页头 、页脚、导航栏、边框 放到最顶层，比方说设置层级为 999，其他每个独立页则放在下面，然后切换页面的时候更新独立页的层级以达到效果图的效果（当然不能超过最顶层）。 适配 上面的方式已经把效果做出来了，接下来就是响应式适配了。 1、Mac OS + Chrome先考虑一下我自己的系统及显示器， MacBook Pro 1440 x 900 + 外设 hp 1920 x 1080 也就是说 Chrome 的网页可视区高度大概为： 900(或1080) - 180 = 720px 180 = 60 + 20 + 10012360: MAC 桌面程序坞动态尺寸，60 可能是我常用的尺寸吧，那就先这个20: MAC 桌面最顶部 icon 放置栏高度100: Chrome 标签页高度 + 地址栏高度 + 书签栏高度 2、Windows + Chrome然后我们再看看 Windows + Chrome 的情况，以 1366 x 768 为例， Chrome 的网页可视区高度大概为 768 - 150 = 618px 150 = 40 + 1101240: Windows 桌面底部程序坞尺寸110: Chrome 标签页高度 + 地址栏高度 + 书签栏高度 3、总结上面两点 以上两点的高度计算通过截图获得，可能会有些许误差。 所以不管在哪种系统下，浏览器的宽度与分辨率是保持一致的（程序坞在底部的时候，程序坞在左右两边一般情况对宽度没有影响），高度则根据系统及浏览器的不同各有不同，比方说 Safari 没有书签高度。 不同系统加浏览器占用的最高高度约为 180，最小约为 0（全屏的时候） 4、主流系统分辨率尺寸然后我们看下当前主流系统及分辨率有哪些 PC &amp; MAC &amp; Chrome12345678910111213常用1280 x 8001366 x 1024 (IPad Pro)1440 x 9001680 x 10501600 x 9001920 x 12002560 x 1440更高忽略2880 x 16203200 x 18005120 x 2880 PC &amp; Windows &amp; Chrome （或 PC &amp; MAC &amp; Chrome &amp; 外设显示器）123451280 x 720/10241366 x 7681440 × 9001600 x 9001920 x 1080 Mobile &amp; Android123360 x 480412 x 732待补充 Mobile &amp; IOS123IPhone 6: 375 x 667IPhone 6 Plus: 414 x 736IPhone X: 375 x 812 不上不下的 IPad:1768 x 1024 5、分析我们以宽度 1024 及以下算作移动端，以上算作 PC 端，所以两种选择 移动端适配一个移动端页面，PC 端适配一个 PC 端页面。 设计之初就想好一个页面适配两端，当然这个设计稿需要比较符合适配两端的条件。 6、别人适配是怎么做的？贴几个录制的视频~ 所以，单屏页面最好页面内容言简意赅，设计层面倾向于水平垂直都居中的情况，是最适合做好这个页面的，并且在各种尺寸变化的情况下能比较良好地展示UI，且开发成本也比较合理。 7、自身情况及实现我们是分两个页面做的，先看一下 PC 端设计稿 结合动画的展现形式，其实并不是很理想做响应式，但还是要适配。 本来想用 rem 做适配的，但是 rem 需要些写很多个匹配，即下面的代码12345678910111213@media all and (max-width: 1024px) &#123; html, body &#123; font-size: 10px; &#125;&#125;@media all and (max-width: 1366px) &#123; html, body &#123; font-size: 12px; &#125;&#125;// 1680 1920 2560 等 然后有个问题就是，@media 是根据 width 的变化来匹配的，完全按照桌面分辨率来显示是没问题的，不过高度随便调节一下（变小），而宽度还是很宽，这时候页面底部的部分文本就会溢出被隐藏掉。 我们不需要考虑更低端的浏览器，所以可以使用比较前沿的特性，如 pointer-events 等特性。 所以使用 vh 做适配方案，vh 是什么单位详情可以看下这篇文章，这里做个简单介绍。 12vw: 相对于浏览器可视区的宽度 1vw = 浏览器可视区宽度的 1%vh: 相对于浏览器可视区的高度 1vh = 浏览器可视区高度的 1% 也就是说 100vh 实际上等于浏览器可视区的高度，所以 px 与 vh 的换算我们举个例子说明一下（一个很简单的数学换算）。假设浏览器可视区高度为 720px，某个元素的宽度为 300px，那应该写成多少 vh 才与 300px 相等呢，如下。1300 ÷ (720 ÷ 100) ≈ 41.666 比如设计稿为 1920x1080（单屏设计高度应该更小一点，如适配第一节所说），可以写个 CSS 预处理函数，这样方便直接使用设计稿的尺寸，以 Sass 为例如下。 123456789@function vh( $value ) &#123; @return ( $value / 1080 / 100 ) + vh;&#125;或者@function vw( $value ) &#123; @return ( $value / 1920 / 100 ) + vw;&#125; 然后，300px 可以无缝写成 vh(300) 或 vw(300)。 so… 对于我们的页面选择 vh 一举两得，不用写很多 rem 匹配，也不会出现溢出的问题。 因为高度变矮，内容的尺寸会随之变小，而页面是 1190 宽，水平居中布局，所以当只改变浏览器宽度的情况下，不会出现宽度变化溢出问题（除非分辨率超大，然后高度居很高，只把宽度缩很小的情况，这个下面会说到）。写完后在上面列举的主流分辨率下一一测试通过。 看看效果（当然这个是最终效果，只改变宽度的拉伸适配在最后会说）： 8、特殊场景这里就是刚刚说到的 分辨率超大，然后高度居很高，只把宽度缩很小的情况，因为设计稿是长宽比例为横向矩形，所以明显与用长宽比为竖向的矩形来看页面是背道而驰的。 委屈委屈，但还是要兼容下，至少看起来要显示正常。 8.1、尝试 rem + vh 方案一开始想的是 rem + vh 结合使用，根元素 html 使用 vh，其他单位则使用 rem，然后找到有问题的宽高比，通过 @media 方式设置 html 为 vw 来达到适配。 事实是，rem 缩小到一定值就不会再缩小了，这个跟浏览器对字体大小限制为最小 12px 一样，看个例子。 根字体小于 12px 以后，rem 对应的值则都是设置的倍数乘以 12；设置根字体为 vh, vw 单位同理，rem 会在 vh, vw 换算达到 12 以后就不再改变。 PPPS: 是不是有点坑，应该字体的属性最小值为 12，而其他属性的值没有控制才对 所以，如果使用 rem + vh 方案，在界面缩小到一定尺寸后继续缩小，有些值达到最小值固定不变，而有些值仍在变小，UI 的展示就变得混乱。 8.2、落地方案，vh + vw + JavaScript 计算而直接在元素的属性值上设置为 vh 或 vw，所有的值都会实时变动，没有最小值（除了属性为字体有最小值），这样就最大程度减少 UI 变乱的情况了，除非缩到很小很小，那就…（此处省略 1000 个字）。 于是乎，现在的想法是 在原来以 vh 为基础的情况下，拷贝所有带 vh 单位的代码，把 vh 换成 vw，当然这些改动都在一个比如叫 .vw-mode 的类下面，基本上可以无缝迁移，只需替换 vh 函数名即可。 把 .vw-mode 下的内容设置为上下居中。 通过 JS 计算，当可视区比例为竖向比例时，则在顶层元素加上 .vw-mode 类名，当比例为横向比例时，则去掉 .vw-mode 类名。 大致的代码如下 CSS1234567891011.homepage.vw-mode &#123; font-size: vw(14); .com-width &#123; width: vw(1190); &#125; .hp-header &#123; padding-top: vw(30); // ...更多代码 &#125; // ...更多代码&#125; JS12345678910this.resizeHandler = () =&gt; &#123; const clientWidth = document.documentElement.clientWidth const clientHeight = document.documentElement.clientHeight // 当长宽比为竖向比例时 const isVerticalRatio = clientWidth / clientHeight &lt; 1370 / 890 $homepageElem.classList[isVerticalRatio ? 'add' : 'remove']('vw-mode')&#125;this.resizeHandler()window.addEventListener('resize', this.resizeHandler) 最后的结果就是上面那个 GIF 效果图了。 9、移动端移动端用户是没法操作浏览器的，所以基本上都是标准的长宽比，用 vh 最合适不过了，或 vw。 10、最后体验（官网）：https://ling.jd.com 体验浏览器：Chrome、Safari 新版，其他浏览器暂不支持","pubDate":"Mon, 22 Oct 2018 11:30:00 GMT","guid":"https://aotu.io/notes/2018/10/22/Responsive-single-screen-design/","category":"项目总结"},{"title":"十分钟打造 3D 物理世界","link":"https://aotu.io/notes/2018/10/18/cannonjs/","description":"前言在繁忙的业务中，为了缩短设计和开发的周期，我们的 H5 小游戏更多的会采用 2D 的视觉风格，但总是一个风格是很无趣的，所以最近搞了一个 3D 物理游戏的需求，在开发的过程中遇到了不少问题，希望通过这篇文章将关于 Three.js、Cannon.js、模型、工具等基础知识、问题总结分享给大家。 开始 3D 项目之前，首先从选择 3D 框架开始，老牌引擎 Three.js 和微软的 Babylon.js 都不错，针对自己的项目需求选择一款即可，这次我主要针对更熟悉的 Three.js 来讲。 Three.js 基础概念使用 Three.js 前，首先要理解以下几个核心概念： Sence 场景在 Three.js 中首先需要创建一个三维空间，我们称之为场景。 场景可以想象成是一个容器，里面存放着所有渲染的物体和使用的光源。 1let scene = new THREE.Scene() Axes 坐标轴Three.js 采用的是右手坐标系，拇指、食指、中指分别表示 X、Y、Z 轴的方向。 Camera 摄像机摄像机就相当于我们的双眼，决定了能够在场景中的所见所得。 Three.js 中提供以下几种摄像机类型，最为常用的是 PerspectiveCamera 透视摄像机，其他了解下即可。 ArrayCamera 阵列摄像机 一个 ArrayCamera 会包含多个子摄像机，通过这一组子摄像机渲染出实际效果，适用于 VR 场景。 CubeCamera 立方摄像机 创建六个 PerspectiveCamera（透视摄像机），适用于镜面场景。 StereoCamera 立体相机 双透视摄像机适用于 3D 影片、视差效果。 OrthographicCamera 正交摄像机OrthographicCamera（正交摄像机）定义了一个矩形可视区域，物体只有在这个区域内才是可见的，另外物体无论距离摄像机是远或事近，物体都会被渲染成一个大小，所以这种摄像机类型适用于 2.5D 场景（例如斜 45 度游戏）。 PerspectiveCamera 透视摄像机最为常用的摄像机类型，模拟人眼的视觉，根据物体距离摄像机的距离，近大远小。默认情况下，摄像机的初始位置 X、Y、Z 都为 0，摄像机方向是从正 Z 轴向负 Z 轴看去。通过 Near 和 Far 定义最近和最远的可视距离，Fov 定义可视的角度。 Mesh 网格有了场景和摄像头就可以看到 3D 场景中的物体，场景中的我们最为常用的物体称为网格。 网格由两部分组成：几何体和材质 Geometry 几何体记录了渲染一个 3D 物体所需要的基本数据：Face 面、Vertex 顶点等信息。 例如下面这个网格是由三角形组成，组成三角形的点称为顶点，组成的三角形称为面。 Material 材质材质就像是物体的皮肤，决定了几何体的外表。外表的定义可以让一个物体看起来是否有镜面金属感、暗淡、纯色、或是透明与否等效果。 Light 光源光源相当于在密闭空间里的一盏灯，对于场景是必不可少的 在 Three.js 常用的有这几种光源： AmbientLight 环境光源属于基础光源，为场景中的所有物体提供一个基础亮度。 DirectionalLight 平行光源效果类似太阳光，发出的光源都是平行的。 HemisphereLight 半球光源只有圆球的半边会发出光源。 PointLight 点光源一个点向四周发出光源，一般用于灯泡。 SpotLight 聚光灯光源一个圆锥体的灯光。 Shadow 阴影另外要注意并不是每一种光源都能产生阴影，目前只有三种光源可以： DirectionalLight 平行光源 PointLight 点光源 SpotLight 聚光灯光源 另外如果要开启模型的阴影的话，模型是由多个 Mesh 组成的，只开启父的 Mesh 的阴影是不行的，还需要遍历父 Mesh 下所有的子 Mesh 为其开启投射阴影 castShadow 和接收投射阴影 receiveShadow。 1234567// 遍历子 Mesh 开启阴影object.traverse(function(child) &#123; if (child instanceof THREE.Mesh) &#123; child.castShadow = true child.receiveShadow = true &#125;&#125;) glTF 模型格式前面提到 Three.js 引擎支持的格式非常的多，我们最为常见的格式有 .obj + .mtl + .jpg/.png，但使用这种模型格式存在一个问题，.obj 是静态模型，不支持动画数据存储，无法使用模型的动画，所以我建议使用 glTF 这种模型格式。 glTF 模型格式介绍传统的 3D 模型格式的设计理念更多是针对本地离线使用，所以这类 3D 模型格式没有针对下载速度或加载速度进行优化，文件大小往往会非常的大，随着 Web 端的兴起，对文件大小更为敏感的今天，我们该尝试别的模型格式了。 glTF 是由 Khronos Group 开发的 3D 模型文件格式，该格式的特点是最大程度的减少了 3D 模型文件的大小，提高了传输、加载以及解析 3D 模型文件的效率，并且它可扩展，可互操作。 第一版 glTF 1.0 于 2015 年 10 月 19 日发布，2017 年 6 月 5 日的 Web 3D 2017 大会发布了最终版本 glTF 2.0。 glTF 模型格式文件组成 模型文件 .gltf包含场景中节点层次结构、摄像机、网格、材质以及动画等描述信息。 二进制文件 .bin包含几何、动画的数据以及其他基于缓冲区的数据，.bin 文件可以直接加载到 GPU 的缓冲区中从而不需要额外的解析，因此能够高效传输和快速加载。 材质贴图文件 .png/.jpg3D 模型做凹凸贴图或普通贴图上所使用到文件。 glTF 模型格式导出官方在 .gltf 格式导出上提供了多种建模软件的导出插件，比如有： 3DS Max Exporter Maya Exporter Blender glTF 2.0 Exporter … 正巧我们常用的 C4D 建模软件官方没有提供 C4D 的导出插件，所以我们使用 C4D 导出后再导入 Blender，通过 Blender 作为中转站导出 glTF 格式文件。 但由于两个建模软件之间的材质并不能相通，导出后的模型文件材质效果表现不佳，这是因为 Blender 有自己的一套材质流程系统，例如有 glTF Metallic Roughness 和 glTF Specular Glossiness，需在此基础之上重新贴材质后导出解决。 另外注意的一点 Blender 的坐标系与 Three.js 是不同的，Blender 会将 Z 和 Y 对调位置，在导出时要选择 Convert Z up to Y up 进行对调。 Three.js 使用 glTF 模型Three.js 中使用 glTF 格式需额外引入 GLTFLoader.js 加载器。 123456var gltfLoader = new THREE.gltfLoader()gltfLoader.load('./assets/box.gltf', function(sence) &#123; var object = scene.gltf // 模型对象 scene.add(object) // 将模型添加到场景中&#125;) glTF 模型动画Animation Clip 动画片段前面提到 glTF 模型格式支持动画，模型动画可以使用 Blender 建模软件制作，通过 Blender 提供的时间轴编辑变形动画或者骨骼动画，每个动画可以编辑为一个 Action 动作，导出后使用 GLTFLoader 加载到 Three.js 中，可以拿到一个 animations 数组，animations 里包含了模型的每个动画 Action 动作。 123456789101112131415161718192021let gltfLoader = new THREE.gltfLoader()let mixer = nullgltfLoader.load('./assets/box.gltf', function(sence) &#123; let object = scene.gltf let animations = sence.animations // 动画数据 if (animations &amp;&amp; animations.length) &#123; mixer = new THREE.AnimationMixer(object) // 对动画进行控制 for (let i = 0; i &lt; animations.length; i++) &#123; mixer.clipAction(animations[i]).play() // 播放所有动画 &#125; &#125; scene.add(object)&#125;)function update() &#123; let delta = clock.getDelta(mixer) mixer.update(delta) // 更新动画片段&#125; Tween 动画对模型实现淡入淡出、缩放、位移、旋转等动画推荐使用 GSAP 来实现更为简便。 1234567891011121314151617181920212223let tween = new TimelineMax()tween .to(box.scale, 1, &#123; // 从 1 缩放至 2，花费 1 秒 x: 2, y: 2, z: 2, ease: Power0.easeInOut, // 速度曲线 onStart: function() &#123; // 监听动画开始 &#125;, onUpdate: function() &#123; // 监听动画过程 &#125;, onComplete: function() &#123; // 监听动画结束 &#125; &#125;) .to(box.position, 1, &#123; // 缩放结束后，位移 x 至 10，花费 1 秒 x: 10, y: 0, z: 0 &#125;) Draco 3D 模型压缩工具Draco 是一个用于压缩、解压缩 3D 几何网格和点云的开源库，为改善 3D 图形存储和传输而设计。 使用该工具可以对 glTF 格式进一步的压缩，会将 glTF 格式转为 .glb 格式，并且 .bin 压缩效果拔群，但是在 Three.js 中使用 .glb 格式需要引入额外的解析库，解析库文件包括 draco_decoder.js（791KB）、draco_decoder.wasm（323 KB）、draco_wasm_wrapper.js（64.3 KB）。所以更推荐当模型文件数量多，且文件较大时使用，否则得不偿失。 压缩使用 glTF Pipeline 工具，需要将三个种类的文件放在一起，执行命令行进行转换。 12$ npm install -g gltf-pipeline // 安装 gltf-pipeline 工具$ gltf-pipeline -i model.gltf -o model.glb // 指定某个 .gltf 文件转为 .glb 格式 Three.js 使用 .glb 格式引入 Draco 解码库 1234567891011// 实例化 loaderlet loader = new THREE.GLTFLoader()// Draco 解码库THREE.DRACOLoader.setDecoderPath('/examples/js/libs/draco')loader.setDRACOLoader(new THREE.DRACOLoader())// 加载 glTF 模型loader.load('models/gltf/box.gltf', function(gltf) &#123; scene.add(gltf.scene)&#125;) Cannon.js 3D 物理引擎目前在 Github 上搜索到的 3D 物理引擎库有 Cannon.js、Oimo.js、Ammo.js、Energy.js、Physijs 等等，大部分都已许久没有更新迭代了（长达好几年），项目的 Star 数量和 Issues 数量也不多，我们该如何选择？ Cannon.js、Oimo.js 和 Energy.js 作为 Babylon.js 的内置物理引擎，我们试着从这三个下手。 Energy.js：使用 C++ 编写转 JavaScript 的 3D 物理引擎，源码不可读，目前 Github 比较冷清。 Oimo.js：一款轻量级的 3D 物理引擎，文件大小 153 KB。 Cannon.js：完全使用 JavaScript 编写的优秀 3D 物理引擎，包含简单的碰撞检测、各种形状的摩擦力、弹力、约束等功能。 从综合性来看，我更偏向于 Cannon.js ，所以下面主要讲讲 Cannon.js。 Cannon.js 的特性以下是 Cannon.js 的特性，基本可以满足大部分的 3D 物理开发场景。 使用 Cannon.js我们以官方的一个平面加球刚体的例子来快速上手 Cannon.js。在线例子 1、初始化物理世界使用 Cannon.js 前需要创建 CANNON.World 对象，CANNON.World 对象是负责管理对象和模拟物理的中心。 创建完 CANNON.World 对象后，接着设置物理世界的重力，这里设置了负 Y 轴为 10 m/s²。 12let world = new CANNON.World()world.gravity.set(0, -10, 0) Cannon.js 提供了 Broadphase、NaiveBroadphase 两种碰撞检测阶段，默认是 NaiveBroadphase。 1world.broadphase = new CANNON.NaiveBroadphase() 2、创建动态球体创建 Body 分三个步骤： 创建形状 为形状添加刚体 将刚体添加到世界 12345678let sphereShape = new CANNON.Sphere(1) // Step 1 let sphereBody = new CANNON.Body(&#123; // Step 2 mass: 5, position: new CANNON.Vec3(0, 10, 0), shape: sphereShape&#125;)world.add(sphereBody) // Step 3 第一步创建了半径为 1 的球形，第二步创建球的刚体，如果刚体的 mass 属性设置为 0，刚体则会处于静止状态，静止的物体不会和其他静止的物体发生碰撞，我们这里为球的刚体设置了 5kg，球会处于动态的状态，会受的重力的影响而移动，会与其他物体发生碰撞。 3、创建静态平面和动态球体1234567891011// 平面 Bodylet groundShape = new CANNON.Plane()let groundBody = new CANNON.Body(&#123; mass: 0, shape: groundShape&#125;)// setFromAxisAngle 旋转 X 轴 -90 度groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -1.5707963267948966)world.add(groundBody) 创建平面形状，接着是刚体，这里设置了平面刚体的 mass 为 0，保证刚体处于静止状态。默认情况下平面的方向是朝向 Z 方向的（竖立着），可以通过 Body.quaternion.setFromAxisAngle 对平面进行旋转。 4、创建平面和球的网格前面创建的刚体在场景中并没有实际的视觉效果，这一步创建平面、球的网格。 1234567891011121314// 平面网格let groundGeometry = new THREE.PlaneGeometry(20, 20, 32)let groundMaterial = new THREE.MeshStandardMaterial(&#123; color: 0x7f7f7f, side: THREE.DoubleSide&#125;)let ground = new THREE.Mesh(groundGeometry, groundMaterial)scene.add(ground)// 球网格let sphereGeometry = new THREE.SphereGeometry(1, 32, 32)let sphereMaterial = new THREE.MeshStandardMaterial(&#123; color: 0xffff00 &#125;)let sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)scene.add(sphere) 5、模拟世界接着我们为物理世界开启持续更新，并且将创建的球刚体与球网格关联起来。 123456789function update() &#123; requestAnimationFrame(update) world.step(1 / 60) if (sphere) &#123; sphere.position.copy(sphereBody.position) sphere.quaternion.copy(sphereBody.quaternion) &#125;&#125; 通过这几步，一个简单的物理场景就完成了，另外更多官方例子可以点击这里，可以查看到 Cannon.js 各个约束、摩擦力、模拟汽车等特性的例子。 其他：1、自定义物理材质需关联还是上面的例子，现在场景中刚体的物理特性都为默认的，我希望球的恢复系数高一点，即掉落时弹跳的更高。首先需要通过 CANNON.Material 实例物理材质，刚体使用该物理材质，最后通过 CANNON.ContactMaterial 来定义两个刚体相遇后会发生什么。 123456789101112131415161718192021// 平面let ground_cm = new CANNON.Material() // Step 1 : 实例 CANNON.Materiallet groundBody = new CANNON.Body(&#123; ... material: groundMaterial // Step 2 : 使用该物理材质 ...&#125;)// 球let sphere_cm = new CANNON.Material()let sphereBody = new CANNON.Body(&#123; ... material: sphere_cm ...&#125;)let sphere_ground = new CANNON.ContactMaterial(ground_cm, sphere_cm, &#123; // Step 3 : 定义两个刚体相遇后会发生什么 friction: 1, restitution: 0.4&#125;)world.addContactMaterial(sphere_ground) // Step 4 : 添加到世界中 2、刚体添加位移动画时需取消速度值比如我使用 GSAP 库对某个刚体进行 Y 轴向上移动，在 update 阶段需要将刚体的重力加速度设置为 0，否则动画结束后刚体会出现向下砸的效果。 12345678910111213let tween = new TimelineMax()tween.to(boxBody.position, 2, &#123; x: 0, y: 10, z: 0, update: function() &#123; // 归 0 设置 boxBody.velocity.setZero() boxBody.initVelocity.setZero() boxBody.angularVelocity.setZero() boxBody.initAngularVelocity.setZero() &#125;&#125;) 3、只检测碰撞，不发生物理效果允许只检测是否碰撞，实际不发生物理效果，需要为刚体添加以下属性： 1boxBody.collisionResponse = false 4、缩放刚体如果刚体需要缩放，则需要为刚体添加此属性，来更新刚体大小。 123456boxBody.updateMassProperties()let tween = new TimelineMax()tween.to(sphereBody.shapes[0], 2, &#123; radius: 0.2 // 缩放至 0.2&#125;) 点击交互在 3D 的世界中不能像我们在 DOM 中为一个节点绑定点击事件那么容易，在 Three.js 中提供了 THREE.Raycaster 方法处理点击交互，使用鼠标或者手指点击屏幕时，会将二维坐标进行转换，发射一条射线判断与哪个物体发生了碰撞，由此得知点击了哪个物体。点击这里官方例子 12345678910111213141516let raycaster = new THREE.Raycaster()let mouse = new THREE.Vector2()function onTouchEnd(ev) &#123; // 点击获取屏幕坐标 var event = ev.changedTouches[0] mouse.x = (event.clientX / window.innerWidth) * 2 - 1 mouse.y = -(event.clientY / window.innerHeight) * 2 + 1 raycaster.setFromCamera(mouse, camera) let intersects = raycaster.intersectObjects(scene, true) for (let i = 0; i &lt; intersects.length; i++) &#123; console.log(intersects[i]) // 与射线发生碰撞的物体 &#125;&#125; 性能方面模型精细程度在 Web 端由于性能的限制，在开发过程中要尽量避免做一些损耗性能较大的事情。 首先是模型的精细程度，在保证效果的前提下，尽量降低模型面的数量，也就是说采用低模模型，一些模型的凹凸褶皱感也可以通过凹凸贴图的方式去实现，越是复杂的模型在实时渲染的过程中就越占用手机性能。 光源与阴影另外一方面光源、阴影也是占性能，尤其是阴影。光源一般会使用平行光或者聚光灯，这种光源照射在物体上更为真实，使用半球光会稍微提升帧数，但效果略差些，阴影效果前面提到过要遍历每一个子 Mesh 接收产生阴影 castShadow 和接收阴影 receiveShadow，这相当耗费性能，开启后对阴影的精细程度以及阴影类型进行参数优化，在 Android 系统性能不太好，iOS 系统基本能保证流畅运行，所以建议根据设备系统优化。 12var n = navigator.userAgentif (/iPad|iPhone|iPod/.test(n) &amp;&amp; !window.MSStream) &#123; &#125; // 针对 iOS 系统使用阴影 抗锯齿与像素比抗锯齿是让模型的边缘效果更加圆滑不粗糙，也会占用一些性能，默认是关闭的，视情况开启。 1renderer.antialias = true // 开启抗锯齿 另外像素比 setPixelRatio，移动端由于 Retina 屏的缘故，一般会设置为 2，所以使用 window.devicePixelRatio 获取实际设备像素比动态设置的话，部分大屏手机的像素比有 3 的情况，所有会因为像素比过高造成性能问题。 12renderer.setPixelRatio(2) // 推荐renderer.setPixelRatio(window.devicePixelRatio) // 不推荐 工具推荐最后推荐一些在开发过程中常用的工具： OrbitControls 轨道控制器OrbitControls 是用于调试 Camera 的方法，实例化后可以通过鼠标拖拽来旋转 Camera 镜头的角度，鼠标滚轮可以控制 Camera 镜头的远近距离，旋转和远近都会基于场景的中心点，在调试预览则会轻松许多。 1new THREE.OrbitControls(camera, renderer.domElement) glTF Viewer 模型快速预览工具在设计师建模完成导出后，设计师并不知道在 Three.js 最终会呈现一个什么效果或者开发者也想快速的查看模型是否存在问题，glTF 官方贴心的提供了一款快速预览的工具，提供了两个版本：Web 版本和 Desktop 版本。 将 .gltf、.bin、.jpg/.png 文件拖拽到工具中，可以调试预览到模型的动画、变形目标、背景、线框模式、自动旋转、光源等功能。 Helper 相关调试模式Camera Helper 摄像机调试模式开启 Camera Helper 调试模式后，可以直观的看到 Camera 的 Fov、 Nera、Far 的参数效果。 1234let camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000)let helper = new THREE.CameraHelper(camera)scene.add(helper) Light Helper 光源调试模式聚光灯开启 Light Helper 调试模式后，可以直观的看到 distance、angle 的参数效果。 1234let light = new THREE.DirectionalLight(0xffffff)let helper = new THREE.DirectionalLightHelper(0xffffff)scene.add(helper) AxesHelper 坐标轴调试模式AxesHelper 是在场景的中心点，添加一个坐标轴（红色：X 轴、绿色：Y 轴、蓝色：Z 轴），方便辨别方向。 12let axesHelper = new THREE.AxesHelper(10)scene.add(axesHelper) Cannon.js 3D 物理引擎调试模式Cannon.js 3D 物理引擎提供的调试模式需引入 Debug renderer for Three.js，可以将创建的物理盒子、球、平面等显示线框，便于在使用过程中实时查看效果。 123456let cannonDebugRenderer = new THREE.CannonDebugRenderer(scene, world)function render() &#123; requestAnimationFrame(render) cannonDebugRenderer.update() // Update the debug renderer&#125; dat.GUI 图形用户界面调试工具在开发过程中，常常需要对参数变量进行微调，针对这个 Three.js 提供了 dat.GUI，dat.GUI 是一个轻量级的图形用户界面调试工具，使用后在右上角会出现一个 GUI 可视化参数配置区域，通过修改数值来实时查看结果。 123456789101112131415161718let opts = &#123; x: 0, y: 0, scale: 1&#125;let gui = new dat.GUI()gui.add(opts, 'x', -3, 3)gui.add(opts, 'y', -3, 3)gui.add(opts, 'scale', 1, 3)function loop() &#123; cube.position.x = opt.x cube.position.y = opt.y cube.scale.set(opts.scale, opts.scale, opts.scale) requestAnimationFrame()&#125; Stats 调试工具Stats 工具可以实时查看： FPS：最后一秒的帧数，越大越流畅 MS：渲染一帧需要的时间（毫秒），越低越好 MB：占用的内存信息 CUSTOM：自定义面板 123456789var stats = new Stats()stats.showPanel(1)document.body.appendChild(stats.dom)function animate() &#123; requestAnimationFrame(animate)&#125;requestAnimationFrame(animate) 尾巴最后，希望本篇文章所讲到的内容能帮助你更好的开发 3D 项目。另外，如果你有更好的实现思路，也欢迎你在下方评论区留言，感谢您的阅读。 参考 《Learning Three.js》 threejs babylonjs glTF 2.0 README Cannon.js Debug renderer for Three.js three-gltf-viewer stats.js","pubDate":"Thu, 18 Oct 2018 01:20:00 GMT","guid":"https://aotu.io/notes/2018/10/18/cannonjs/","category":"H5游戏开发"},{"title":"多端统一开发框架 Taro 1.0 正式发布","link":"https://aotu.io/notes/2018/09/18/taro-1-0-0/","description":"在 2018.6.7 我们对外开源了 多端统一开发框架——Taro。 Taro 是一个多端统一开发框架，它支持使用 React 的开发方式来编写可以同时在微信小程序、Web 、React Native 等多个平台上运行的应用，帮助开发者提升开发效率，改善开发体验，降低多端研发成本。 自开源以来，Taro 一直广受业界关注，其原理与思想也得到了广泛开发者的认可，这对于我们来说无疑是一件令人振奋的事。但是由于初期 Taro 测试与实现方式的不足，导致在开源期间 Bug 较多，受到了一些质疑。为此，我们痛定思痛，积极接受了开源社区的意见与帮助，并努力探索提升 Taro 稳定性与性能的方式。经过不断地迭代完善，已经让 Taro 浴火重生。 1.0.0 真的来了Taro 开源到现在 3 个月时间，累计发布 70 余日常版本及 20 余 Taro 1.0.0 的 beta 版本，经过近百个版本的迭代优化，我们亲身体会到 Taro 的 BUG 反馈越来越少，Taro 越来越健壮且完善，因此，我们有信心推出 1.0.0 正式版。 Taro 1.0.0 正式版在延续了之前版本优秀特性的同时，增加了更加丰富的特性与功能，并进行了多项小程序端/H5端的转换优化，同时带来了对 React Native 的转换支持。 全新的小程序组件化开源之初，由于种种原因，Taro 的微信小程序端组件化采用的是小程序 &lt;template /&gt; 标签来实现的，利用小程序 &lt;template /&gt; 标签的特性，将组件 JS 文件编译成 JS + WXML 模板，在父组件（页面）的模板中通过 &lt;template /&gt; 标签引用子组件的 WXML 模板来进行拼接，从而达到组件化的目的。 实践证明，Template 模板方案是一个失败的组件化方案，Taro 开源初期的 Bug 主要来源于此。因为这一方案将 JS 逻辑与模板拆分开了，需要手工来保证 JS 与模板中数据一致，这样在循环组件渲染、组件多重嵌套的情况下，要保证组件正确渲染与 props 正确传递的难度非常大，实现的成本也非常高。而且，囿于小程序 &lt;template /&gt; 标签的缺陷，一些功能（例如自定义组件包含子元素，等）无法实现。 所以，在经过艰辛的探索与实践之后，我们采用了小程序原生组件化来作为 Taro 的小程序端组件化方案，并且通过一些处理，绕开了小程序组件化的诸多限制，为 Taro 的稳定性打下了坚实基础，并带来了以下好处： 小程序端组件化更加健壮 尽可能减少由于框架带来的性能问题 依托官方组件化，方便以后解锁更多可能 全面支持小程序生态为了更好地帮助开发者使用 Taro 开发小程序，在 1.0.0 版本中，我们加强了对小程序生态的支持，主要提现在以下几个方面。 支持引用小程序端第三方组件库受益于小程序组件化重构，我们在 Taro 中支持了直接引用小程序端第三方组件库，让 Taro 可以融入到小程序生态中，为开发者提供更多便利。 目前实测已经支持了如下知名第三方组件库 echarts-for-weixin，ECharts 的微信小程序版本 iview-weapp，iview 的微信小程序版本 vant-weapp，轻量、可靠的小程序 UI 组件库 wxParse，微信小程序富文本解析自定义组件，支持HTML及markdown解析 当然，Taro 不仅仅只支持上述组件库，只要是按原生小程序规范编写的组件库都能在 Taro 中正常使用。 支持 Taro 代码与原生小程序代码混写与此同时，Taro 支持原生小程序代码与 Taro 代码混写，因此，可以使用 Taro 愉快地将旧的小程序项目慢慢地改造成 Taro 项目了。 支持小程序端分包加载以及插件引用我们在 Taro 中也加入对原生小程序分包加载功能的支持，配置的方式与原生小程序基本一致，只需要在 app.js 入口文件中加入 subPackage 字段即可。 123456789101112131415161718import Taro, &#123; Component &#125; from '@tarojs/taro'class App extends Component &#123; config = &#123; pages: [ 'pages/index', 'pages/logs' ], subPackages: [ &#123; root: 'moduleA', pages: [ 'pages/rabbit', 'pages/squirrel' ] &#125; ] &#125;&#125; 同时，Taro 也支持了使用小程序的插件功能，可以在 Taro 中直接引用第三方的插件 1234567891011121314151617import Taro, &#123; Component &#125; from '@tarojs/taro'import &#123; View &#125; from '@tarojs/Components'class PageA extends Component &#123; config = &#123; usingComponents: &#123; 'hello-component': 'plugin://myPlugin/hello-component' &#125; &#125; render () &#123; return ( &lt;View&gt; &lt;hello-component&gt;&lt;/hello-component&gt; &lt;/View&gt; ) &#125;&#125; 小程序 setState 性能优化在最初的开源版本中，小程序端 setState 仅仅是对小程序 setData 做了一次异步封装，最终调用 setData 更新的时候还是传入了完整数据。 但众所周知，小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境，在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。在调用 setData 之后，会将数据使用 JSON.stringify 进行序列化，再拼接成脚本，然后再传给视图层渲染，这样的话，当数据量非常大的时候，小程序就会变得异常卡顿，性能很差。 Taro 在框架级别帮助开发者进行了优化，在 setData 之前进行了一次数据 Diff，找到数据的最小更新路径，然后再使用此路径来进行更新。例如 1234567891011121314151617181920// 初始 statethis.state = &#123; a: [0], b: &#123; x: &#123; y: 1 &#125; &#125;&#125;// 调用 this.setStatethis.setState(&#123; a: [1, 2], b: &#123; x: &#123; y: 10 &#125; &#125;&#125;) 在优化之前，会直接将 this.setState 的数据传给 setData，即 12345678this.$scope.setData(&#123; a: [1, 2], b: &#123; x: &#123; y: 10 &#125; &#125;&#125;) 而在优化之后的数据更新则变成了 12345this.$scope.setData(&#123; 'a[0]': 1, 'a[1]': 2, 'b.x.y': 10&#125;) 这样的优化对于小程序来说意义非常重大，可以避免因为数据更新导致的性能问题。 更加丰富的 JSX 语法支持前面已经提到 Taro 使用 React 语法规范来开发多端应用，这样就必然是采用 JSX 来作为模板，所以 Taro 需要将 JSX 编译成各个端支持的模板，其中以小程序端最为复杂，Taro 需要将 JSX 编译成小程序的 WXML 模板。 在开源的过程中，Taro 支持的 JSX 写法一直在不断完善，力求让开发体验更加接近于 React，主要包括以下语法支持： 支持 Ref，提供了更加方便的组件和元素定位方式 支持 this.props.children 写法，方便进行自定义组件传入子元素 在循环体内执行函数和表达式 定义 JSX 作为变量使用 支持复杂的 if-else 语句 在 JSX 属性中使用复杂表达式 在 style 属性中使用对象 只有使用到的变量才会作为 state 加入到小程序 data，从而精简小程序数据 目前，除了 Taro 官方 ESLint 插件 eslint-plugin-taro 中限制的语法之外，其他 JSX 语法基本都支持，而在原生组件化的帮助下，未来将会把 ESLint 的限制也逐条取消。 React Native 端转换支持在 Taro 1.0.0 中，我们将正式推出 React Native 端的转换支持，可以将现有 Taro 项目转换成 RN 版本，但需要注意对样式的处理，因为 RN 支持的样式非常有限，它是属于 CSS 的子集，具体请移步 RN 端转换注意事项。 Taro 的 RN 端基于 Expo 来进行编译构建 RN 程序，开发方式和编译命令与其他端类似，代码目录结构与现有 Taro 项目也基本一致 RN 编译预览模式 123456# npm script$ npm run dev:rn# 仅限全局安装$ taro build --type rn --watch# npx用户也可以使用$ npx taro build --type rn --watch 执行完命令之后，Taro 将会开始编译文件，最终获得 RN 端的编译指引，并且启动你的应用了 React Native 端完整开发流程请移步 React Native 开发流程介绍。 更加健全的 TypeScript 支持 随着前端项目的复杂度和规模的增加，近年来越来越多的项目开始使用 TypeScript 进行开发。Taro 也注意到了这一趋势，在开源之初就提供了对 TypeScript 的支持。在社区的帮助下，Taro 对 TypeScript 的支持也更加健全和完善： @tarojs/cli 可以直接创建 TypeScript 项目 @tarojs/components 包含了所有组件的类型定义 @tarojs/taro 的所有 API 也都包含了类型定义 @tarojs/redux 和 taro-ui 也都全部内置了类型定义 构建系统的编译器从 Babel 切换到原生 TypeScript 编译器，支持所有 TypeScript 语法 H5 端转换优化同时，Taro 在 H5 端的转换中，也进行诸多转换优化，修复了之前版本 H5 下诸多 Bug，让 H5 端路由系统更加健壮，同时开放了 Webpack 配置，可以让开发者自由地进行相关配置。 最后，附上 Taro 完整的 迭代历程。 重生之路正如上文提到，Taro 1.0.0 带来许多新的优秀特性，而同时，在社区内的 Bug 反馈已经愈来愈少，这也是开源期间不断努力打磨的结果。 从 6.7 到行文截止，Taro 一共经历了 1800 余次提交，平均每天近 20 次，最多的一天达 30 次。每一次提交都是进步，每一次提交都让 Taro 更加强大。经过这么多次迭代之后，已经让 Taro 获得重生，尤其是小程序组件化重构完成之后，Taro 从旧版架构的泥潭中一跃而出，成为更加健壮的开发框架。 在我们自己不断反思、优化的同时，也积极融入开源社区，依托社区的力量去建设 Taro。 GitHub ISSUES 是检验一个开源项目靠谱程度的标准之一，到目前为止，一共收到了 500 余个 ISSUES，已关闭近 400 个，关闭率在 80% 左右，未关闭的也大部分是一些功能的迭代需求。在 Taro 开发团队内部更是要求每一个 ISSUE 的响应时间不能超过 24 小时。正是因为这些 ISSUES ，让我们不断意识到 Taro 的不足，让我们知道如何去进行迭代。 同时，我们也一直鼓励社区的开发者积极提 PR，一个优秀的开源项目需要依靠整个社区的力量才能完善起来，到目前为止，一共收到了 120 余个 PR，已几近全部合入，这些 PR 为 Taro 注入了许多新鲜血液，让 Taro 更加健壮，我们也期望能有更多的开发者可以加入进来，一起来让 Taro 更加美好。 在 GitHub 上交流之余，我们也为开发者们开通了官方微信群供大家一起讨论 Taro 与技术，目前已有超过 1700 位开发者在关注、使用 Taro ，期待更多开发者的加入。 开发者生态完善在开源之初，Taro 一直处于封闭的状态，没有适配的 UI 库，也无法使用第三方组件库，而这些对开发效率的桎梏非常严重，社区内对此反馈较多。 所以，在 1.0.0-beta 版本开发期间，Taro 团队开发了多端 UI 库打包功能，提供了 taro build --ui 命令来将按照一定规则组织的代码打包成可以在 Taro 中使用的多端 UI 库。 并且，基于这一功能，我们推出了首个可以跨多端使用的多端 UI 库 Taro UI，目前已经支持了微信小程序与 H5 端，不久之后将完成 React Native 端的适配，可以同步提供给 React Native 端使用。 目前，多端 UI 库打包功能还处于内测阶段，在 Taro 1.0.0 发布之后，这一功能将同步发布，这样更多开发者就可以为 Taro 开发更丰富的多端组件库和 UI 库了。 未来规划Taro 将会继续保持迭代，目前已经规划了如下重要功能。 便捷测试在编译时与运行时提供代码诊断的功能，分析代码优劣，判定代码写法是否规范，以便帮助开发者规避一些由于写法带来的问题。 同时将提供一套测试方案，方便开发者书写并运行组件测试用例，提升代码质量。 多端同步调试目前 Taro 只能一次调试一个端，这对于开发多端应用来说效率略低，所以，计划提供微信小程序/ H5 / React Native 端同时调试的功能，可以一键启动多端同时编译，从而获得多端同步预览。 微信小程序/H5 代码转 Taro 代码目前已支持 Taro 代码到小程序代码、 H5 代码的转换，在未来，将提供逆向转换功能，帮助开发者将原本就存在的小程序/H5 项目直接转换成 Taro 项目，从而让原本只能运行在一端的项目获得多端运行的能力，降低开发者的重构成本。 与 React 新特性保持同步Taro 是遵循 React 语法规范的，但是 React 一直在迭代在变化，Taro 作为 React 的追随者也将会保持与 React 新特性同步，让 Taro 最大程度接近 React 开发体验。 快应用端支持目前 Taro 已经完成了快应用端组件库与 API 的适配，快应用端的文件转换与模板转换也正在开发中，不久的将来就会发布支持快应用端转换的版本。 支付宝小程序与百度智能小程序支持已预研支付宝小程序与百度智能小程序转换的可行性，即将进入开发。 多端可视化拖拽搭建目前 Taro 是依靠开发者手工编写代码来获得多端应用的，Taro 未来计划提供一个多端可视化拖拽搭建的功能，可以通过拖拽组件的方式来生成多端应用。 同时，Taro 将联合各大公司小程序开发团队，推出丰富的行业模板，为各行业应用可视化搭建提供完整的解决方案。 使用案例在开源期间，随着 Taro 的逐步完善，越来越多的开发者加入到 Taro 的使用、开发中，产生了更多更优秀的使用案例。 特别鸣谢Taro 的发展离不开广大开源爱好者的帮助，在此特别鸣谢广大 Taro 的使用者以及 Taro 主要贡献者（排名不分先后）。 aijiacy AlexStacker AsukaSong atzcl Boshen Bless-L beidan Chen-jj cuitianze dogbutcat finian frontlich guotie icodytan JerrySir js-newbee jas0ncn jinjinjin0731 kdong007 kenberkeley Lizhooh Littly lolipop99 lijinke666 looch ladjzero limichange leeenx luckyadam ly525 Manjiz mclockw Mr-Prune missmimia mushan0x0 Pines-Cheng rojer95 ronffy Songkeys Simbachen smoothdvd soulhat thewei wowlusitong xunge0613 YikaJ yuche zaaack zacksleo ZodiacSyndicate zuoge85 zuorichongxian","pubDate":"Tue, 18 Sep 2018 08:00:00 GMT","guid":"https://aotu.io/notes/2018/09/18/taro-1-0-0/","category":"小程序"},{"title":"Taro 在京东购物小程序上的实践","link":"https://aotu.io/notes/2018/09/11/taro-in-jd/","description":"Taro 简介Taro 是一个基于 React 语法规范的多端统一开发框架，大家可以通过 taro.aotu.io 进一步了解。而前段时间 Taro 发布后，京东购物小程序就开始了部分页面基于 Taro 的重构工作，本文便是对商品分类页使用 Taro 进行代码重构的一些实践分享。 混合开发模式过去的京东购物小程序未使用任何第三方框架，而是在原生小程序模式的基础上，进行了页面/组件基类、网络请求、本地存储、页面跳转等模块的封装。由于项目庞大（涉及 100 多个页面），把整个项目直接改造成 Taro 的开发方式肯定是不可行的，于是采用这么一种原生小程序与 Taro 相混合的开发模式，将部分旧页面使用 Taro 重构，部分新的页面则直接使用 Taro 进行开发。这里以商品分类页为例，先来看下原京东购物小程序项目的目录结构： 1234567891011121314151617181920├── dist│ ├── app.js│ ├── app.json│ ├── app.wxss│ ├── assets/│ ├── common/│ ├── libs/│ └── pages│ ├── cate│ │ ├── components/│ │ ├── index.js│ │ ├── index.json│ │ ├── index.wxml│ │ └── index.wxss│ └── index/├── src/├── README.md├── gulpfile.js├── package.json└── node_modules/ 1. 初始化 Taro在项目根目录处运行命令 taro init jdwxa-taro 进行初始化，完成后会新增一个名为 jdwxa-taro 的目录，Taro 相关的源代码就写在该目录中： 123456789101112131415161718├── dist/├── src/└── jdwxa-taro ├── config │ ├── dev.js │ ├── index.js │ └── prod.js ├── node_modules/ ├── package.json ├── project.config.json └── src ├── app.js ├── app.scss ├── index.html └── pages └── cate ├── index.js └── index.scss 2. Taro 配置独立的 Taro 项目会将包括 app.js、app.json、app.wxss 及页面文件均生成在 dist/ 目录中，而混合开发模式下只需要生成单个页面，这里需要对 Taro 进行一些配置，打开并编辑 config/index.js 文件： 1234567891011const config = &#123; outputRoot: '../dist', weapp: &#123; appOutput: false, npm: &#123; dir: '../../dist/common', name: 'taro' &#125; &#125;, // ...&#125; 如代码所示，outputRoot 字段为生成目标页面的存放路径，这里把它指向顶层（即原项目）的 dist/ 目录；weapp 部分，我们把 appOutput 设置成 false, 这样就不会生成 app.js、app.json、app.wxss 三个文件了，npm 字段则表示 Taro 运行时框架文件的存放目录，这里遵循原项目的规范，把它指定为 common/ 目录。这样 Taro 编译生成的目标文件就完美地融入进了原小程序项目。 3. 页面开发页面开发过程中，跟原生小程序最大的不同就是 React + JSX 的编码方式了，习惯了原生小程序的同学可能要一些适应过程，具体的编码就不细说了，这里提几点注意事项： 与小程序的 setData 方法不同，Taro 用于更新页面数据的 setState 是异步的，相关代码的执行时序需要特别注意； 为了方便 JSX 模板的书写，原先很长的 WXML 内容建议拆分成一些小的组件； 关于旧组件的复用，无论是小程序原生组件、普通 JS 模块、样式文件或是第三方组件库，都能很好的进行引入调用，这点无需担心； 目前对于 Taro 编译生成的目标代码，调试起来会有些困难，但对 SourceMap 的支持正在积极开发中。 4. 最终效果如今重构后的商品分类页已经在线上稳定运行有一段时间了，可以扫描下面的小程序码进行体验： Taro 带来的收益多端运行最大的收益便是可以生成多端版本，避免重复工作、节省开发成本。以分类页为例，只需运行 npm run build:h5 便可生成 H5 版本的分类页，运行效果和小程序一致，大家可以扫描下面的二维码进行体验： 注：以上仅为 Taro 生成的示例页面，由于一些业务组件尚未完全适配两端，所以 H5 版本暂时没有正式投入使用。 性能提升小程序项目中遇到的性能问题，大多是频繁地调用 setData 造成的，这是由于每调用一次 setData，小程序内部都会将该部分数据在逻辑层（运行环境 JSCore）进行类似序列化的操作，将数据转换成字符串形式传递给视图层（运行环境 WebView），视图层通过反序列化拿到数据后再进行页面渲染，这个过程下来有一定性能开销。 所以开发过程中，我们建议尽量对 setData 进行合并，减少调用次数，例如： 123this.setData(&#123; foo: 'Strawberry' &#125;)this.setData(&#123; foo: 'Strawberry', bar: 'Fields' &#125;)this.setData(&#123; baz: 'Forever' &#125;) 以上代码调用了 3 次 setData，造成不必要的性能开销，应对其进行合并： 12345this.setData(&#123; foo: 'Strawberry', bar: 'Fields', baz: 'Forever',&#125;) 而使用 Taro 之后，更新数据时调用的 setState 为异步方法，它会自动地对同一事件循环里的多次 setState 调用进行合并处理，此外还会进行数据 diff 优化，自动剔除那些未变更的数据，从而有效避免了此类性能问题。例如： 12345678910111213141516171819202122232425262728// 初始时this.state = &#123; foo: '1967', bar: &#123; foo: 'Strawberry', bar: 'Fields', baz: 'Forever', &#125;&#125;// 第一次更新this.setState(&#123; bar: &#123; foo: 'Norwegian', bar: 'Fields', baz: 'Forever', &#125;&#125;)// 紧接着进行第二次更新this.setState(&#123; foo: '1967', bar: &#123; foo: 'Norwegian', bar: 'Wood', baz: 'Forever', &#125;&#125;) 以上代码虽然经过两次 setState，但只有 bar.foo 和 bar.bar 的数据更新了，此时 Taro 内部会自动对数据进行合并、并剔除重复数据，最终执行代码为： 12345// this.$scope 在小程序环境中为 page 实例this.$scope.setData(&#123; 'bar.foo': 'Norwegian', 'bar.bar': 'Wood',&#125;) 其他收益比起原生小程序开发，Taro 带来了许多激动人心的特性（如支持 TypeScript、NPM、丰富的 JSX 语法、更高级的 ES 特性等等），不仅提升了开发体验，对自动化测试、持续构建等也会有不小的帮助。 举个例子，京东购物小程序里封装了一个 getImg 方法，该方法接受一个图片 url 及可选的宽高作为参数，然后根据设备类型决定是否使用 webp 格式、根据当前网络环境应用适当的图片压缩率、自动处理协议头和域名转换，最后生成符合目标大小的图片 url。我们要求所有的图片都必须经过 getImg 方法处理后才能进行展示，但由于 JS 方法只能在逻辑层进行调用，处理好后再传递给 WXML 进行展示，使得很难在自动化工具中进行检测，及时发现未调用 getImg 输出图片的情况。 而使用 Taro 之后，可以直接在 JSX 模板的 Image 标签输出时对 src 调用 getImg 方法进行处理，将此种写法作为规范明确后，就很容易通过自动化工具进行检测了： 123render () &#123; return &lt;Image src=&#123;getImg(url, 750)&#125; /&gt;&#125; So 对于现有项目来说，不需要进行整体重构，也能很好的将 Taro 集成进去。还等什么，赶紧试试吧~","pubDate":"Tue, 11 Sep 2018 09:00:00 GMT","guid":"https://aotu.io/notes/2018/09/11/taro-in-jd/","category":"小程序"}]}